PARSFILE
! TruckSim 2022.1
! Revision 180841, June 1, 2022
MODEL_LAYOUT I_I

DATASET_TITLE ACC: CCRs Test Series, Curved Road
CATEGORY ACC: Euro NCAP Tests
TITLE ACC: CCRs Test Series, Curved Road <ACC: Euro NCAP Tests>

! Echo: Results\Run_c7fa7dd6-4a10-4ff9-8965-ca3566f62722\Run_echo.par
! This run was made 14:55 on June 02, 2022.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   624 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      758 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_DEFAULT    1 ! [D] Identify values not read? 1 -> yes, show [D], 0 -> no
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    0 ! Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.5349374676 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART         34.742 ; s ! Starting time for the simulation clock
TSTART_T_EVENT 33.742 ; s ! Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE   34.742 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP             120 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    2 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 665.9436851 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1352.040646 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL 0.001006404715 ; mm ! CALC -- Y coordinate of TL CG
! M_TL           2427 ; kg ! CALC -- TL mass
! IXX_TL  1263.522575 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  4941.181065 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL   5089.65997 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           710 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1350 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             2100 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU           1029 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU           4116 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU           4116 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1960 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM           4900 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM           2262 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM           900 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         2.5 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       3100 ; mm ! Aerodynamic reference length
X_REF_AERO      -1550 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_IND_KIN(1)      0 ! CAMBER, SUSP_DIVE, SUSP_LAT, and SUSP_X apply to which
                      ! reference frame? 0 -> kingpin (classic), 1 -> non-spinning
                      ! wheel hub (installs IKU) [L]
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         355 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         355 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)     4.39 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,2)     4.39 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1) 1.36 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,2) 1.36 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1)          2.69 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          2.69 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)     1.36 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)     1.36 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1550 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)   19.04 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)   19.04 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)   44.46 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)   44.46 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)         183 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.7919125683 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2
OPT_IND_KIN(2)      0 ! CAMBER, SUSP_DIVE, SUSP_LAT, and SUSP_X apply to which
                      ! reference frame? 0 -> kingpin (classic), 1 -> non-spinning
                      ! wheel hub (installs IKU) [L]
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_WC(2,1)         425 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         425 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(2,1)      2.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(2,2)      2.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(2,1)           0.9 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)           0.9 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1550 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       3100 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(2,1)      44 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(2,2)      44 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)         144 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3888888889 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
! CMP_DESIGN(1,1) 48.04851049 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 48.04851049 ; mm ! CALC -- Compression at design load, spring R1
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 11625.6254 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 11625.6254 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 9513.605076 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 9513.605076 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 13420.24235 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 13420.24235 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 6710.121177 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 6710.121177 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 4661.221993 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,1) -53.95843629 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) -53.95843629 ; mm ! CALC -- Compression at design load, spring R2
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(2) 8968.339597 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 8968.339597 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 4484.169798 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 4484.169798 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 10380.4972 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 10380.4972 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 5190.248598 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 5190.248598 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 2937.448487 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control).

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
OPT_I_GEAR_IN       0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes [I]
BETA_COL          0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL           0.1 ; N-m ! [D] Steering column friction torque
I_COL            0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN      0.0001 ; kg-m2 ! [D] Steering system inertia
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)     5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)        7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)        7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)        2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1)   0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
D_GEAR(1)           0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)         0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)        100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)        100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE.

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1)           0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(2)           0 ; mm ! Dual-tire spacing for axle 2 [I]

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 8 -> SIEMENS Delft-Tyre; 9 ->
                        ! COSIN FTire; 10 -> third-party STI tire model [I]
OPT_TIRE_COMB(1,1,1) 1 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1)  100000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1)   11500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         1.7 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1)      28 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1)         394 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        379 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1)    0.0042 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)   3.2e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
R_TIRE_COMB(1,1,1) 1.5 ; - ! Combined slip transition factor: Factor used to
                       ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,2,1) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1)  100000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,2,1)   11500 ; N ! Reference vertical force
IT(1,2,1)         1.7 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,2,1)      28 ; kg ! Mass of tire R1i
MU_REF_X(1,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,2,1)         394 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        379 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,2,1)    0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)   3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2,1) 1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(2,1,1) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1)  100000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(2,1,1)   11500 ; N ! Reference vertical force
IT(2,1,1)         1.7 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(2,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(2,1,1)      28 ; kg ! Mass of tire L2i
MU_REF_X(2,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(2,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(2,1,1)         394 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        379 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(2,1,1)    0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)   3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,1,1) 1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(2,2,1) 1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1)  100000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(2,2,1)   11500 ; N ! Reference vertical force
IT(2,2,1)         1.7 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(2,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(2,2,1)      28 ; kg ! Mass of tire R2i
MU_REF_X(2,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(2,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(2,2,1)         394 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        379 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(2,2,1)    0.0042 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)   3.2e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,2,1) 1.5 ; - ! Combined slip transition factor
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure).

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)    1 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)    1 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)    1 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)    1 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle request can be specified
! with the function THROTTLE_ENGINE.

INSTALL_POWERTRAIN  2 ! Powertrain type: 0 -> Simple, 1 -> front-axle drive, 2 ->
                      ! rear-axle drive, 3 -> 2-axle drive, 4 -> 3-axle drive, 5 ->
                      ! 4-axle drive, 6 -> 5-axle drive [L]
! R_DRIVE_SC(1)     0 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(2)     1 ; - ! Drive torque ratio: [this axle]/[total] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! power-split hybrid electric, 2 -> electric, 3 ->
                      ! range-extended electric (series hybrid), 4 -> parallel
                      ! hybrid electric
OPT_THROTTLE_DELAY  0 ! Apply lag to requested throttle using time constants: 0 ->
                      ! no, 1 -> yes
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters and the
! function M_DIFF_VISC.

! NDIFF             2 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)   3.92 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control. When 0 or 2, functions CLUTCH_CON_DIFF and
                      ! CLUTCH_TORQUE_DIFF are used. When 2, CLUTCH_TORQUE_DIFF2 is
                      ! also used. [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes.
                      ! If 1, then functions CLUTCH_TWIN and M_TWIN are used. [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
! Behavior of an internal-combustion engine is specified with the Configurable
! Functions MENGINE and FUEL_RATE, along with the following parameters.

INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
AV_ENG_IDLE       725 ; rpm ! Engine idle speed used for initialization [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             1.15 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters to specify a hyraulic torque converted or a mechanical
! clutch.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch. The torque
                      ! converter options (0 and 2) use functions INV_CAP_TC and
                      ! RM_TC. Option 2 also uses LOCK_AT and UNLOCK_AT. [I]
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and Configurable
! Functions noted below. Transmission controller mode can be specified with the
! open-loop function MODE_TRANS and transmission gear can be specified with the
! open-loop function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model.
                       ! Option 1 uses functions DOWNSHIFT_TRANS and UPSHIFT_TRANS.
                       ! Option 2 uses functions R_GEAR_CVT, R_EFF_CVT_F, and
                       ! R_EFF_CVT_R. [I]
LIMIT_DOWNSHIFT     1 ! [D] Limit to number of gears covered in a downshift
LIMIT_UPSHIFT       1 ! [D] Limit to number of gears covered in an upshift
NGEARS              5 ! Number of forward gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, but not including
                      ! the engine. Does not include effect of nonlinear function
                      ! M_TRANS_ROT. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline. Does not include
                      ! effect of nonlinear function M_TRANS_AV. [I]
ITC_OUTPUT_SHAFT  0.1 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -3.17 ; - ! Reverse-gear ratio of trans (should be negative)
T_SHIFT          0.25 ; s ! Shift duration used in closed-loop transmission control
                      ! if upshift and/or downshift duration is not set for a gear

ITR(1)           0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)      3.6 ; - ! 1st-gear ratio of transmission
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st gear. If not specified
                      ! (default = -1), then T_SHIFT is the duration
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st gear. If not specified
                      ! (default = -1), then T_SHIFT is the duration

ITR(2)           0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     2.19 ; - ! 2nd-gear ratio of transmission
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd gear
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd gear

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     1.41 ; - ! 3rd-gear ratio of transmission
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd gear
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd gear

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)        1 ; - ! 4th-gear ratio of transmission
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th gear
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th gear

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)     0.83 ; - ! 5th-gear ratio of transmission

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

OPT_SL_METHOD       1 ! [D] Use curvature in iteration for S-L from X-Y? 1 -> yes, 0
                      ! -> no
TOL_SL_METHOD       1 ; mm ! [D] Stop iteration if X-Y from S-L solution is no
                      ! further from requested X-Y than this
! NPATH             2 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        2 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(2)       1001 ; Euro NCAP: Steer Assist, S-Bend
OPT_PATH_START(2)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! [D] Station at the start of this path
HEADING_START(2)    0 ; deg ! [D] Heading at the start of this path
X_PATH_START(2)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(2)     0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        8 ! Number of segments in this path
SEGMENT_TYPE(2,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,1) 30 ; m ! Segment length
! S_SEGMENT_END(2,1) 30 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 30 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,2)   4 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RHO_DS_ENTERING(2,2) 0 ; 1/m ! Entering rate of curvature (1/R)
SEGMENT_RHO_DS_DEPARTING(2,2) 0.001271 ; 1/m ! Departing rate of curvature (1/R)
SEGMENT_LENGTH(2,2) 30 ; m ! Segment length
! S_SEGMENT_END(2,2) 60 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,2) 59.9989096 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,2) 0.1906450503 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,2) 1.092362242 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(2,3) 787 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(2,3) 4.178879 ; deg ! Central angle of arc
! S_SEGMENT_END(2,3) 117.4000005 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,3) 117.2977227 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,3) 3.375890259 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,3) 5.271241242 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,4)   4 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RHO_DS_ENTERING(2,4) 0.001271 ; 1/m ! Entering rate of curvature (1/R)
SEGMENT_RHO_DS_DEPARTING(2,4) 0 ; 1/m ! Departing rate of curvature (1/R)
SEGMENT_LENGTH(2,4) 14 ; m ! Segment length
! S_SEGMENT_END(2,4) 131.4000005 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,4) 131.2305932 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,4) 4.744736439 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,4) 5.780983587 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,5)   4 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RHO_DS_ENTERING(2,5) 0 ; 1/m ! Entering rate of curvature (1/R)
SEGMENT_RHO_DS_DEPARTING(2,5) -0.002674 ; 1/m ! Departing rate of curvature (1/R)
SEGMENT_LENGTH(2,5) 26 ; m ! Segment length
! S_SEGMENT_END(2,5) 157.4000005 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,5) 157.1255798 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,5) 7.063585785 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,5) 3.789229397 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,6)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(2,6) -374 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(2,6) 0.781306 ; deg ! Central angle of arc
! S_SEGMENT_END(2,6) 162.5 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,6) 162.2165704 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,6) 7.36591942 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,6) 3.007923397 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,7)   4 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RHO_DS_ENTERING(2,7) -0.002674 ; 1/m ! Entering rate of curvature (1/R)
SEGMENT_RHO_DS_DEPARTING(2,7) 0 ; 1/m ! Departing rate of curvature (1/R)
SEGMENT_LENGTH(2,7) 39 ; m ! Segment length
! S_SEGMENT_END(2,7) 201.5 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,7) 201.2057244 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,7) 8.057520553 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,7) 0.02038786815 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,8)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,8) 30 ; m ! Segment length
! S_SEGMENT_END(2,8) 231.5 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,8) 231.2057225 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,8) 8.068195615 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,8) 0.02038786815 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             2 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        2 ! VS Command to define road surfaces
CURRENT_ROAD_ID  1001 ! ROAD_ID during initialization [I]

ROAD_ID(1)        999 ; ID 999: 1 km Sq. VDA, 0.9 mu
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! Number of ROAD_DZ layers added to the surface

ROAD_ID(2)       1001 ; 1001: 1 km, Two Lanes, Mu=0.90, Curved
ROAD_PATH_ID(2)  1001 ; PATH_ID for: Euro NCAP: Steer Assist, S-Bend
ROAD_SMAX_NEW_ID(2) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        0 ! Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             4 ! Number of LTARG datasets that are used in this run

PATH_ID_DM       1001 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         0 ! [D] LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0) [I]
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]

OPT_DM              0 ! [D] Driver model option: 0 -> no driver model; 1 -> use
                      ! linear dynamic model and 10 preview points; 2 -> same as 1,
                      ! but with no rear steer effect (legacy); 3 -> use geometry
                      ! and a single preview point [I]
OPT_STR_BY_TRQ      0 ! [D] Control by steering wheel torque? 0 -> no, 1 -> yes [I]

! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           1 ! Braking and SC: 0 -> turn controller off while brakes are
                      ! applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018         0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
BK_PERF_SC        1.6 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC      5 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP          1.8 ; s/m ! Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI          0.9 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           2 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      2 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; Camera,Van
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      2 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 60 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -60 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 31 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)      -975 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      2100 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(2)      2 ; Van: ACC, Range, Sensitivity by EQN
IOBJECT_SENSOR(2)   0 ! [D] Moving object in which sensor is mounted
OPT_BLOCK_SENSOR(2) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(2) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(2) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(2) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(2)      2 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(2) 7.5 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(2) -7.5 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(2) 80 ; m ! Range limit (set 0 for no limit)
X_SENSOR(2)       900 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(2)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(2)       700 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(2)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(2) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(2)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! PATH DETECTOR
!------------------------------------------------------------------------------------
INSTALL_PATH_DETECTOR 4 ! VS Command to install 4 path detector(s)

OPT_PATH_PD(1)      1 ! = 1 -> path detector uses a VehicleSim reference path, = 0
                      ! -> path detector uses imported global X-Y targets
PATH_ID_PD(1)    1001 ! PATH_ID defining path to be detected
LTARG_ID_PD(1)      1 ! LTARG_ID defining path to be detected
VEH_ID_PD(1)        1 ! [D] ID of vehicle in which detector is installed [I]
X_DETECTOR_SM(1)    0 ; mm ! Coordinate of path detector origin in the [x] direction
                      ! relative to the vehicle's sprung mass origin
Y_DETECTOR_SM(1)    0 ; mm ! Coordinate of path detector origin in the [y] direction
                      ! relative to the vehicle's sprung mass origin
L_PVW_PD(1) 0.5065398976 ; m ! Total lookahead (preview) distance along reference
                         ! path
CURVATURE_STDEV(1)  1 ; 1/m ! [D] Estimated standard deviation of detected curvature
CURV_RATE_STDEV(1)  1 ; 1/m2 ! [D] Estimated standard deviation of detected
                      ! curvature rate
Y_OFFSET_STDEV(1)   1 ; m ! [D] Estimated standard deviation of detected lateral
                      ! offset at path detector origin
Y_MEAS_STDEV(1)     1 ; m ! [D] Estimated standard deviation of measured lateral
                      ! offset at each target point

OPT_PATH_PD(2)      1 ! = 1 -> path detector uses a VehicleSim reference path, = 0
                      ! -> path detector uses imported global X-Y targets
PATH_ID_PD(2)    1001 ! PATH_ID defining path to be detected
LTARG_ID_PD(2)      2 ! LTARG_ID defining path to be detected
VEH_ID_PD(2)        1 ! [D] ID of vehicle in which detector is installed [I]
X_DETECTOR_SM(2)    0 ; mm ! Coordinate of path detector origin in the [x] direction
                      ! relative to the vehicle's sprung mass origin
Y_DETECTOR_SM(2)    0 ; mm ! Coordinate of path detector origin in the [y] direction
                      ! relative to the vehicle's sprung mass origin
L_PVW_PD(2) 0.5065398976 ; m ! Total lookahead (preview) distance along reference
                         ! path
CURVATURE_STDEV(2)  1 ; 1/m ! [D] Estimated standard deviation of detected curvature
CURV_RATE_STDEV(2)  1 ; 1/m2 ! [D] Estimated standard deviation of detected
                      ! curvature rate
Y_OFFSET_STDEV(2)   1 ; m ! [D] Estimated standard deviation of detected lateral
                      ! offset at path detector origin
Y_MEAS_STDEV(2)     1 ; m ! [D] Estimated standard deviation of measured lateral
                      ! offset at each target point

OPT_PATH_PD(3)      1 ! = 1 -> path detector uses a VehicleSim reference path, = 0
                      ! -> path detector uses imported global X-Y targets
PATH_ID_PD(3)    1001 ! PATH_ID defining path to be detected
LTARG_ID_PD(3)      3 ! LTARG_ID defining path to be detected
VEH_ID_PD(3)        1 ! [D] ID of vehicle in which detector is installed [I]
X_DETECTOR_SM(3)    0 ; mm ! Coordinate of path detector origin in the [x] direction
                      ! relative to the vehicle's sprung mass origin
Y_DETECTOR_SM(3)    0 ; mm ! Coordinate of path detector origin in the [y] direction
                      ! relative to the vehicle's sprung mass origin
L_PVW_PD(3) 0.5065398976 ; m ! Total lookahead (preview) distance along reference
                         ! path
CURVATURE_STDEV(3)  1 ; 1/m ! [D] Estimated standard deviation of detected curvature
CURV_RATE_STDEV(3)  1 ; 1/m2 ! [D] Estimated standard deviation of detected
                      ! curvature rate
Y_OFFSET_STDEV(3)   1 ; m ! [D] Estimated standard deviation of detected lateral
                      ! offset at path detector origin
Y_MEAS_STDEV(3)     1 ; m ! [D] Estimated standard deviation of measured lateral
                      ! offset at each target point

OPT_PATH_PD(4)      1 ! = 1 -> path detector uses a VehicleSim reference path, = 0
                      ! -> path detector uses imported global X-Y targets
PATH_ID_PD(4)    1001 ! PATH_ID defining path to be detected
LTARG_ID_PD(4)      4 ! LTARG_ID defining path to be detected
VEH_ID_PD(4)        1 ! [D] ID of vehicle in which detector is installed [I]
X_DETECTOR_SM(4)    0 ; mm ! Coordinate of path detector origin in the [x] direction
                      ! relative to the vehicle's sprung mass origin
Y_DETECTOR_SM(4)    0 ; mm ! Coordinate of path detector origin in the [y] direction
                      ! relative to the vehicle's sprung mass origin
L_PVW_PD(4) 1.013079795 ; m ! Total lookahead (preview) distance along reference
                        ! path
CURVATURE_STDEV(4)  1 ; 1/m ! [D] Estimated standard deviation of detected curvature
CURV_RATE_STDEV(4)  1 ; 1/m2 ! [D] Estimated standard deviation of detected
                      ! curvature rate
Y_OFFSET_STDEV(4)   1 ; m ! [D] Estimated standard deviation of detected lateral
                      ! offset at path detector origin
Y_MEAS_STDEV(4)     1 ; m ! [D] Estimated standard deviation of measured lateral
                      ! offset at each target point

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT          38 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 38 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; Detected Path Visual, Object #1
IUNIT_OBJ(1)        0 ! [D] Attach object to sprung mass of this vehicle unit, or 0
                      ! -> don't attach to a sprung mass [I]
PATH_ID_OBJ(1)      0 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
ROAD_ID_OBJ(1)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(1)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(1)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(1)   1 ! [D] Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment,
                      ! 3 -> Polygonal (vertices)
H_OBJ(1)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(1)     0 ; m ! [D] Distance from reference point to front of
                      ! rectangular object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)        2 ; m ! [D] Width of rectangular object
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
S_RdO_1   107.6882035 ; m ! Output: Station of object on road path
TypeO_1             0 ; - ! Output: User-defined Type (code) for object
V_Obj_1   1.213644355 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1   107.6222425 ; m ! Output: X coordinate of object 1
Y_Obj_1   2.543382741 ; m ! Output: Y coordinate of object 1
YawO_1              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(2)      2 ; Detected Path Visual, Object #2
IUNIT_OBJ(2)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(2)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(2)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(2)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(2)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(2)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(2)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(2)        2 ; m ! [D] Width of rectangular object
MsgObj_2            0 ; - ! Output: User-defined Message (code) for object
S_RdO_2   107.7337416 ; m ! Output: Station of object on road path
TypeO_2             0 ; - ! Output: User-defined Type (code) for object
V_Obj_2   1.220035677 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2   107.6681463 ; m ! Output: X coordinate of object 2
Y_Obj_2   2.547038221 ; m ! Output: Y coordinate of object 2
YawO_2              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(3)      3 ; Detected Path Visual, Object #3
IUNIT_OBJ(3)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(3)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(3)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(3)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(3)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(3)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(3)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(3)        2 ; m ! [D] Width of rectangular object
MsgObj_3            0 ; - ! Output: User-defined Message (code) for object
S_RdO_3   107.7801259 ; m ! Output: Station of object on road path
TypeO_3             0 ; - ! Output: User-defined Type (code) for object
V_Obj_3   1.226426941 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3   107.7140491 ; m ! Output: X coordinate of object 3
Y_Obj_3    2.55070581 ; m ! Output: Y coordinate of object 3
YawO_3              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(4)      4 ; Detected Path Visual, Object #4
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(4)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(4)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(4)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(4)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(4)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(4) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(4)        2 ; m ! [D] Width of rectangular object
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
S_RdO_4   107.8258286 ; m ! Output: Station of object on road path
TypeO_4             0 ; - ! Output: User-defined Type (code) for object
V_Obj_4   1.232818172 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_4   107.7599511 ; m ! Output: X coordinate of object 4
Y_Obj_4   2.554383062 ; m ! Output: Y coordinate of object 4
YawO_4              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(5)      5 ; Detected Path Visual, Object #5
IUNIT_OBJ(5)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(5)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(5)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(5)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(5)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(5)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(5)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(5)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(5)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(5) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(5)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(5)        2 ; m ! [D] Width of rectangular object
MsgObj_5            0 ; - ! Output: User-defined Message (code) for object
S_RdO_5   107.8720444 ; m ! Output: Station of object on road path
TypeO_5             0 ; - ! Output: User-defined Type (code) for object
V_Obj_5   1.239209392 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_5   107.8058526 ; m ! Output: X coordinate of object 5
Y_Obj_5   2.558067529 ; m ! Output: Y coordinate of object 5
YawO_5              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(6)      6 ; Detected Path Visual, Object #6
IUNIT_OBJ(6)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(6)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(6)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(6)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(6)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(6)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(6)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(6)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(6)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(6) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(6)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(6)        2 ; m ! [D] Width of rectangular object
MsgObj_6            0 ; - ! Output: User-defined Message (code) for object
S_RdO_6   107.9179156 ; m ! Output: Station of object on road path
TypeO_6             0 ; - ! Output: User-defined Type (code) for object
V_Obj_6   1.245600626 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_6   107.8517537 ; m ! Output: X coordinate of object 6
Y_Obj_6   2.561756763 ; m ! Output: Y coordinate of object 6
YawO_6              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(7)      7 ; Detected Path Visual, Object #7
IUNIT_OBJ(7)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(7)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(7)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(7)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(7)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(7)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(7)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(7)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(7)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(7) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(7)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(7)        2 ; m ! [D] Width of rectangular object
MsgObj_7            0 ; - ! Output: User-defined Message (code) for object
S_RdO_7   107.9639591 ; m ! Output: Station of object on road path
TypeO_7             0 ; - ! Output: User-defined Type (code) for object
V_Obj_7   1.251991893 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_7   107.8976546 ; m ! Output: X coordinate of object 7
Y_Obj_7   2.565448316 ; m ! Output: Y coordinate of object 7
YawO_7              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(8)      8 ; Detected Path Visual, Object #8
IUNIT_OBJ(8)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(8)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(8)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(8)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(8)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(8)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(8)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(8)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(8)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(8) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(8)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(8)        2 ; m ! [D] Width of rectangular object
MsgObj_8            0 ; - ! Output: User-defined Message (code) for object
S_RdO_8   108.0107031 ; m ! Output: Station of object on road path
TypeO_8             0 ; - ! Output: User-defined Type (code) for object
V_Obj_8   1.258383216 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_8   107.9435555 ; m ! Output: X coordinate of object 8
Y_Obj_8   2.569139741 ; m ! Output: Y coordinate of object 8
YawO_8              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(9)      9 ; Detected Path Visual, Object #9
IUNIT_OBJ(9)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(9)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(9)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(9)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(9)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(9)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(9)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(9)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(9)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(9) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(9)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(9)        2 ; m ! [D] Width of rectangular object
MsgObj_9            0 ; - ! Output: User-defined Message (code) for object
S_RdO_9   108.0569262 ; m ! Output: Station of object on road path
TypeO_9             0 ; - ! Output: User-defined Type (code) for object
V_Obj_9   1.264774621 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_9   107.9894566 ; m ! Output: X coordinate of object 9
Y_Obj_9    2.57282859 ; m ! Output: Y coordinate of object 9
YawO_9              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(10)    10 ; Detected Path Visual, Object #10
IUNIT_OBJ(10)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(10)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(10)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(10)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(10)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(10)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(10)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(10)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(10)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(10) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(10)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(10)       2 ; m ! [D] Width of rectangular object
MsgObj_10           0 ; - ! Output: User-defined Message (code) for object
S_RdO_10   108.102444 ; m ! Output: Station of object on road path
TypeO_10            0 ; - ! Output: User-defined Type (code) for object
V_Obj_10  1.271166146 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_10  108.0353581 ; m ! Output: X coordinate of object 10
Y_Obj_10  2.576512416 ; m ! Output: Y coordinate of object 10
YawO_10             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(11)    11 ; Detected Path Visual, Object #11
IUNIT_OBJ(11)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(11)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(11)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(11)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(11)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(11)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(11)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(11)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(11)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(11) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(11)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(11)       2 ; m ! [D] Width of rectangular object
MsgObj_11           0 ; - ! Output: User-defined Message (code) for object
S_RdO_11  108.1486673 ; m ! Output: Station of object on road path
TypeO_11            0 ; - ! Output: User-defined Type (code) for object
V_Obj_11  1.277557842 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_11  108.0812602 ; m ! Output: X coordinate of object 11
Y_Obj_11  2.580188771 ; m ! Output: Y coordinate of object 11
YawO_11             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(12)    12 ; Detected Path Visual, Object #12
IUNIT_OBJ(12)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(12)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(12)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(12)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(12)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(12)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(12)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(12)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(12)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(12) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(12)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(12)       2 ; m ! [D] Width of rectangular object
MsgObj_12           0 ; - ! Output: User-defined Message (code) for object
S_RdO_12  108.1941765 ; m ! Output: Station of object on road path
TypeO_12            0 ; - ! Output: User-defined Type (code) for object
V_Obj_12  1.283949788 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_12  108.1271631 ; m ! Output: X coordinate of object 12
Y_Obj_12  2.583855206 ; m ! Output: Y coordinate of object 12
YawO_12             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(13)    13 ; Detected Path Visual, Object #1
IUNIT_OBJ(13)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(13)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(13)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(13)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(13)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(13)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(13)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(13)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(13)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(13) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(13)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(13)       2 ; m ! [D] Width of rectangular object
MsgObj_13           0 ; - ! Output: User-defined Message (code) for object
S_RdO_13  107.6870009 ; m ! Output: Station of object on road path
TypeO_13            0 ; - ! Output: User-defined Type (code) for object
V_Obj_13  1.217200203 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_13  107.9391747 ; m ! Output: X coordinate of object 13
Y_Obj_13 -1.444041398 ; m ! Output: Y coordinate of object 13
YawO_13             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(14)    14 ; Detected Path Visual, Object #2
IUNIT_OBJ(14)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(14)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(14)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(14)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(14)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(14)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(14)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(14)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(14)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(14) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(14)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(14)       2 ; m ! [D] Width of rectangular object
MsgObj_14           0 ; - ! Output: User-defined Message (code) for object
S_RdO_14  107.7324771 ; m ! Output: Station of object on road path
TypeO_14            0 ; - ! Output: User-defined Type (code) for object
V_Obj_14  1.223591526 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_14  107.9850785 ; m ! Output: X coordinate of object 14
Y_Obj_14 -1.440386054 ; m ! Output: Y coordinate of object 14
YawO_14             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(15)    15 ; Detected Path Visual, Object #3
IUNIT_OBJ(15)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(15)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(15)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(15)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(15)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(15)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(15)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(15)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(15)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(15) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(15)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(15)       2 ; m ! [D] Width of rectangular object
MsgObj_15           0 ; - ! Output: User-defined Message (code) for object
S_RdO_15  107.7779496 ; m ! Output: Station of object on road path
TypeO_15            0 ; - ! Output: User-defined Type (code) for object
V_Obj_15  1.229982792 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_15  108.0309813 ; m ! Output: X coordinate of object 15
Y_Obj_15 -1.436718816 ; m ! Output: Y coordinate of object 15
YawO_15             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(16)    16 ; Detected Path Visual, Object #4
IUNIT_OBJ(16)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(16)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(16)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(16)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(16)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(16)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(16)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(16)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(16)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(16) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(16)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(16)       2 ; m ! [D] Width of rectangular object
MsgObj_16           0 ; - ! Output: User-defined Message (code) for object
S_RdO_16  107.8244442 ; m ! Output: Station of object on road path
TypeO_16            0 ; - ! Output: User-defined Type (code) for object
V_Obj_16  1.236374025 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_16  108.0768834 ; m ! Output: X coordinate of object 16
Y_Obj_16 -1.433042046 ; m ! Output: Y coordinate of object 16
YawO_16             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(17)    17 ; Detected Path Visual, Object #5
IUNIT_OBJ(17)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(17)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(17)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(17)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(17)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(17)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(17)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(17)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(17)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(17) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(17)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(17)       2 ; m ! [D] Width of rectangular object
MsgObj_17           0 ; - ! Output: User-defined Message (code) for object
S_RdO_17  107.8699149 ; m ! Output: Station of object on road path
TypeO_17            0 ; - ! Output: User-defined Type (code) for object
V_Obj_17  1.242765248 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_17  108.1227849 ; m ! Output: X coordinate of object 17
Y_Obj_17 -1.429358108 ; m ! Output: Y coordinate of object 17
YawO_17             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(18)    18 ; Detected Path Visual, Object #6
IUNIT_OBJ(18)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(18)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(18)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(18)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(18)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(18)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(18)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(18)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(18)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(18) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(18)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(18)       2 ; m ! [D] Width of rectangular object
MsgObj_18           0 ; - ! Output: User-defined Message (code) for object
S_RdO_18  107.9153815 ; m ! Output: Station of object on road path
TypeO_18            0 ; - ! Output: User-defined Type (code) for object
V_Obj_18  1.249156483 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_18   108.168686 ; m ! Output: X coordinate of object 18
Y_Obj_18 -1.425669364 ; m ! Output: Y coordinate of object 18
YawO_18             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(19)    19 ; Detected Path Visual, Object #7
IUNIT_OBJ(19)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(19)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(19)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(19)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(19)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(19)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(19)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(19)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(19)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(19) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(19)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(19)       2 ; m ! [D] Width of rectangular object
MsgObj_19           0 ; - ! Output: User-defined Message (code) for object
S_RdO_19  107.9617139 ; m ! Output: Station of object on road path
TypeO_19            0 ; - ! Output: User-defined Type (code) for object
V_Obj_19   1.25554775 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_19  108.2145869 ; m ! Output: X coordinate of object 19
Y_Obj_19 -1.421978178 ; m ! Output: Y coordinate of object 19
YawO_19             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(20)    20 ; Detected Path Visual, Object #8
IUNIT_OBJ(20)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(20)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(20)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(20)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(20)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(20)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(20)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(20)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(20)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(20) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(20)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(20)       2 ; m ! [D] Width of rectangular object
MsgObj_20           0 ; - ! Output: User-defined Message (code) for object
S_RdO_20  108.0071778 ; m ! Output: Station of object on road path
TypeO_20            0 ; - ! Output: User-defined Type (code) for object
V_Obj_20  1.261939069 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_20  108.2604878 ; m ! Output: X coordinate of object 20
Y_Obj_20 -1.418286911 ; m ! Output: Y coordinate of object 20
YawO_20             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(21)    21 ; Detected Path Visual, Object #9
IUNIT_OBJ(21)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(21)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(21)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(21)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(21)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(21)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(21)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(21)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(21)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(21) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(21)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(21)       2 ; m ! [D] Width of rectangular object
MsgObj_21           0 ; - ! Output: User-defined Message (code) for object
S_RdO_21  108.0531653 ; m ! Output: Station of object on road path
TypeO_21            0 ; - ! Output: User-defined Type (code) for object
V_Obj_21  1.268330467 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_21  108.3063889 ; m ! Output: X coordinate of object 21
Y_Obj_21 -1.414597929 ; m ! Output: Y coordinate of object 21
YawO_21             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(22)    22 ; Detected Path Visual, Object #10
IUNIT_OBJ(22)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(22)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(22)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(22)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(22)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(22)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(22)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(22)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(22)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(22) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(22)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(22)       2 ; m ! [D] Width of rectangular object
MsgObj_22           0 ; - ! Output: User-defined Message (code) for object
S_RdO_22  108.0989779 ; m ! Output: Station of object on road path
TypeO_22            0 ; - ! Output: User-defined Type (code) for object
V_Obj_22  1.274721977 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_22  108.3522904 ; m ! Output: X coordinate of object 22
Y_Obj_22 -1.410913592 ; m ! Output: Y coordinate of object 22
YawO_22             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(23)    23 ; Detected Path Visual, Object #11
IUNIT_OBJ(23)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(23)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(23)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(23)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(23)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(23)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(23)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(23)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(23)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(23) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(23)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(23)       2 ; m ! [D] Width of rectangular object
MsgObj_23           0 ; - ! Output: User-defined Message (code) for object
S_RdO_23   108.144968 ; m ! Output: Station of object on road path
TypeO_23            0 ; - ! Output: User-defined Type (code) for object
V_Obj_23  1.281113651 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_23  108.3981924 ; m ! Output: X coordinate of object 23
Y_Obj_23 -1.407236265 ; m ! Output: Y coordinate of object 23
YawO_23             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(24)    24 ; Detected Path Visual, Object #12
IUNIT_OBJ(24)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(24)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(24)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(24)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(24)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(24)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(24)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(24)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(24)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(24) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(24)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(24)       2 ; m ! [D] Width of rectangular object
MsgObj_24           0 ; - ! Output: User-defined Message (code) for object
S_RdO_24  108.1907815 ; m ! Output: Station of object on road path
TypeO_24            0 ; - ! Output: User-defined Type (code) for object
V_Obj_24  1.287505561 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_24  108.4440952 ; m ! Output: X coordinate of object 24
Y_Obj_24 -1.403568311 ; m ! Output: Y coordinate of object 24
YawO_24             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(25)    25 ; Detected Path Visual (Green), Object #1
IUNIT_OBJ(25)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(25)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(25)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(25)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(25)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(25)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(25)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(25)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(25)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(25) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(25)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(25)       2 ; m ! [D] Width of rectangular object
MsgObj_25           0 ; - ! Output: User-defined Message (code) for object
S_RdO_25  107.6870114 ; m ! Output: Station of object on road path
TypeO_25            0 ; - ! Output: User-defined Type (code) for object
V_Obj_25  1.215421743 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_25   107.780708 ; m ! Output: X coordinate of object 25
Y_Obj_25 0.5496781567 ; m ! Output: Y coordinate of object 25
YawO_25             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(26)    26 ; Detected Path Visual (Green), Object #2
IUNIT_OBJ(26)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(26)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(26)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(26)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(26)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(26)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(26)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(26)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(26)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(26) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(26)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(26)       2 ; m ! [D] Width of rectangular object
MsgObj_26           0 ; - ! Output: User-defined Message (code) for object
S_RdO_26  107.7793757 ; m ! Output: Station of object on road path
TypeO_26            0 ; - ! Output: User-defined Type (code) for object
V_Obj_26  1.228204411 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_26  107.8725156 ; m ! Output: X coordinate of object 26
Y_Obj_26 0.5569889889 ; m ! Output: Y coordinate of object 26
YawO_26             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(27)    27 ; Detected Path Visual (Green), Object #3
IUNIT_OBJ(27)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(27)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(27)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(27)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(27)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(27)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(27)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(27)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(27)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(27) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(27)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(27)       2 ; m ! [D] Width of rectangular object
MsgObj_27           0 ; - ! Output: User-defined Message (code) for object
S_RdO_27  107.8710629 ; m ! Output: Station of object on road path
TypeO_27            0 ; - ! Output: User-defined Type (code) for object
V_Obj_27  1.240987035 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_27  107.9643211 ; m ! Output: X coordinate of object 27
Y_Obj_27 0.5643248988 ; m ! Output: Y coordinate of object 27
YawO_27             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(28)    28 ; Detected Path Visual (Green), Object #4
IUNIT_OBJ(28)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(28)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(28)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(28)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(28)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(28)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(28)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(28)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(28)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(28) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(28)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(28)       2 ; m ! [D] Width of rectangular object
MsgObj_28           0 ; - ! Output: User-defined Message (code) for object
S_RdO_28  107.9632682 ; m ! Output: Station of object on road path
TypeO_28            0 ; - ! Output: User-defined Type (code) for object
V_Obj_28  1.253769634 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_28  108.0561249 ; m ! Output: X coordinate of object 28
Y_Obj_28 0.5716826595 ; m ! Output: Y coordinate of object 28
YawO_28             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(29)    29 ; Detected Path Visual (Green), Object #5
IUNIT_OBJ(29)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(29)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(29)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(29)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(29)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(29)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(29)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(29)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(29)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(29) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(29)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(29)       2 ; m ! [D] Width of rectangular object
MsgObj_29           0 ; - ! Output: User-defined Message (code) for object
S_RdO_29  108.0553049 ; m ! Output: Station of object on road path
TypeO_29            0 ; - ! Output: User-defined Type (code) for object
V_Obj_29  1.266552225 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_29  108.1479272 ; m ! Output: X coordinate of object 29
Y_Obj_29 0.5790590441 ; m ! Output: Y coordinate of object 29
YawO_29             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(30)    30 ; Detected Path Visual (Green), Object #6
IUNIT_OBJ(30)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(30)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(30)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(30)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(30)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(30)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(30)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(30)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(30)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(30) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(30)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(30)       2 ; m ! [D] Width of rectangular object
MsgObj_30           0 ; - ! Output: User-defined Message (code) for object
S_RdO_30  108.1471679 ; m ! Output: Station of object on road path
TypeO_30            0 ; - ! Output: User-defined Type (code) for object
V_Obj_30  1.279334832 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_30  108.2397283 ; m ! Output: X coordinate of object 30
Y_Obj_30 0.5864508256 ; m ! Output: Y coordinate of object 30
YawO_30             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(31)    31 ; Detected Path Visual (Green), Object #7
IUNIT_OBJ(31)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(31)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(31)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(31)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(31)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(31)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(31)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(31)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(31)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(31) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(31)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(31)       2 ; m ! [D] Width of rectangular object
MsgObj_31           0 ; - ! Output: User-defined Message (code) for object
S_RdO_31  108.2381329 ; m ! Output: Station of object on road path
TypeO_31            0 ; - ! Output: User-defined Type (code) for object
V_Obj_31  1.292117477 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_31  108.3315285 ; m ! Output: X coordinate of object 31
Y_Obj_31 0.5938547771 ; m ! Output: Y coordinate of object 31
YawO_31             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(32)    32 ; Detected Path Visual (Green), Object #8
IUNIT_OBJ(32)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(32)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(32)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(32)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(32)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(32)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(32)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(32)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(32)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(32) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(32)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(32)       2 ; m ! [D] Width of rectangular object
MsgObj_32           0 ; - ! Output: User-defined Message (code) for object
S_RdO_32  108.3307129 ; m ! Output: Station of object on road path
TypeO_32            0 ; - ! Output: User-defined Type (code) for object
V_Obj_32   1.30490019 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_32  108.4233279 ; m ! Output: X coordinate of object 32
Y_Obj_32 0.6012676714 ; m ! Output: Y coordinate of object 32
YawO_32             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(33)    33 ; Detected Path Visual (Green), Object #9
IUNIT_OBJ(33)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(33)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(33)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(33)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(33)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(33)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(33)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(33)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(33)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(33) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(33)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(33)       2 ; m ! [D] Width of rectangular object
MsgObj_33           0 ; - ! Output: User-defined Message (code) for object
S_RdO_33   108.422391 ; m ! Output: Station of object on road path
TypeO_33            0 ; - ! Output: User-defined Type (code) for object
V_Obj_33  1.317683012 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_33  108.5151269 ; m ! Output: X coordinate of object 33
Y_Obj_33 0.6086862818 ; m ! Output: Y coordinate of object 33
YawO_33             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(34)    34 ; Detected Path Visual (Green), Object #10
IUNIT_OBJ(34)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(34)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(34)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(34)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(34)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(34)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(34)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(34)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(34)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(34) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(34)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(34)       2 ; m ! [D] Width of rectangular object
MsgObj_34           0 ; - ! Output: User-defined Message (code) for object
S_RdO_34  108.5142504 ; m ! Output: Station of object on road path
TypeO_34            0 ; - ! Output: User-defined Type (code) for object
V_Obj_34  1.330465997 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_34  108.6069256 ; m ! Output: X coordinate of object 34
Y_Obj_34 0.6161073812 ; m ! Output: Y coordinate of object 34
YawO_34             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(35)    35 ; Detected Path Visual (Green), Object #11
IUNIT_OBJ(35)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(35)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(35)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(35)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(35)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(35)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(35)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(35)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(35)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(35) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(35)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(35)       2 ; m ! [D] Width of rectangular object
MsgObj_35           0 ; - ! Output: User-defined Message (code) for object
S_RdO_35  108.6062965 ; m ! Output: Station of object on road path
TypeO_35            0 ; - ! Output: User-defined Type (code) for object
V_Obj_35  1.343249221 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_35  108.6987245 ; m ! Output: X coordinate of object 35
Y_Obj_35 0.6235277426 ; m ! Output: Y coordinate of object 35
YawO_35             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(36)    36 ; Detected Path Visual (Green), Object #12
IUNIT_OBJ(36)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(36)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(36)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(36)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(36)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(36)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(36)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(36)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(36)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(36) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(36)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(36)       2 ; m ! [D] Width of rectangular object
MsgObj_36           0 ; - ! Output: User-defined Message (code) for object
S_RdO_36   108.698346 ; m ! Output: Station of object on road path
TypeO_36            0 ; - ! Output: User-defined Type (code) for object
V_Obj_36  1.356032788 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_36  108.7905236 ; m ! Output: X coordinate of object 36
Y_Obj_36 0.6309441391 ; m ! Output: Y coordinate of object 36
YawO_36             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(37)    37 ; Expected Vehicle Location, Closest
IUNIT_OBJ(37)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(37)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(37)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(37)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(37)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(37)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(37)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(37)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(37)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(37) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(37)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(37)       2 ; m ! [D] Width of rectangular object
MsgObj_37           0 ; - ! Output: User-defined Message (code) for object
S_RdO_37   111.670262 ; m ! Output: Station of object on road path
TypeO_37            0 ; - ! Output: User-defined Type (code) for object
V_Obj_37  1.216039191 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_37  111.7604039 ; m ! Output: X coordinate of object 37
Y_Obj_37 0.8654791847 ; m ! Output: Y coordinate of object 37
YawO_37             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(38)    38 ; Global Vehicle Target (GVT) for ACC
IUNIT_OBJ(38)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(38)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(38)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(38)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(38)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(38)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(38) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(38)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(38) 0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(38)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(38)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(38)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(38)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(38)      0.7135 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(38)    4.1 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(38) 0.75 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(38) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(38)     2 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(38)    1.85 ; m ! Width of rectangular object
HeadO_38            0 ; deg ! Output: Heading of object relative to path
LatO_38         -1.65 ; m ! Output: Lateral offset, object 38
MsgObj_38           0 ; - ! Output: User-defined Message (code) for object
S_Obj_38          115 ; m ! Output and possibly ODE SV: Station of object
TypeO_38            0 ; - ! Output: User-defined Type (code) for object
V_Obj_38            0 ; km/h ! Output and possibly ODE SV: Speed of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, right
                                           ! side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression can be a nonlinear CARPET
! function of jounce at wheel (other side) and jounce at wheel or a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the
! calculation can be adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel
! used in the calculation can be adjusted with JNC_SCALE_CMP_DAMP and
! JNC_START_CMP_DAMP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_DAMP and JNC2_START_CMP_DAMP. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.614 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.614 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from
! the calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_JSTOP and JNC2_START_CMP_JSTOP. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.614 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.614 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from
! the calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_RSTOP and JNC2_START_CMP_RSTOP. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.614 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.614 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement can be a
! nonlinear CARPET function of jounce at wheel (other side) and jounce at wheel or a
! function of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from
! the calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET.
! Jounce at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT
! and JNC_START_CMP_SPR_SEAT. Jounce at wheel (other side) used in the calculation
! can be adjusted with JNC2_SCALE_CMP_SPR_SEAT and JNC2_START_CMP_SPR_SEAT. An
! inverse version of this function is used internally. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.611 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, left
                                    ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.611 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, right
                                    ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0.00095 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0.00095 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1) 3.8e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 2, left side
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,2) 3.8e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 2, right side
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 277
 0.2, 277
 0.8, 698
 1, 698
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 431
 0.2, 431
 0.8, 1147
 1, 1147
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 608
 0.2, 608
 0.8, 1781
 1, 1781
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 732
 0.2, 732
 0.8, 2400
 1, 2400
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 198 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 198 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 198 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 198 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

! 2D table: row 1 has "0" (place holder) followed by 26 values of throttle position
! (-). Other rows have engine speed (rpm) followed by 26 values of fuel rate (kg/s).
FUEL_RATE_CARPET 2D_LINEAR
 0, 0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.36, 0.4, 0.44, 0.48, 0.52, 0.56, 0.6, 0.64, 0.68, 0.72, 0.76, 0.8, 0.84, 0.88, 0.92, 0.96, 1
 600, 8e-05, 0.0002, 0.0003, 0.00032, 0.00034, 0.00037, 0.00039, 0.00041, 0.00043, 0.00046, 0.00048, 0.0005, 0.00052, 0.00055, 0.00057, 0.00059, 0.00061, 0.00064, 0.00066, 0.00068, 0.0007, 0.00073, 0.00075, 0.00077, 0.00079, 0.00082
 800, 0.00013, 0.0002, 0.0004, 0.00059, 0.00071, 0.0008, 0.00083, 0.00085, 0.00086, 0.00087, 0.00088, 0.00089, 0.0009, 0.00091, 0.00092, 0.00093, 0.00094, 0.00096, 0.00097, 0.00098, 0.00099, 0.001, 0.00101, 0.00102, 0.00103, 0.00104
 900, 0.00016, 0.0002, 0.00039, 0.00062, 0.00079, 0.00091, 0.00099, 0.00104, 0.00107, 0.00108, 0.00109, 0.00111, 0.00112, 0.00113, 0.00114, 0.00115, 0.00117, 0.00118, 0.00119, 0.0012, 0.00121, 0.00123, 0.00124, 0.00125, 0.00126, 0.00127
 1000, 0.00016, 0.00021, 0.00039, 0.00064, 0.00088, 0.00104, 0.00114, 0.00123, 0.00128, 0.00131, 0.00133, 0.00134, 0.00135, 0.00137, 0.00138, 0.0014, 0.00141, 0.00142, 0.00144, 0.00145, 0.00147, 0.00148, 0.00149, 0.00151, 0.00152, 0.00154
 1100, 0.00017, 0.00023, 0.00039, 0.00066, 0.00091, 0.00113, 0.0013, 0.0014, 0.00148, 0.00153, 0.00156, 0.00158, 0.0016, 0.00161, 0.00163, 0.00165, 0.00167, 0.00168, 0.0017, 0.00172, 0.00174, 0.00175, 0.00177, 0.00179, 0.00181, 0.00182
 1200, 0.0002, 0.00026, 0.0004, 0.00066, 0.00095, 0.00119, 0.00139, 0.00154, 0.00164, 0.00173, 0.00178, 0.00181, 0.00183, 0.00184, 0.00186, 0.00188, 0.0019, 0.00192, 0.00194, 0.00195, 0.00197, 0.00199, 0.00201, 0.00203, 0.00205, 0.00207
 1300, 0.00021, 0.00028, 0.00039, 0.00067, 0.00095, 0.00124, 0.00147, 0.00166, 0.00178, 0.00189, 0.00195, 0.002, 0.00203, 0.00206, 0.00209, 0.00212, 0.00215, 0.00218, 0.00222, 0.00225, 0.00228, 0.00231, 0.00234, 0.00237, 0.0024, 0.00243
 1400, 0.00023, 0.0003, 0.00038, 0.00065, 0.00096, 0.00129, 0.00156, 0.00178, 0.00195, 0.00207, 0.00215, 0.00221, 0.00227, 0.00231, 0.00234, 0.00238, 0.00241, 0.00245, 0.00249, 0.00252, 0.00256, 0.00259, 0.00263, 0.00267, 0.0027, 0.00274
 1500, 0.00025, 0.00033, 0.00041, 0.00065, 0.00098, 0.0013, 0.00162, 0.00189, 0.00212, 0.00226, 0.00239, 0.00246, 0.00252, 0.00257, 0.00261, 0.00264, 0.00268, 0.00272, 0.00275, 0.00279, 0.00282, 0.00286, 0.0029, 0.00293, 0.00297, 0.003
 1600, 0.00027, 0.00036, 0.00044, 0.00065, 0.00095, 0.00133, 0.00168, 0.00199, 0.00223, 0.0024, 0.00255, 0.00265, 0.00272, 0.00278, 0.00284, 0.0029, 0.00296, 0.00302, 0.00308, 0.00314, 0.00319, 0.00325, 0.00331, 0.00337, 0.00343, 0.00349
 1700, 0.00033, 0.00039, 0.00046, 0.00065, 0.00097, 0.00134, 0.00174, 0.00207, 0.00239, 0.00265, 0.0028, 0.00296, 0.00307, 0.00313, 0.0032, 0.00326, 0.00331, 0.00336, 0.00342, 0.00347, 0.00352, 0.00357, 0.00363, 0.00368, 0.00373, 0.00379
 1800, 0.00038, 0.00045, 0.00053, 0.00064, 0.00097, 0.00136, 0.00175, 0.00216, 0.00256, 0.00287, 0.0031, 0.00326, 0.00343, 0.00365, 0.00388, 0.0041, 0.00424, 0.00425, 0.00427, 0.00429, 0.0043, 0.00432, 0.00434, 0.00435, 0.00437, 0.00439
 1900, 0.00043, 0.00052, 0.00061, 0.0007, 0.00095, 0.00137, 0.00179, 0.00221, 0.00272, 0.00315, 0.00347, 0.00384, 0.00423, 0.00463, 0.00487, 0.00495, 0.00502, 0.00509, 0.00513, 0.00514, 0.00516, 0.00517, 0.00519, 0.0052, 0.00521, 0.00523
 2000, 0.00047, 0.00059, 0.00083, 0.00118, 0.00162, 0.0021, 0.00259, 0.00317, 0.00367, 0.00403, 0.00436, 0.00487, 0.00537, 0.00587, 0.00603, 0.00608, 0.00614, 0.0062, 0.00624, 0.00625, 0.00626, 0.00627, 0.00629, 0.0063, 0.00631, 0.00633
 2100, 0.00051, 0.00064, 0.00085, 0.00122, 0.00165, 0.00218, 0.0027, 0.00333, 0.00392, 0.00443, 0.00477, 0.00514, 0.00568, 0.00621, 0.00675, 0.00703, 0.00709, 0.00715, 0.00721, 0.00726, 0.00731, 0.00732, 0.00733, 0.00735, 0.00736, 0.00738
 2200, 0.00052, 0.00074, 0.00095, 0.00121, 0.00167, 0.00218, 0.00272, 0.00336, 0.00404, 0.00459, 0.00538, 0.0064, 0.00701, 0.00725, 0.0075, 0.00774, 0.00793, 0.00799, 0.00805, 0.00811, 0.00817, 0.00822, 0.00828, 0.00829, 0.0083, 0.00831
 2300, 0.00059, 0.00078, 0.00098, 0.00117, 0.00164, 0.00216, 0.00272, 0.0034, 0.0041, 0.00505, 0.00633, 0.0069, 0.00747, 0.00779, 0.00807, 0.00835, 0.00863, 0.0088, 0.00886, 0.00891, 0.00897, 0.00903, 0.00909, 0.00914, 0.0092, 0.00926
 2400, 0.00065, 0.00083, 0.001, 0.00119, 0.0016, 0.00212, 0.00273, 0.00356, 0.00462, 0.00551, 0.00638, 0.00704, 0.00762, 0.00803, 0.0083, 0.00857, 0.00885, 0.00912, 0.00925, 0.00931, 0.00937, 0.00943, 0.00949, 0.00955, 0.00961, 0.00967
 2500, 0.00076, 0.0009, 0.00103, 0.00119, 0.00162, 0.00211, 0.00271, 0.00357, 0.0046, 0.00548, 0.00642, 0.00712, 0.00772, 0.00816, 0.00841, 0.00867, 0.00892, 0.00918, 0.0093, 0.00935, 0.0094, 0.00945, 0.00951, 0.00956, 0.00961, 0.00966
ENDTABLE
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
SPIN_START_FUEL_RATE 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_FUEL_RATE 1 ! Scale factor divided into (engine speed -
                       ! SPIN_START_FUEL_RATE)
THROTTLE_START_FUEL_RATE 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_FUEL_RATE 1 ! Scale factor divided into (throttle position -
                           ! THROTTLE_START_FUEL_RATE)

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 1258.94, 2468.09, 3619.86, 4710.05, 5735.83, 6695.23, 7586.84, 8409.7
 0.04, 1993.59, 3916.87, 5758.7, 7512.6, 9173.94, 10739.23, 12205.7, 13571.17
 0.06, 2344.28, 4612.4, 6792.08, 8875.96, 10858.65, 12735.94, 14504.35, 16161.01
 0.08, 2516.82, 4955.83, 7304.36, 9554.74, 11701.28, 13739.45, 15665.47, 17476.15
 0.1, 2608.63, 5139.03, 7578.4, 9918.95, 12154.85, 14281.44, 16294.79, 18191.53
 0.12, 2660.42, 5242.66, 7733.87, 10126.21, 12413.81, 14591.92, 16656.52, 18604.16
 0.14, 2690.36, 5302.78, 7824.43, 10247.46, 12565.96, 14775.15, 16870.97, 18849.91
 0.16, 2707.35, 5337.12, 7876.51, 10317.67, 12654.69, 14882.77, 16997.83, 18996.3
 0.18, 2716.2, 5355.23, 7904.34, 10355.71, 12703.42, 14942.66, 17069.34, 19079.87
 0.2, 2719.69, 5362.66, 7916.21, 10372.54, 12725.75, 14971.02, 17104.25, 19121.85
 0.22, 2719.56, 5362.84, 7917.22, 10374.93, 12730.08, 14977.86, 17114.17, 19135.39
 0.24, 2716.91, 5357.99, 7910.7, 10367.29, 12721.88, 14969.69, 17106.6, 19129.01
 0.26, 2712.5, 5349.62, 7898.89, 10352.57, 12704.84, 14950.89, 17086.64, 19108.47
 0.28, 2706.85, 5338.77, 7883.33, 10332.85, 12681.51, 14924.53, 17057.82, 19077.79
 0.3, 2700.35, 5326.18, 7865.15, 10309.6, 12653.73, 14892.78, 17022.68, 19039.82
 0.32, 2693.25, 5312.4, 7845.14, 10283.88, 12622.82, 14857.24, 16983.05, 18996.67
 0.34, 2685.76, 5297.81, 7823.91, 10256.48, 12589.77, 14819.06, 16940.29, 18949.87
 0.36, 2678.02, 5282.71, 7801.88, 10227.99, 12555.32, 14779.14, 16895.42, 18900.59
 0.38, 2670.15, 5267.33, 7779.4, 10198.86, 12520, 14738.13, 16849.22, 18849.7
 0.4, 2662.23, 5251.82, 7756.71, 10169.41, 12484.24, 14696.53, 16802.26, 18797.88
 0.42, 2654.32, 5236.32, 7734, 10139.9, 12448.36, 14654.73, 16755, 18745.62
 0.44, 2646.46, 5220.92, 7711.41, 10110.51, 12412.59, 14613.01, 16707.76, 18693.33
 0.46, 2638.7, 5205.69, 7689.05, 10081.4, 12377.13, 14571.59, 16660.82, 18641.29
 0.48, 2631.05, 5190.68, 7667, 10052.68, 12342.09, 14530.64, 16614.36, 18589.74
 0.5, 2623.54, 5175.93, 7645.33, 10024.41, 12307.6, 14490.29, 16568.55, 18538.86
 0.52, 2616.18, 5161.47, 7624.06, 9996.66, 12273.71, 14450.63, 16523.48, 18488.76
 0.54, 2608.98, 5147.31, 7603.24, 9969.48, 12240.5, 14411.72, 16479.23, 18439.55
 0.56, 2601.95, 5133.48, 7582.88, 9942.89, 12207.98, 14373.62, 16435.88, 18391.3
 0.58, 2595.09, 5119.98, 7563, 9916.91, 12176.2, 14336.35, 16393.45, 18344.04
 0.6, 2588.4, 5106.81, 7543.6, 9891.54, 12145.16, 14299.94, 16351.97, 18297.83
 0.62, 2581.88, 5093.97, 7524.68, 9866.8, 12114.87, 14264.38, 16311.46, 18252.66
 0.64, 2575.53, 5081.47, 7506.24, 9842.68, 12085.33, 14229.7, 16271.92, 18208.56
 0.66, 2569.35, 5069.29, 7488.28, 9819.18, 12056.54, 14195.87, 16233.34, 18165.51
 0.68, 2563.33, 5057.43, 7470.79, 9796.28, 12028.47, 14162.9, 16195.72, 18123.52
 0.7, 2557.47, 5045.89, 7453.76, 9773.98, 12001.14, 14130.77, 16159.05, 18082.57
 0.72, 2551.78, 5034.66, 7437.19, 9752.27, 11974.51, 14099.47, 16123.31, 18042.65
 0.74, 2546.23, 5023.73, 7421.05, 9731.13, 11948.58, 14068.97, 16088.48, 18003.73
 0.76, 2540.84, 5013.09, 7405.35, 9710.55, 11923.33, 14039.26, 16054.54, 17965.8
 0.78, 2535.59, 5002.74, 7390.06, 9690.52, 11898.74, 14010.33, 16021.48, 17928.83
 0.8, 2530.49, 4992.66, 7375.18, 9671.01, 11874.79, 13982.14, 15989.26, 17892.79
 0.82, 2525.52, 4982.86, 7360.7, 9652.01, 11851.47, 13954.68, 15957.87, 17857.68
 0.84, 2520.68, 4973.31, 7346.59, 9633.52, 11828.76, 13927.93, 15927.28, 17823.45
 0.86, 2515.97, 4964.02, 7332.86, 9615.5, 11806.63, 13901.87, 15897.47, 17790.09
 0.88, 2511.39, 4954.98, 7319.49, 9597.96, 11785.07, 13876.48, 15868.42, 17757.57
 0.9, 2506.93, 4946.16, 7306.46, 9580.86, 11764.07, 13851.73, 15840.1, 17725.87
 0.92, 2502.58, 4937.58, 7293.77, 9564.21, 11743.6, 13827.61, 15812.5, 17694.95
 0.94, 2498.35, 4929.22, 7281.41, 9547.98, 11723.65, 13804.1, 15785.58, 17664.8
 0.96, 2494.22, 4921.07, 7269.36, 9532.16, 11704.21, 13781.17, 15759.34, 17635.4
 0.98, 2490.2, 4913.13, 7257.62, 9516.74, 11685.25, 13758.82, 15733.74, 17606.72
 1, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
 1.02, 2486.29, 4905.39, 7246.17, 9501.7, 11666.76, 13737.01, 15708.77, 17578.73
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 306.2, 600.88, 882.3, 1149.48, 1401.78, 1638.74, 1860.01, 2065.37
 1, 605.83, 1189, 1746.07, 2275.1, 2774.82, 3244.29, 3682.86, 4090.04
 1.5, 892.78, 1752.48, 2574.01, 3354.57, 4092.23, 4785.63, 5433.75, 6035.88
 2, 1161.8, 2281.06, 3351.23, 4368.63, 5330.76, 6235.81, 7082.44, 7869.65
 2.5, 1408.82, 2766.79, 4066.08, 5302.21, 6472.14, 7573.62, 8604.98, 9564.94
 3, 1631.13, 3204.39, 4710.78, 6145.16, 7503.95, 8784.53, 9984.87, 11103.43
 3.5, 1827.46, 3591.29, 5281.5, 6892.37, 8419.86, 9860.96, 11213.35, 12475.2
 4, 1997.83, 3927.42, 5778.04, 7543.42, 9219.14, 10801.85, 12288.92, 13678.27
 4.5, 2143.28, 4214.8, 6203.19, 8101.76, 9905.76, 11611.53, 13216.18, 14717.36
 5, 2265.63, 4456.89, 6561.91, 8573.68, 10487.15, 12298.4, 14004.3, 15602.28
 5.5, 2367.15, 4658.08, 6860.54, 8967.25, 10972.93, 12873.45, 14665.46, 16346.2
 6, 2450.32, 4823.16, 7106.01, 9291.39, 11373.81, 13348.99, 15213.38, 16964.05
 6.5, 2517.61, 4956.95, 7305.33, 9555.12, 11700.69, 13737.6, 15662.17, 17471.29
 7, 2571.36, 5064.02, 7465.19, 9767.1, 11964.03, 14051.42, 16025.47, 17882.95
 7.5, 2613.7, 5148.56, 7591.68, 9935.26, 12173.47, 14301.67, 16315.97, 18213.03
 8, 2646.53, 5214.25, 7690.26, 10066.67, 12337.64, 14498.42, 16545.06, 18474.15
 8.5, 2671.48, 5264.33, 7765.64, 10167.52, 12464.06, 14650.49, 16722.78, 18677.46
 9, 2689.94, 5301.54, 7821.89, 10243.09, 12559.22, 14765.48, 16857.78, 18832.62
 9.5, 2703.09, 5328.18, 7862.41, 10297.87, 12628.63, 14849.86, 16957.46, 18947.88
 10, 2711.91, 5346.21, 7890.07, 10335.61, 12676.9, 14909.09, 17028.06, 19030.22
 10.5, 2717.21, 5357.22, 7907.26, 10359.46, 12707.9, 14947.72, 17074.79, 19085.51
 11, 2719.66, 5362.55, 7915.95, 10372.01, 12724.83, 14969.54, 17102.02, 19118.65
 11.5, 2719.82, 5363.29, 7917.76, 10375.41, 12730.34, 14977.71, 17113.38, 19133.71
 12, 2718.14, 5360.35, 7914.04, 10371.43, 12726.63, 14974.81, 17111.84, 19134.07
 12.5, 2714.98, 5354.46, 7905.89, 10361.53, 12715.5, 14963, 17099.89, 19122.53
 13, 2710.66, 5346.22, 7894.2, 10346.89, 12698.43, 14944.03, 17079.56, 19101.4
 13.5, 2705.42, 5336.13, 7879.72, 10328.49, 12676.64, 14919.36, 17052.55, 19072.58
 14, 2699.47, 5324.6, 7863.04, 10307.15, 12651.12, 14890.18, 17020.22, 19037.64
 14.5, 2692.97, 5311.96, 7844.68, 10283.53, 12622.71, 14857.47, 16983.73, 18997.87
 15, 2686.05, 5298.47, 7825.03, 10258.15, 12592.06, 14822.04, 16944, 18954.35
 15.5, 2678.82, 5284.36, 7804.42, 10231.46, 12559.74, 14784.54, 16901.81, 18907.95
 16, 2671.39, 5269.8, 7783.12, 10203.82, 12526.19, 14745.53, 16857.79, 18859.39
 16.5, 2663.81, 5254.95, 7761.36, 10175.53, 12491.79, 14705.44, 16812.45, 18809.27
 17, 2656.15, 5239.92, 7739.31, 10146.83, 12456.83, 14664.64, 16766.24, 18758.07
 17.5, 2648.45, 5224.82, 7717.11, 10117.91, 12421.57, 14623.42, 16719.48, 18706.2
 18, 2640.76, 5209.71, 7694.9, 10088.94, 12386.19, 14582.03, 16672.46, 18653.97
 18.5, 2633.11, 5194.66, 7672.76, 10060.03, 12350.87, 14540.66, 16625.43, 18601.65
 19, 2625.51, 5179.72, 7650.77, 10031.3, 12315.73, 14499.47, 16578.55, 18549.47
 19.5, 2618, 5164.94, 7628.98, 10002.82, 12280.89, 14458.59, 16531.99, 18497.6
 20, 2610.59, 5150.33, 7607.46, 9974.67, 12246.41, 14418.12, 16485.87, 18446.16
 20.5, 2603.28, 5135.93, 7586.23, 9946.89, 12212.37, 14378.14, 16440.27, 18395.29
 21, 2596.09, 5121.76, 7565.32, 9919.51, 12178.83, 14338.72, 16395.28, 18345.07
 21.5, 2589.02, 5107.83, 7544.76, 9892.59, 12145.8, 14299.89, 16350.96, 18295.56
 22, 2582.08, 5094.15, 7524.57, 9866.12, 12113.34, 14261.7, 16307.34, 18246.82
 22.5, 2575.28, 5080.72, 7504.74, 9840.14, 12081.45, 14224.18, 16264.47, 18198.88
 23, 2568.6, 5067.56, 7485.29, 9814.64, 12050.15, 14187.34, 16222.36, 18151.78
 23.5, 2562.07, 5054.66, 7466.23, 9789.64, 12019.45, 14151.19, 16181.02, 18105.54
 24, 2555.66, 5042.02, 7447.55, 9765.14, 11989.35, 14115.74, 16140.48, 18060.16
 24.5, 2549.39, 5029.64, 7429.26, 9741.13, 11959.86, 14080.99, 16100.72, 18015.65
 25, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
 26, 2543.26, 5017.52, 7411.34, 9717.62, 11930.96, 14046.94, 16061.75, 17972.01
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 470 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, left, inner
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 470 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, right, inner
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 470 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, inner
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 470 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, inner
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.04 ! Coefficient: pitman arm angle per unit steering gear
                             ! input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.009797959
 0.1, 0.009700949
 0.2, 0.009605841
 0.3, 0.009512525
 0.4, 0.009420127
 0.5, 0.009322277
 0.6, 0.009187466
 0.7, 0.008898309
 0.8, 0.008098066
 0.9, 0.005854699
 0.95, 0.003590465
 0.99, 0.000852466
 1, 0
 1.01, -0.000852466
 1.05, -0.003590465
 1.1, -0.005854699
 1.2, -0.008098066
 1.3, -0.008898309
 1.4, -0.009187466
 1.5, -0.009322277
 1.6, -0.009420127
 1.7, -0.009512525
 1.8, -0.009605841
 1.9, -0.009797959
 2, -0.009797959
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IAXLE, ISIDE,
! and ITIRE are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0
 1127.76475, -5.0637
 2255.5295, -9.5404
 3383.29425, -13.704
 4511.059, -17.6355
 5638.82375, -21.3781
 6766.5885, -24.9597
 7894.35325, -28.3995
 9022.118, -31.7123
 10149.88275, -34.9094
 11277.6475, -38
 12405.41225, -40.9917
 13533.177, -43.8909
 14660.94175, -46.7031
 15788.7065, -49.433
 16916.47125, -52.0848
 18044.236, -54.6622
 19172.00075, -57.1685
 20299.7655, -59.6066
 21427.53025, -61.9791
 22555.295, -64.2887
ENDTABLE
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! Left Lane Marking, LKAS, RT. Lane
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! Right Lane Marking, LKAS, RT. Lane
LTARG_CONSTANT(2)  -4 ; m ! Constant lateral offset
LTARG_GAIN(2)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(3)         3  ! Center of Rt. Lane
LTARG_CONSTANT(3)  -2 ; m ! Constant lateral offset
LTARG_GAIN(3)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(4)         4  ! Center of Rt. Lane
LTARG_CONSTANT(4)  -2 ; m ! Constant lateral offset
LTARG_GAIN(4)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(4)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 80 ; mm ! Constant tire contact length, axle 1, left,
                               ! inner
L_CONTACT_X_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 80 ; mm ! Constant tire contact length, axle 1, right,
                               ! inner
L_CONTACT_X_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 80 ; mm ! Constant tire contact length, axle 2, left,
                               ! inner
L_CONTACT_X_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 80 ; mm ! Constant tire contact length, axle 2, right,
                               ! inner
L_CONTACT_X_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 255 ; mm ! Constant tire contact width, axle 1, left,
                                ! inner
L_CONTACT_Y_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 255 ; mm ! Constant tire contact width, axle 1, right,
                                ! inner
L_CONTACT_Y_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 255 ; mm ! Constant tire contact width, axle 2, left,
                                ! inner
L_CONTACT_Y_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 255 ; mm ! Constant tire contact width, axle 2, right,
                                ! inner
L_CONTACT_Y_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.0758 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.0758 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.0758 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.0758 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 11500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 0.758 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 0.758 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 0.758 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 0.758 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 11500 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 23.9, 63.6, 111.4, 159.1, 190.9, 238.6, 286.4, 334.1, 373.9, 413.6
 1000, -15.9, 37.5, 90.8, 144.2, 197.5, 250.9, 304.2, 357.6, 411, 464.3, 517.7
 1200, -19.1, 38.2, 95.5, 152.7, 210, 267.3, 324.5, 381.8, 439.1, 496.4, 553.6
 1400, -22.3, 38.6, 99.5, 160.4, 221.3, 282.2, 343.1, 404, 464.9, 525.8, 586.7
 1600, -25.5, 37.5, 100.4, 163.4, 226.3, 289.2, 352.2, 415.1, 478, 541, 603.9
 1800, -28.6, 34.6, 97.9, 161.1, 224.4, 287.6, 350.9, 414.1, 477.4, 540.7, 603.9
 2000, -31.8, 29.8, 91.4, 153.1, 214.7, 276.3, 338, 399.6, 461.2, 522.9, 584.5
 2200, -35, 25, 85, 145, 205, 265, 325.1, 385.1, 445.1, 505.1, 565.1
 2400, -38.2, 20, 78.2, 136.4, 194.6, 252.8, 311, 369.2, 427.4, 485.6, 543.8
 2600, -41.4, 15, 71.3, 127.7, 184, 240.4, 296.7, 353.1, 409.4, 465.8, 522.1
 2800, -44.5, 9.9, 64.3, 118.8, 173.2, 227.7, 282.1, 336.5, 391, 445.4, 499.9
 3000, -47.7, 4.8, 57.3, 109.9, 162.4, 214.9, 267.5, 320, 372.5, 425.1, 477.6
 3100, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7, -47.7
 3150, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6, -63.6
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 5 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.9 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.9 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 510 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 510 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1) SPLINE ! axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1061.25
 5.5, 5008
 7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2) SPLINE ! axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1061.25
 5.5, 5008
 7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1) SPLINE ! axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1061.25
 5.5, 5008
 7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2) SPLINE ! axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1061.25
 5.5, 5008
 7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 14.18, 27.44, 39.66, 50.77, 60.75, 69.58, 77.28, 83.85
 1, 28.61, 55.37, 80.02, 102.45, 122.6, 140.44, 155.97, 169.22
 1.5, 42.17, 81.77, 118.43, 151.95, 182.2, 209.12, 232.69, 252.89
 2, 52.19, 101.72, 148.12, 191.09, 230.41, 265.9, 297.44, 324.92
 2.5, 56.3, 110.58, 162.37, 211.32, 257.09, 299.38, 337.91, 372.43
 3, 54.51, 107.99, 160.11, 210.54, 258.91, 304.87, 348.02, 387.99
 3.5, 48.92, 97.71, 146.21, 194.18, 241.35, 287.38, 331.9, 374.51
 4, 41.89, 84.25, 127.05, 170.2, 213.52, 256.78, 299.72, 341.99
 4.5, 34.92, 70.64, 107.23, 144.67, 182.91, 221.83, 261.26, 300.98
 5, 28.7, 58.33, 89.04, 120.86, 153.81, 187.85, 222.93, 258.91
 5.5, 23.39, 47.76, 73.27, 99.99, 127.99, 157.28, 187.88, 219.73
 6, 18.96, 38.88, 59.94, 82.23, 105.83, 130.8, 157.18, 184.99
 6.5, 15.28, 31.48, 48.78, 67.28, 87.08, 108.26, 130.86, 154.95
 7, 12.21, 25.31, 39.45, 54.74, 71.3, 89.18, 108.48, 129.26
 7.5, 9.65, 20.13, 31.61, 44.2, 57.98, 73.05, 89.48, 107.35
 8, 7.49, 15.77, 25, 35.28, 46.7, 59.35, 73.31, 88.65
 8.5, 5.65, 12.07, 19.38, 27.69, 37.09, 47.67, 59.49, 72.64
 9, 4.09, 8.89, 14.56, 21.19, 28.85, 37.63, 47.61, 58.86
 9.5, 2.73, 6.16, 10.41, 15.57, 21.73, 28.96, 37.34, 46.92
 10, 1.56, 3.78, 6.8, 10.7, 15.55, 21.43, 28.4, 36.54
 10.5, 0.53, 1.71, 3.64, 6.43, 10.14, 14.83, 20.58, 27.44
 11, -0.37, -0.12, 0.87, 2.68, 5.37, 9.02, 13.69, 19.43
 11.5, -1.17, -1.74, -1.59, -0.65, 1.16, 3.88, 7.59, 12.34
 12, -1.89, -3.18, -3.78, -3.61, -2.6, -0.69, 2.16, 6.03
 12.5, -2.53, -4.48, -5.74, -6.26, -5.96, -4.78, -2.69, 0.39
 13, -3.1, -5.64, -7.5, -8.64, -8.97, -8.46, -7.05, -4.69
 13.5, -3.62, -6.68, -9.1, -10.79, -11.7, -11.78, -10.99, -9.26
 14, -4.09, -7.64, -10.54, -12.74, -14.17, -14.79, -14.55, -13.41
 14.5, -4.52, -8.5, -11.85, -14.51, -16.42, -17.53, -17.8, -17.18
 15, -4.91, -9.29, -13.05, -16.13, -18.47, -20.03, -20.76, -20.62
 15.5, -5.27, -10.02, -14.16, -17.62, -20.35, -22.32, -23.48, -23.78
 16, -5.6, -10.69, -15.17, -18.98, -22.09, -24.43, -25.97, -26.67
 16.5, -5.91, -11.3, -16.1, -20.24, -23.68, -26.37, -28.27, -29.34
 17, -6.19, -11.87, -16.97, -21.41, -25.16, -28.16, -30.39, -31.81
 17.5, -6.45, -12.4, -17.77, -22.49, -26.52, -29.83, -32.36, -34.09
 18, -6.7, -12.9, -18.51, -23.5, -27.8, -31.37, -34.19, -36.21
 18.5, -6.92, -13.35, -19.21, -24.43, -28.98, -32.81, -35.89, -38.19
 19, -7.14, -13.78, -19.86, -25.31, -30.09, -34.16, -37.48, -40.03
 19.5, -7.33, -14.18, -20.47, -26.13, -31.12, -35.41, -38.97, -41.75
 20, -7.52, -14.56, -21.04, -26.89, -32.09, -36.59, -40.36, -43.36
 20.5, -7.7, -14.91, -21.57, -27.61, -33, -37.7, -41.67, -44.88
 21, -7.86, -15.25, -22.07, -28.29, -33.86, -38.74, -42.9, -46.3
 21.5, -8.02, -15.56, -22.55, -28.93, -34.67, -39.72, -44.05, -47.64
 22, -8.16, -15.86, -23, -29.53, -35.43, -40.64, -45.14, -48.91
 22.5, -8.3, -16.14, -23.42, -30.1, -36.15, -41.51, -46.18, -50.1
 23, -8.43, -16.4, -23.82, -30.64, -36.83, -42.34, -47.15, -51.23
 23.5, -8.56, -16.65, -24.2, -31.16, -37.47, -43.13, -48.08, -52.3
 24, -8.68, -16.89, -24.56, -31.64, -38.09, -43.87, -48.95, -53.32
 24.5, -8.79, -17.12, -24.91, -32.1, -38.67, -44.58, -49.79, -54.28
 25, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
 26, -8.9, -17.33, -25.23, -32.54, -39.23, -45.25, -50.58, -55.2
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Transmission torque due to compliance twist rate, added to torque
! calculated from the parameter DRIVELINE_ZETA. Compliance damping torque is a
! function of compliance twist angular rate (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Compliance damping
! torque from the calculation can be adjusted with M_TRANS_AV_GAIN and
! M_TRANS_AV_OFFSET. Compliance twist angular rate used in the calculation can be
! adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant compliance damping torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get compliance damping
                      ! torque

! M_TRANS_ROT: Transmission torque due to compliance twist, added to torque
! calculated from the parameter DRIVELINE_FREQ. Compliance torque is a function of
! compliance twist angle (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Compliance torque from the calculation can be
! adjusted with M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used
! in the calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant compliance torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get compliance torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_EQUATION AEB_MAX_BK_REQ*APPLYAEB_FULLSTOP ;
                 ! Custom function (using internal units)
PBK_CON_GAIN        1 ! Gain multiplied with calculated value to get brake pressure
PBK_CON_OFFSET      1 ; MPa ! Offset added (after gain) to get brake pressure
TSTART_PBK_CON 28.129 ; s ! Offset subtracted from time
TSCALE_PBK_CON      1 ! Scale factor divided into (time - TSTART_PBK_CON)

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 2.05
 0.91, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,1) 0 ; - ! [D] Constant ID, Road 2, left side boundary
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! [D] Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(2) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 1 ; - ! Constant gain, axle 1
R_STEER_SPEED_GAIN(1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(2) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(2) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(2) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_EQUATION(1) AND(LT(X*COS(XCOL), 30), LT(X*ABS(SIN(XCOL)), 2.5)) ;
                                 ! Custom function (using internal units)
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
DSTART_SENSOR_ANTENNA_RANGE(1) 0 ; m ! Offset subtracted from Distance
DSCALE_SENSOR_ANTENNA_RANGE(1) 1 ! Scale factor divided into (Distance -
                                 ! DSTART_SENSOR_ANTENNA_RANGE)
BSTART_SENSOR_ANTENNA_RANGE(1) 0 ; deg ! Offset subtracted from Bearing
BSCALE_SENSOR_ANTENNA_RANGE(1) 1 ! Scale factor divided into (Bearing -
                                 ! BSTART_SENSOR_ANTENNA_RANGE)

SENSOR_ANTENNA_RANGE_EQUATION(2) ((X*COS(XCOL)) < RANGE_LIMIT_SENSOR(2)) & ((X*ABS(SIN(XCOL))) < 2.5) ;
                                 ! Custom function (using internal units)
SENSOR_ANTENNA_RANGE_GAIN(2) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(2) 0 ; - ! Offset added (after gain) to get Sensitivity
DSTART_SENSOR_ANTENNA_RANGE(2) 0 ; m ! Offset subtracted from Distance
DSCALE_SENSOR_ANTENNA_RANGE(2) 1 ! Scale factor divided into (Distance -
                                 ! DSTART_SENSOR_ANTENNA_RANGE)
BSTART_SENSOR_ANTENNA_RANGE(2) 0 ; deg ! Offset subtracted from Bearing
BSCALE_SENSOR_ANTENNA_RANGE(2) 1 ! Scale factor divided into (Bearing -
                                 ! BSTART_SENSOR_ANTENNA_RANGE)

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

! 2D table: row 1 has "0" (place holder) followed by 2 values of sensor type (-).
! Other rows have target type (-) followed by 2 values of reflectiveness (-).
SENSOR_MAP_CARPET 2D_STEP
 0, 1, 2
 1, 1, 1
 2, 1, 0
 3, 1, 0
ENDTABLE

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Constant: 0 km/h
SPEED_TARGET_CONSTANT(1) 90 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 0 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -40, -34.694
 -38, -33.122
 -36, -31.543
 -34, -29.953
 -32, -28.353
 -30, -26.74
 -28, -25.113
 -26, -23.471
 -24, -21.811
 -22, -20.132
 -20, -18.434
 -18, -16.713
 -16, -14.969
 -14, -13.2
 -12, -11.405
 -10, -9.581
 -8, -7.729
 -6, -5.846
 -4, -3.931
 -2, -1.983
 0, 0
 2, 2.018
 4, 4.072
 6, 6.162
 8, 8.291
 10, 10.456
 12, 12.66
 14, 14.901
 16, 17.179
 18, 19.493
 20, 21.843
 22, 24.227
 24, 26.642
 26, 29.088
 28, 31.561
 30, 34.058
 32, 36.578
 34, 39.116
 36, 41.668
 38, 44.232
 40, 46.802
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -40, -46.802
 -38, -44.232
 -36, -41.668
 -34, -39.116
 -32, -36.578
 -30, -34.058
 -28, -31.561
 -26, -29.088
 -24, -26.642
 -22, -24.227
 -20, -21.843
 -18, -19.493
 -16, -17.179
 -14, -14.901
 -12, -12.66
 -10, -10.456
 -8, -8.291
 -6, -6.162
 -4, -4.072
 -2, -2.018
 0, 0
 2, 1.983
 4, 3.931
 6, 5.846
 8, 7.729
 10, 9.581
 12, 11.405
 14, 13.2
 16, 14.969
 18, 16.713
 20, 18.434
 22, 20.132
 24, 21.811
 26, 23.471
 28, 25.113
 30, 26.74
 32, 28.353
 34, 29.953
 36, 31.543
 38, 33.122
 40, 34.694
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! STEER_SW: Open loop steering wheel angle as a function of time. Steering wheel
! angle is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Steering wheel angle from the
! calculation can be adjusted with STEER_SW_GAIN and STEER_SW_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_STEER and TSTART_STEER.

STEER_SW_CONSTANT   0 ; deg ! Constant steering wheel angle
STEER_SW_OFFSET     0 ; deg ! Offset added (after gain) to get steering wheel angle

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1) SPLINE ! axle 2, left side
 -70, -2.07166
 -60, -1.77237
 -50, -1.47431
 -40, -1.17742
 -30, -0.881618
 -20, -0.586832
 -10, -0.292987
 0, 0
 10, 0.292218
 20, 0.583766
 30, 0.874758
 40, 1.16532
 50, 1.45561
 60, 1.7458
 70, 2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 2, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,2) SPLINE ! axle 2, right side
 -70, -2.07166
 -60, -1.77237
 -50, -1.47431
 -40, -1.17742
 -30, -0.881618
 -20, -0.586832
 -10, -0.292987
 0, 0
 10, 0.292218
 20, 0.583766
 30, 0.874758
 40, 1.16532
 50, 1.45561
 60, 1.7458
 70, 2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 2,
                                         ! right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1) SPLINE ! axle 2, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2) SPLINE ! axle 2, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, right side

! THROTTLE_ENGINE: Normalized open-loop throttle request. Normalized throttle
! request is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Normalized throttle request from the
! calculation can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET.
! Time used in the calculation can be adjusted with TSCALE_THROTTLE and
! TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! Constant normalized throttle request
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! request

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, right side

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 308
 0.2, 308
 0.8, 775
 1, 775
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 479
 0.2, 479
 0.8, 1274
 1, 1274
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 675
 0.2, 675
 0.8, 1979
 1, 1979
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 813
 0.2, 813
 0.8, 2600
 1, 2600
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER TRAFFIC = 200; - ; Traffic vehicle (object type)
DEFINE_PARAMETER VEHICLE = 202; - ; Vehicle (object type)
DEFINE_PARAMETER OCC_VEHICLE = 500; - ; Parked vehicle for sensor occlusion
DEFINE_PARAMETER PEDESTRIAN = 201; - ; Pedestrian or bike (object type)
DEFINE_PARAMETER PED_OBJ_NUM = 2; - ; Number assigned to the pedestrian moving object
DEFINE_PARAMETER OBJ_NEAR = 1; - ; closest object designation
DEFINE_PARAMETER OBJ_MID = 2; - ; 2nd closest object designation
DEFINE_PARAMETER OBJ_FAR = 3; - ; 3rd closest object designation
DEFINE_PARAMETER ID_CAM = 1; - ; number assigned to the camera sensor
DEFINE_PARAMETER TTC_THRESH_FCW = 2.3; s ; TTC threshold for the FCW Alert
DEFINE_PARAMETER FCW_THRESH_DIST = 9; m ; Long. distance threshold for FCW
DEFINE_PARAMETER TTC_BRAKE_THRESH_TIME = 1.3; s ; TTC threshold for the AEB application
DEFINE_PARAMETER AEB_THRESH_BRAKE_DIST = 7.25; m ; Long. distance threshold
DEFINE_PARAMETER PED_LAT_THRESH = 2.2; m ; lateral distance threshold
DEFINE_PARAMETER MIN_THRESH = 0.05; - ; Minimum threshold for x-distance between the pedestrian and the vehicle = value just greater than 0
DEFINE_PARAMETER AEB_MAX_BK_REQ = 10; MPa ; AEB max brake pressure request
DEFINE_PARAMETER AEB_MAX_REL_SPD = 300; km/h ; max allowable relative speed calc.
DEFINE_PARAMETER AEB_MIN_STOP_SPEED = 3; km/h ; threshold speed to cause a complete stop
DEFINE_PARAMETER TIME_GAP = 1; s ; ACC time gap
DEFINE_PARAMETER SPEED_LIMIT = 90; km/h ; Top speed limit for ACC
DEFINE_PARAMETER LANE_WIDTH = 4; m ; defined lane width
DEFINE_PARAMETER OBJ_LAT_OFFSET_THRESH = 1; m ; obj-to-road curvature lat offset
DEFINE_PARAMETER OBJ_LAT_OFFSET_THRESH2 = 2.1; m ; obj-to-road curvature lat offset
DEFINE_PARAMETER OBJ_LAT_SPEED_THRESH = 0.5; m/s ; obj-to-road curvature lat offset
DEFINE_PARAMETER ACC_ON = 1; - ; boolean for turning ACC on or off
DEFINE_PARAMETER ACC_MAX_REL_SPD = 300; km/h ; max allowable relative speed calc.
DEFINE_PARAMETER REL_SPEED_DIFF_THRESH = 15; km/h ; spd. vs. rel spd diff. min. thresh. value
DEFINE_PARAMETER MIN_ACC_GAIN = 0.05; - ; min. SC gain for ACC during stop cond.
DEFINE_PARAMETER MIN_SAFE_DIST = 10; m ; min. safety dist.
DEFINE_PARAMETER MAX_SPD_ADD_PRS = 5; km/h ; min. speed thresh, to add brk. press
DEFINE_PARAMETER PEAK_ACC_BK_ACCEL = -4; m/s2 ; peak braking negative accel
DEFINE_PARAMETER EST_BRK_DELAY = 0.7; s ; estimated brake system delay
DEFINE_PARAMETER ACC_ON_BRK_PRESS = 5; MPa ; max allowed brake pressure for ACC on
DEFINE_PARAMETER ACC_ADD_BRK_PRESS = 1; MPa ; add 1 MPa under near-stop condiitons
DEFINE_PARAMETER ACC_OFF_BRK_PRESS = 10; MPa ; max allowed brake pressure for ACC off
DEFINE_PARAMETER STAT_VEH_ACC_THRESH = 1; - ; stop dist factor thresh
DEFINE_PARAMETER STEER_RATIO = 17.3; - ;
DEFINE_PARAMETER KP = 1.5; - ;
DEFINE_PARAMETER KI = 1; - ;
DEFINE_PARAMETER LDW_THRESH = 0.35; - ; LDW sensitiviy threshold value
DEFINE_PARAMETER FIX_STEER_RATE = 5; deg/s ; the rate of steering input during a fix steer RDM event
DEFINE_PARAMETER CURRENT_PATH_ID = 1001; - ;
DEFINE_PARAMETER VUT_INIT_SPD = 70; km/h ; Start speed of driven vehicle (VUT)
DEFINE_PARAMETER INIT_TTC = 4.1; s ; target TTC at start of test
DEFINE_PARAMETER VUT_GVT_GAP = 102.5; m ; gap dist. btw. vut and gvt
DEFINE_PARAMETER SSTART_GVT = 115; m ; Starting station of GVT
DEFINE_PARAMETER LAT_GVT = -1.65; m ; Starting LTARG of GVT
DEFINE_PARAMETER LEN_GVT = 4.1; m ; Length of GVT
DEFINE_PARAMETER START_DISTANCE = 106.6; m ; Distance to GVT when test starts
DEFINE_PARAMETER VUT_START_STATION = 7.5; m ; VUT start station
DEFINE_PARAMETER VUT_START = 90; km/h ; Start speed of driven vehicle (VUT)
DEFINE_PARAMETER SPEED_REDUCTION = 86.4781; km/h ; speed reduction for the current run
DEFINE_PARAMETER MIN_SPD_REDUC = 5; km/h ; min. speed reduction after crash
DEFINE_PARAMETER V_FINAL = 0; km/h ; final speed at end of run
DEFINE_PARAMETER V_IMPACT = 8.52189; km/h ; speed at which the vehicle impacts the pedestrian target
DEFINE_PARAMETER SCORE_NEW = 4; - ; score for the current run
DEFINE_PARAMETER SCORE_OLD = 4; - ; cumulative score
DEFINE_PARAMETER MAX_TEST_SPD = 135; km/h ; max test speed for CCRm,s
DEFINE_PARAMETER SCORE_PAUSE_TIME = 1; s ; time to pause for score calculation

DEFINE_VARIABLE X_PD1_1 = 0; - ;
DEFINE_VARIABLE Y_PD1_1 = 1.95902; - ;
DEFINE_VARIABLE X_PD1_2 = 0.0460491; - ;
DEFINE_VARIABLE Y_PD1_2 = 1.95903; - ;
DEFINE_VARIABLE X_PD1_3 = 0.0920982; - ;
DEFINE_VARIABLE Y_PD1_3 = 1.95904; - ;
DEFINE_VARIABLE X_PD1_4 = 0.138147; - ;
DEFINE_VARIABLE Y_PD1_4 = 1.95907; - ;
DEFINE_VARIABLE X_PD1_5 = 0.184196; - ;
DEFINE_VARIABLE Y_PD1_5 = 1.95911; - ;
DEFINE_VARIABLE X_PD1_6 = 0.230245; - ;
DEFINE_VARIABLE Y_PD1_6 = 1.95915; - ;
DEFINE_VARIABLE X_PD1_7 = 0.276294; - ;
DEFINE_VARIABLE Y_PD1_7 = 1.95919; - ;
DEFINE_VARIABLE X_PD1_8 = 0.322344; - ;
DEFINE_VARIABLE Y_PD1_8 = 1.95924; - ;
DEFINE_VARIABLE X_PD1_9 = 0.368393; - ;
DEFINE_VARIABLE Y_PD1_9 = 1.95928; - ;
DEFINE_VARIABLE X_PD1_10 = 0.414442; - ;
DEFINE_VARIABLE Y_PD1_10 = 1.95931; - ;
DEFINE_VARIABLE X_PD1_11 = 0.460491; - ;
DEFINE_VARIABLE Y_PD1_11 = 1.95934; - ;
DEFINE_VARIABLE X_PD1_12 = 0.50654; - ;
DEFINE_VARIABLE Y_PD1_12 = 1.95936; - ;
DEFINE_VARIABLE X_PD2_1 = 0; - ;
DEFINE_VARIABLE Y_PD2_1 = -2.04098; - ;
DEFINE_VARIABLE X_PD2_2 = 0.0460491; - ;
DEFINE_VARIABLE Y_PD2_2 = -2.04097; - ;
DEFINE_VARIABLE X_PD2_3 = 0.0920982; - ;
DEFINE_VARIABLE Y_PD2_3 = -2.04096; - ;
DEFINE_VARIABLE X_PD2_4 = 0.138147; - ;
DEFINE_VARIABLE Y_PD2_4 = -2.04093; - ;
DEFINE_VARIABLE X_PD2_5 = 0.184196; - ;
DEFINE_VARIABLE Y_PD2_5 = -2.04089; - ;
DEFINE_VARIABLE X_PD2_6 = 0.230245; - ;
DEFINE_VARIABLE Y_PD2_6 = -2.04085; - ;
DEFINE_VARIABLE X_PD2_7 = 0.276294; - ;
DEFINE_VARIABLE Y_PD2_7 = -2.04081; - ;
DEFINE_VARIABLE X_PD2_8 = 0.322344; - ;
DEFINE_VARIABLE Y_PD2_8 = -2.04077; - ;
DEFINE_VARIABLE X_PD2_9 = 0.368393; - ;
DEFINE_VARIABLE Y_PD2_9 = -2.04073; - ;
DEFINE_VARIABLE X_PD2_10 = 0.414442; - ;
DEFINE_VARIABLE Y_PD2_10 = -2.04069; - ;
DEFINE_VARIABLE X_PD2_11 = 0.460491; - ;
DEFINE_VARIABLE Y_PD2_11 = -2.04066; - ;
DEFINE_VARIABLE X_PD2_12 = 0.50654; - ;
DEFINE_VARIABLE Y_PD2_12 = -2.04064; - ;
DEFINE_VARIABLE X_PD4_1 = 0; - ;
DEFINE_VARIABLE Y_PD4_1 = -0.0409736; - ;
DEFINE_VARIABLE X_PD4_2 = 0.0920982; - ;
DEFINE_VARIABLE Y_PD4_2 = -0.0409599; - ;
DEFINE_VARIABLE X_PD4_3 = 0.184196; - ;
DEFINE_VARIABLE Y_PD4_3 = -0.0409211; - ;
DEFINE_VARIABLE X_PD4_4 = 0.276294; - ;
DEFINE_VARIABLE Y_PD4_4 = -0.0408604; - ;
DEFINE_VARIABLE X_PD4_5 = 0.368393; - ;
DEFINE_VARIABLE Y_PD4_5 = -0.040781; - ;
DEFINE_VARIABLE X_PD4_6 = 0.460491; - ;
DEFINE_VARIABLE Y_PD4_6 = -0.0406861; - ;
DEFINE_VARIABLE X_PD4_7 = 0.552589; - ;
DEFINE_VARIABLE Y_PD4_7 = -0.040579; - ;
DEFINE_VARIABLE X_PD4_8 = 0.644687; - ;
DEFINE_VARIABLE Y_PD4_8 = -0.040463; - ;
DEFINE_VARIABLE X_PD4_9 = 0.736785; - ;
DEFINE_VARIABLE Y_PD4_9 = -0.0403412; - ;
DEFINE_VARIABLE X_PD4_10 = 0.828883; - ;
DEFINE_VARIABLE Y_PD4_10 = -0.040217; - ;
DEFINE_VARIABLE X_PD4_11 = 0.920982; - ;
DEFINE_VARIABLE Y_PD4_11 = -0.0400934; - ;
DEFINE_VARIABLE X_PD4_12 = 1.01308; - ;
DEFINE_VARIABLE Y_PD4_12 = -0.0399739; - ;
DEFINE_VARIABLE INTYOFFSETPD = -0.0271798; - ;

DEFINE_OUTPUT TypeO = 0; - ; Type of closest object 
DEFINE_OUTPUT Y_Obj = 0.0479877; m ; Y coord of closest object 
DEFINE_OUTPUT LxBumper = 1.875; m ; Bumper dist from camera 
DEFINE_OUTPUT PedMag = 2; - ; camera sensor detection boolean 
DEFINE_OUTPUT PedDistDetect = 5.06846; m ; camera sensor relative distance 
DEFINE_OUTPUT PedSpdDetect = -1.21411; km/h ; camera sensor relative speed 
DEFINE_OUTPUT PedBrDetect = 0.552039; deg ; camera sensor relative bearing 
DEFINE_OUTPUT ObjHeight = -0.939192; m ; camera sensor relative height 
DEFINE_OUTPUT HeightAngle = -10.6787; deg ; vert. ang. btw. x-y plane & obj. 
DEFINE_OUTPUT xyDistSens = 4.98069; m ; x-y plane project. ofcamera dist. 
DEFINE_OUTPUT xDistAct = 3.10546; m ; x-sensor dist. from fr. bumper 
DEFINE_OUTPUT yDistAct = 0.0479877; m ; y-sensor dist. from fr. bumper 
DEFINE_OUTPUT Long_Ped_Rel = 3.10546; m ; x-relative dist. to pedestrian 
DEFINE_OUTPUT Lat_Ped_Rel = 0.0479877; m ; y-relative dist. to pedestrian 
DEFINE_OUTPUT RelBearingBumper = 0.885304; deg ; rel. bearing from fr. bumper 
DEFINE_OUTPUT RelDistFrontBump = 3.10583; m ; rel. dist. from from fr. bumper 
DEFINE_OUTPUT RelSpeedOk = -0.337254; - ; rel. spd w/init val. saturation 
DEFINE_OUTPUT TTC_AEB = 9.20917; s ; time-to-collision 
DEFINE_OUTPUT AEB_On = 0; - ; Boolean to activate system AEB 
DEFINE_OUTPUT AEB_TimeThresh = 0; - ; bool. for AEB time criteria met 
DEFINE_OUTPUT AEB_DistThresh = 1; - ; bool. for AEB dist. criteria met 
DEFINE_OUTPUT ApplyAEB_FullStop = 0; - ; Bool. to apply brakes from AEB 
DEFINE_OUTPUT FCW_TimeThresh = 0; - ; bool. for AEB time criteria met 
DEFINE_OUTPUT FCW_DistThresh = 1; - ; bool. for FCW dist. criteria met 
DEFINE_OUTPUT Show_FCW = 1; - ; bool for FCW activation on HUD 
DEFINE_OUTPUT LxBumperRadar = 0; m ; Bumper dist from camera 
DEFINE_OUTPUT speedLimitOut = 90; km/h ; ACC set speed 
DEFINE_OUTPUT minRelDist = 3.09518; m ; minRelDist 
DEFINE_OUTPUT RelDistBump1 = 3.09518; m ; 1st veh. rel. dist, frt. bump 
DEFINE_OUTPUT minRelDistBump = 3.09518; m ; min. rel. dist from frt. bumper 
DEFINE_OUTPUT RelDistBump2 = 0; m ; 2nd veh. rel. dist, frt. bump 
DEFINE_OUTPUT RelDistBump3 = 0; m ; 3rd veh. rel. dist, frt. bump 
DEFINE_OUTPUT obj1LatSpeed = -0.0032536; m/s ; 1st veh. lateral speed 
DEFINE_OUTPUT obj2LatSpeed = 0; m/s ; 1st veh. lateral speed 
DEFINE_OUTPUT obj3LatSpeed = 0; m/s ; 1st veh. lateral speed 
DEFINE_OUTPUT relLatOff1 = 0.0298209; m ; relative lat offset 
DEFINE_OUTPUT objRadCurvOffset1_max = 0.0697904; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset1_mid = 0.0704553; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset1 = 0.0697904; m ; offset from last prev. point 
DEFINE_OUTPUT relLatOff2 = 0; m ; relative lat offset 
DEFINE_OUTPUT objRadCurvOffset2_max = 0; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset2_mid = 0; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset2 = 0; m ; offset from last prev. point 
DEFINE_OUTPUT relLatOff3 = 0; m ; relative lat offset 
DEFINE_OUTPUT objRadCurvOffset3_max = 0; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset3_mid = 0; m ; offset from last prev. point 
DEFINE_OUTPUT objRadCurvOffset3 = 0; m ; offset from last prev. point 
DEFINE_OUTPUT vehObjInLane1 = 1; - ; boolean sensed veh in-lane 
DEFINE_OUTPUT vehObjInLane2 = 0; - ; boolean sensed veh in-lane 
DEFINE_OUTPUT vehObjInLane3 = 0; - ; boolean sensed veh in-lane 
DEFINE_OUTPUT vehObjInLane = 1; - ; bool, sensed veh in-lane 
DEFINE_OUTPUT xSensLocate = 108.677; m ; xSensLocate 
DEFINE_OUTPUT ySensLocate = 0.590523; m ; ySensLocate 
DEFINE_OUTPUT xSensOutGlob1 = 3.08294; m ; y sensed obj global x-pos, inert. 
DEFINE_OUTPUT ySensOutGlob1 = 0.274956; m ; x sensed obj global y-pos, inert. 
DEFINE_OUTPUT xObjLocatGlob1 = 111.76; m ; x moving obj. location 
DEFINE_OUTPUT yObjLocatGlob1 = 0.865479; m ; y moving obj. location 
DEFINE_OUTPUT speedLimitSet = 90; km/h ; ACC speed setpoint 
DEFINE_OUTPUT speedMpS = 0.3377; m/s ; current speed in m/s 
DEFINE_OUTPUT minRelSpeedCheck = -1.21571; km/h ; min rel. spd from multiple sensors 
DEFINE_OUTPUT minRelSpeed = -1.21571; km/h ; rel. spd w/init val. saturation 
DEFINE_OUTPUT minDistExceeded = 1; - ; bool for min. rel dist exceeded 
DEFINE_OUTPUT leadVehSpeed = 4.06389e-06; km/h ; diff between Vx and rel speed 
DEFINE_OUTPUT accDesiredDist = 10; m ; desired ACC dist 
DEFINE_OUTPUT sens2_TTC = 9.16551; s ; TTC for second sensor 
DEFINE_OUTPUT acc_TTC = 9.16551; s ; ACC TTC plotting and HUD 
DEFINE_OUTPUT desiredVsActualDistGain = 0.309518; - ; test for ACC on 
DEFINE_OUTPUT tUnderBrk = 0.784425; s ; time from current spd to stop 
DEFINE_OUTPUT estStopDist = 9.03426; m ; est. stopping dist. + min. safe dist. 
DEFINE_OUTPUT stopDistFactor = 0.342605; - ; stop dist factor for acc spd gain 
DEFINE_OUTPUT desiredSpeed = 90; km/h ; desired relative speed 
DEFINE_OUTPUT desiredSpdGain = 1; - ; desired relative speed gain 
DEFINE_OUTPUT desiredSpdGainAdj = 0.342605; - ; adjusted spd gain, from est stp dist 
DEFINE_OUTPUT minRelCriteriaGain = 0.309518; - ; min. relative obst. criteria gain 
DEFINE_OUTPUT leadVehSlowStopFlag = 1; - ; flag for speed conditions 
DEFINE_OUTPUT stopDistGainOn = 1; - ; use of stopping dist calc for brake 
DEFINE_OUTPUT accSpdStopGain = 0.05; - ; accSpdStopGain 
DEFINE_OUTPUT minACC_Gain = 0; - ; mult-sensor bool 
DEFINE_OUTPUT speedTargetGainOut = 0; - ; output value for ACC target gain 
DEFINE_OUTPUT LB1_OPCT = 1; - ; LB1_OPCT 
DEFINE_OUTPUT LB2_OPCT = 0; - ; LB2_OPCT 
DEFINE_OUTPUT LB3_OPCT = 0; - ; LB3_OPCT 
DEFINE_OUTPUT LB4_OPCT = 0; - ; LB4_OPCT 
DEFINE_OUTPUT SteerDisturbance = 20.9427; deg ; SteerDisturbance 
DEFINE_OUTPUT threshDist = 1.4; m ; distance for triggering LDW 
DEFINE_OUTPUT WARN_L = 0; - ; L edge warning 
DEFINE_OUTPUT WARN_R = 0; - ; R edge warning 
DEFINE_OUTPUT FixSteer = 0; - ; Need steering correction 
DEFINE_OUTPUT Vx_GVT = 0; km/h ; GVT Speed 
DEFINE_OUTPUT vutStart = 90; km/h ; requested start speed of VUT 
DEFINE_OUTPUT Contact = 0; - ; Boolean: contact with EVT 
DEFINE_OUTPUT Crashed = 1; - ; Boolean: crash occured 
DEFINE_OUTPUT CurrentRunScore = 4; - ; CurrentRunScore 
DEFINE_OUTPUT TotalScore = 4; - ; TotalScore 
DEFINE_OUTPUT EgoSpeedReduction = 86.4781; km/h ; EgoSpeedReduction 
DEFINE_OUTPUT vImpactOut = 8.52189; km/h ; Vimpact plotting output 
DEFINE_OUTPUT Ax_m_per_sec = 0.0152711; m/s2 ; converstion to m/s^2 

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN L_PVW_PD(1) = VXZ_FWD*1.5;
EQ_IN L_PVW_PD(2) = VXZ_FWD*1.5;
EQ_IN L_PVW_PD(3) = VXZ_FWD*1.5;
EQ_IN L_PVW_PD(4) = VXZ_FWD*3;
EQ_IN PBK_CON_OFFSET = ACC_ADD_BRK_PRESS*((MINACC_GAIN == 0) & (MINDISTEXCEEDED > 0)) & (VXZ_FWD < MAX_SPD_ADD_PRS);
EQ_IN IMP_STEER_SW = KP*YOFFSETPD_3 + KI*INTYOFFSETPD + STEERDISTURBANCE;
EQ_IN LATO_38 = LAT_GVT;

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT TYPEO = TYPS1_1;
EQ_OUT Y_OBJ = Y_S1_1;
EQ_OUT LXBUMPER = LX_F_SM -X_SENSOR(1);
EQ_OUT PEDMAG = DETECT_MAG(ID_CAM, OBJ_NEAR);
EQ_OUT PEDDISTDETECT = DETECT_DIST(ID_CAM, OBJ_NEAR);
EQ_OUT PEDSPDDETECT = DETECT_SPD(ID_CAM, OBJ_NEAR);
EQ_OUT PEDBRDETECT = DETECT_BR_CP(ID_CAM, OBJ_NEAR);
EQ_OUT OBJHEIGHT = IF(PEDMAG, DETECT_Z(ID_CAM, OBJ_NEAR), 0);
EQ_OUT HEIGHTANGLE = IF(ABS(PEDDISTDETECT) > 0, ASIN(OBJHEIGHT/PEDDISTDETECT), 0);
EQ_OUT XYDISTSENS = IF(PEDMAG, PEDDISTDETECT*COS(HEIGHTANGLE), 0);
EQ_OUT XDISTACT = XYDISTSENS*COS(PEDBRDETECT) -LXBUMPER;
EQ_OUT YDISTACT = XYDISTSENS*SIN(PEDBRDETECT);
EQ_OUT LONG_PED_REL = IF(PEDMAG, XDISTACT, 0);
EQ_OUT LAT_PED_REL = IF(PEDMAG, YDISTACT, 0);
EQ_OUT RELBEARINGBUMPER = IF(ABS(LONG_PED_REL) > MIN_THRESH, ATAN(LAT_PED_REL/LONG_PED_REL), 0);
EQ_OUT RELDISTFRONTBUMP = IF(PEDMAG, SQRT(LAT_PED_REL^2 + LONG_PED_REL^2), 0);
EQ_OUT RELSPEEDOK = IF(ABS(PEDSPDDETECT) < AEB_MAX_REL_SPD, PEDSPDDETECT, 0);
EQ_OUT TTC_AEB = IF(PEDMAG & ((RELSPEEDOK*3.6) < -MIN_THRESH), ABS(RELDISTFRONTBUMP/PEDSPDDETECT), 0);
EQ_OUT AEB_TIMETHRESH = ((TTC_AEB < TTC_BRAKE_THRESH_TIME) & (TTC_AEB > MIN_THRESH)) & (ABS(LAT_PED_REL) < PED_LAT_THRESH);
EQ_OUT AEB_DISTTHRESH = (PEDMAG & (LONG_PED_REL < AEB_THRESH_BRAKE_DIST)) & (ABS(LAT_PED_REL) < PED_LAT_THRESH);
EQ_OUT APPLYAEB_FULLSTOP = IF(AEB_ON & PEDMAG, (AEB_TIMETHRESH | AEB_DISTTHRESH) | (ABS(VXZ_FWD) < AEB_MIN_STOP_SPEED), 0);
EQ_OUT FCW_TIMETHRESH = ((TTC_AEB < TTC_THRESH_FCW) & (TTC_AEB > MIN_THRESH)) & (ABS(LAT_PED_REL) < PED_LAT_THRESH);
EQ_OUT FCW_DISTTHRESH = (PEDMAG & (LONG_PED_REL < FCW_THRESH_DIST)) & (ABS(LAT_PED_REL) < PED_LAT_THRESH);
EQ_OUT SHOW_FCW = (((PEDMAG & (RELSPEEDOK < 0)) & FCW_TIMETHRESH) | FCW_DISTTHRESH) | APPLYAEB_FULLSTOP;
EQ_OUT OPT_SC = IF(APPLYAEB_FULLSTOP, 0, 3);
EQ_OUT LXBUMPERRADAR = LX_F_SM -X_SENSOR(2);
EQ_OUT SPEEDLIMITOUT = SPEED_LIMIT;
EQ_OUT X_PD1_1 = 0*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_1 = (CURVRATEPD_1/6)*X_PD1_1^3 + (CURVPD_1/2)*X_PD1_1^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_1 = X_PD1_1*COS(YAW) -(Y_PD1_1*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_1 = X_PD1_1*SIN(YAW) + Y_PD1_1*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_2 = 1*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_2 = (CURVRATEPD_1/6)*X_PD1_2^3 + (CURVPD_1/2)*X_PD1_2^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_2 = X_PD1_2*COS(YAW) -(Y_PD1_2*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_2 = X_PD1_2*SIN(YAW) + Y_PD1_2*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_3 = 2*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_3 = (CURVRATEPD_1/6)*X_PD1_3^3 + (CURVPD_1/2)*X_PD1_3^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_3 = X_PD1_3*COS(YAW) -(Y_PD1_3*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_3 = X_PD1_3*SIN(YAW) + Y_PD1_3*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_4 = 3*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_4 = (CURVRATEPD_1/6)*X_PD1_4^3 + (CURVPD_1/2)*X_PD1_4^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_4 = X_PD1_4*COS(YAW) -(Y_PD1_4*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_4 = X_PD1_4*SIN(YAW) + Y_PD1_4*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_5 = 4*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_5 = (CURVRATEPD_1/6)*X_PD1_5^3 + (CURVPD_1/2)*X_PD1_5^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_5 = X_PD1_5*COS(YAW) -(Y_PD1_5*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_5 = X_PD1_5*SIN(YAW) + Y_PD1_5*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_6 = 5*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_6 = (CURVRATEPD_1/6)*X_PD1_6^3 + (CURVPD_1/2)*X_PD1_6^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_6 = X_PD1_6*COS(YAW) -(Y_PD1_6*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_6 = X_PD1_6*SIN(YAW) + Y_PD1_6*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_7 = 6*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_7 = (CURVRATEPD_1/6)*X_PD1_7^3 + (CURVPD_1/2)*X_PD1_7^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_7 = X_PD1_7*COS(YAW) -(Y_PD1_7*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_7 = X_PD1_7*SIN(YAW) + Y_PD1_7*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_8 = 7*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_8 = (CURVRATEPD_1/6)*X_PD1_8^3 + (CURVPD_1/2)*X_PD1_8^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_8 = X_PD1_8*COS(YAW) -(Y_PD1_8*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_8 = X_PD1_8*SIN(YAW) + Y_PD1_8*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_9 = 8*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_9 = (CURVRATEPD_1/6)*X_PD1_9^3 + (CURVPD_1/2)*X_PD1_9^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_9 = X_PD1_9*COS(YAW) -(Y_PD1_9*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_9 = X_PD1_9*SIN(YAW) + Y_PD1_9*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_10 = 9*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_10 = (CURVRATEPD_1/6)*X_PD1_10^3 + (CURVPD_1/2)*X_PD1_10^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_10 = X_PD1_10*COS(YAW) -(Y_PD1_10*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_10 = X_PD1_10*SIN(YAW) + Y_PD1_10*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_11 = 10*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_11 = (CURVRATEPD_1/6)*X_PD1_11^3 + (CURVPD_1/2)*X_PD1_11^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_11 = X_PD1_11*COS(YAW) -(Y_PD1_11*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_11 = X_PD1_11*SIN(YAW) + Y_PD1_11*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD1_12 = 11*L_PVW_PD(1)/11;
EQ_OUT Y_PD1_12 = (CURVRATEPD_1/6)*X_PD1_12^3 + (CURVPD_1/2)*X_PD1_12^2 + YOFFSETPD_1;
EQ_OUT X_OBJ_12 = X_PD1_12*COS(YAW) -(Y_PD1_12*SIN(YAW)) + X_DETECTOR_1;
EQ_OUT Y_OBJ_12 = X_PD1_12*SIN(YAW) + Y_PD1_12*COS(YAW) + Y_DETECTOR_1;
EQ_OUT X_PD2_1 = 0*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_1 = (CURVRATEPD_2/6)*X_PD2_1^3 + (CURVPD_2/2)*X_PD2_1^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_13 = X_PD2_1*COS(YAW) -(Y_PD2_1*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_13 = X_PD2_1*SIN(YAW) + Y_PD2_1*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_2 = 1*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_2 = (CURVRATEPD_2/6)*X_PD2_2^3 + (CURVPD_2/2)*X_PD2_2^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_14 = X_PD2_2*COS(YAW) -(Y_PD2_2*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_14 = X_PD2_2*SIN(YAW) + Y_PD2_2*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_3 = 2*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_3 = (CURVRATEPD_2/6)*X_PD2_3^3 + (CURVPD_2/2)*X_PD2_3^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_15 = X_PD2_3*COS(YAW) -(Y_PD2_3*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_15 = X_PD2_3*SIN(YAW) + Y_PD2_3*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_4 = 3*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_4 = (CURVRATEPD_2/6)*X_PD2_4^3 + (CURVPD_2/2)*X_PD2_4^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_16 = X_PD2_4*COS(YAW) -(Y_PD2_4*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_16 = X_PD2_4*SIN(YAW) + Y_PD2_4*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_5 = 4*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_5 = (CURVRATEPD_2/6)*X_PD2_5^3 + (CURVPD_2/2)*X_PD2_5^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_17 = X_PD2_5*COS(YAW) -(Y_PD2_5*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_17 = X_PD2_5*SIN(YAW) + Y_PD2_5*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_6 = 5*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_6 = (CURVRATEPD_2/6)*X_PD2_6^3 + (CURVPD_2/2)*X_PD2_6^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_18 = X_PD2_6*COS(YAW) -(Y_PD2_6*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_18 = X_PD2_6*SIN(YAW) + Y_PD2_6*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_7 = 6*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_7 = (CURVRATEPD_2/6)*X_PD2_7^3 + (CURVPD_2/2)*X_PD2_7^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_19 = X_PD2_7*COS(YAW) -(Y_PD2_7*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_19 = X_PD2_7*SIN(YAW) + Y_PD2_7*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_8 = 7*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_8 = (CURVRATEPD_2/6)*X_PD2_8^3 + (CURVPD_2/2)*X_PD2_8^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_20 = X_PD2_8*COS(YAW) -(Y_PD2_8*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_20 = X_PD2_8*SIN(YAW) + Y_PD2_8*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_9 = 8*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_9 = (CURVRATEPD_2/6)*X_PD2_9^3 + (CURVPD_2/2)*X_PD2_9^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_21 = X_PD2_9*COS(YAW) -(Y_PD2_9*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_21 = X_PD2_9*SIN(YAW) + Y_PD2_9*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_10 = 9*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_10 = (CURVRATEPD_2/6)*X_PD2_10^3 + (CURVPD_2/2)*X_PD2_10^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_22 = X_PD2_10*COS(YAW) -(Y_PD2_10*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_22 = X_PD2_10*SIN(YAW) + Y_PD2_10*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_11 = 10*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_11 = (CURVRATEPD_2/6)*X_PD2_11^3 + (CURVPD_2/2)*X_PD2_11^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_23 = X_PD2_11*COS(YAW) -(Y_PD2_11*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_23 = X_PD2_11*SIN(YAW) + Y_PD2_11*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD2_12 = 11*L_PVW_PD(2)/11;
EQ_OUT Y_PD2_12 = (CURVRATEPD_2/6)*X_PD2_12^3 + (CURVPD_2/2)*X_PD2_12^2 + YOFFSETPD_2;
EQ_OUT X_OBJ_24 = X_PD2_12*COS(YAW) -(Y_PD2_12*SIN(YAW)) + X_DETECTOR_2;
EQ_OUT Y_OBJ_24 = X_PD2_12*SIN(YAW) + Y_PD2_12*COS(YAW) + Y_DETECTOR_2;
EQ_OUT X_PD4_1 = 0*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_1 = (CURVRATEPD_4/6)*X_PD4_1^3 + (CURVPD_4/2)*X_PD4_1^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_25 = X_PD4_1*COS(YAW) -(Y_PD4_1*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_25 = X_PD4_1*SIN(YAW) + Y_PD4_1*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_2 = 1*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_2 = (CURVRATEPD_4/6)*X_PD4_2^3 + (CURVPD_4/2)*X_PD4_2^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_26 = X_PD4_2*COS(YAW) -(Y_PD4_2*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_26 = X_PD4_2*SIN(YAW) + Y_PD4_2*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_3 = 2*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_3 = (CURVRATEPD_4/6)*X_PD4_3^3 + (CURVPD_4/2)*X_PD4_3^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_27 = X_PD4_3*COS(YAW) -(Y_PD4_3*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_27 = X_PD4_3*SIN(YAW) + Y_PD4_3*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_4 = 3*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_4 = (CURVRATEPD_4/6)*X_PD4_4^3 + (CURVPD_4/2)*X_PD4_4^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_28 = X_PD4_4*COS(YAW) -(Y_PD4_4*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_28 = X_PD4_4*SIN(YAW) + Y_PD4_4*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_5 = 4*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_5 = (CURVRATEPD_4/6)*X_PD4_5^3 + (CURVPD_4/2)*X_PD4_5^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_29 = X_PD4_5*COS(YAW) -(Y_PD4_5*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_29 = X_PD4_5*SIN(YAW) + Y_PD4_5*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_6 = 5*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_6 = (CURVRATEPD_4/6)*X_PD4_6^3 + (CURVPD_4/2)*X_PD4_6^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_30 = X_PD4_6*COS(YAW) -(Y_PD4_6*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_30 = X_PD4_6*SIN(YAW) + Y_PD4_6*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_7 = 6*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_7 = (CURVRATEPD_4/6)*X_PD4_7^3 + (CURVPD_4/2)*X_PD4_7^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_31 = X_PD4_7*COS(YAW) -(Y_PD4_7*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_31 = X_PD4_7*SIN(YAW) + Y_PD4_7*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_8 = 7*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_8 = (CURVRATEPD_4/6)*X_PD4_8^3 + (CURVPD_4/2)*X_PD4_8^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_32 = X_PD4_8*COS(YAW) -(Y_PD4_8*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_32 = X_PD4_8*SIN(YAW) + Y_PD4_8*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_9 = 8*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_9 = (CURVRATEPD_4/6)*X_PD4_9^3 + (CURVPD_4/2)*X_PD4_9^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_33 = X_PD4_9*COS(YAW) -(Y_PD4_9*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_33 = X_PD4_9*SIN(YAW) + Y_PD4_9*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_10 = 9*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_10 = (CURVRATEPD_4/6)*X_PD4_10^3 + (CURVPD_4/2)*X_PD4_10^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_34 = X_PD4_10*COS(YAW) -(Y_PD4_10*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_34 = X_PD4_10*SIN(YAW) + Y_PD4_10*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_11 = 10*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_11 = (CURVRATEPD_4/6)*X_PD4_11^3 + (CURVPD_4/2)*X_PD4_11^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_35 = X_PD4_11*COS(YAW) -(Y_PD4_11*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_35 = X_PD4_11*SIN(YAW) + Y_PD4_11*COS(YAW) + Y_DETECTOR_4;
EQ_OUT X_PD4_12 = 11*L_PVW_PD(4)/11;
EQ_OUT Y_PD4_12 = (CURVRATEPD_4/6)*X_PD4_12^3 + (CURVPD_4/2)*X_PD4_12^2 + YOFFSETPD_4;
EQ_OUT X_OBJ_36 = X_PD4_12*COS(YAW) -(Y_PD4_12*SIN(YAW)) + X_DETECTOR_4;
EQ_OUT Y_OBJ_36 = X_PD4_12*SIN(YAW) + Y_PD4_12*COS(YAW) + Y_DETECTOR_4;
EQ_OUT MINRELDIST = IF((DISS2_1 > 0) & (DISS2_2 > 0), MIN(DISS2_1, DISS2_2), DISS2_1);
EQ_OUT RELDISTBUMP1 = IF(MAGS2_1, DISS2_1 -LXBUMPERRADAR, 0);
EQ_OUT MINRELDISTBUMP = RELDISTBUMP1;
EQ_OUT RELDISTBUMP2 = IF(MAGS2_2, DISS2_2 -LXBUMPERRADAR, 0);
EQ_OUT RELDISTBUMP3 = IF(MAGS2_3, DISS2_3 -LXBUMPERRADAR, 0);
EQ_OUT OBJ1LATSPEED = IF(MAGS2_1, SPDS2_1*SIN(BRCS2_1), 0);
EQ_OUT OBJ2LATSPEED = IF(MAGS2_2, SPDS2_2*SIN(BRCS2_2), 0);
EQ_OUT OBJ3LATSPEED = IF(MAGS2_3, SPDS2_3*SIN(BRCS2_3), 0);
EQ_OUT RELLATOFF1 = IF(MAGS2_1, RELDISTBUMP1*SIN(BRCS2_1), 0);
EQ_OUT OBJRADCURVOFFSET1_MAX = IF(RELLATOFF1, ABS(RELLATOFF1 -YPDTARG3_4), 0);
EQ_OUT OBJRADCURVOFFSET1_MID = IF(RELLATOFF1, ABS(RELLATOFF1 -YPDTARG2_4), 0);
EQ_OUT OBJRADCURVOFFSET1 = IF(RELLATOFF1, MIN(OBJRADCURVOFFSET1_MAX, OBJRADCURVOFFSET1_MID), 0);
EQ_OUT RELLATOFF2 = IF(MAGS2_2, RELDISTBUMP2*SIN(BRCS2_2), 0);
EQ_OUT OBJRADCURVOFFSET2_MAX = IF(RELLATOFF2, ABS(RELLATOFF2 -YPDTARG3_4), 0);
EQ_OUT OBJRADCURVOFFSET2_MID = IF(RELLATOFF2, ABS(RELLATOFF2 -YPDTARG2_4), 0);
EQ_OUT OBJRADCURVOFFSET2 = IF(RELLATOFF2, MIN(OBJRADCURVOFFSET2_MAX, OBJRADCURVOFFSET2_MID), 0);
EQ_OUT RELLATOFF3 = IF(MAGS2_3, RELDISTBUMP3*SIN(BRCS2_3), 0);
EQ_OUT OBJRADCURVOFFSET3_MAX = IF(RELLATOFF3, ABS(RELLATOFF3 -YPDTARG3_4), 0);
EQ_OUT OBJRADCURVOFFSET3_MID = IF(RELLATOFF3, ABS(RELLATOFF3 -YPDTARG2_4), 0);
EQ_OUT OBJRADCURVOFFSET3 = IF(RELLATOFF3, MIN(OBJRADCURVOFFSET3_MAX, OBJRADCURVOFFSET3_MID), 0);
EQ_OUT VEHOBJINLANE1 = IF(((OBJRADCURVOFFSET1 < OBJ_LAT_OFFSET_THRESH) & (OBJRADCURVOFFSET1 > 0)) | ((OBJRADCURVOFFSET1 < OBJ_LAT_OFFSET_THRESH2) & (ABS(OBJ1LATSPEED) > OBJ_LAT_SPEED_THRESH)), 1, 0);
EQ_OUT VEHOBJINLANE2 = IF((OBJRADCURVOFFSET2 < OBJ_LAT_OFFSET_THRESH) & (OBJRADCURVOFFSET2 > 0), 1, 0);
EQ_OUT VEHOBJINLANE3 = IF((OBJRADCURVOFFSET3 < OBJ_LAT_OFFSET_THRESH) & (OBJRADCURVOFFSET3 > 0), 1, 0);
EQ_OUT VEHOBJINLANE = IF((VEHOBJINLANE1 | VEHOBJINLANE2) | VEHOBJINLANE3, 1, 0);
EQ_OUT XSENSLOCATE = X_SENSOR(2) + XO;
EQ_OUT YSENSLOCATE = Y_SENSOR(2) + YO;
EQ_OUT XSENSOUTGLOB1 = MINRELDISTBUMP*COS(YAW + BRCS2_1);
EQ_OUT YSENSOUTGLOB1 = MINRELDISTBUMP*SIN(YAW + BRCS2_1);
EQ_OUT XOBJLOCATGLOB1 = XSENSLOCATE + XSENSOUTGLOB1;
EQ_OUT YOBJLOCATGLOB1 = YSENSLOCATE + YSENSOUTGLOB1;
EQ_OUT X_OBJ_37 = XOBJLOCATGLOB1;
EQ_OUT Y_OBJ_37 = YOBJLOCATGLOB1;
EQ_OUT SPEEDLIMITSET = SPEED_LIMIT;
EQ_OUT SPEEDMPS = VXZ_FWD;
EQ_OUT PBK_CON_MAX_SC = IF(ACC_ON & (VXZ_FWD > MIN_THRESH), ACC_ON_BRK_PRESS, ACC_OFF_BRK_PRESS);
EQ_OUT MINRELSPEEDCHECK = IF((ABS(SPDS2_1) > 0) & (ABS(SPDS2_2) > 0), MIN(SPDS2_1, SPDS2_2), SPDS2_1);
EQ_OUT MINRELSPEED = IF(ABS(MINRELSPEEDCHECK) < ACC_MAX_REL_SPD, MINRELSPEEDCHECK, 0);
EQ_OUT MINDISTEXCEEDED = IF((DISS2_1 > 0) & (MINRELDISTBUMP < MIN_SAFE_DIST), 1, 0);
EQ_OUT LEADVEHSPEED = VXZ_FWD + MINRELSPEED;
EQ_OUT ACCDESIREDDIST = TIME_GAP*LEADVEHSPEED + MIN_SAFE_DIST;
EQ_OUT SENS2_TTC = IF(((MAGS2_1 > 0) & (ABS(MINRELSPEED) > 0)) & (ABS(MINRELSPEED) < ACC_MAX_REL_SPD), -MINRELDISTBUMP/MINRELSPEED, 0);
EQ_OUT ACC_TTC = IF(ABS(SENS2_TTC) < 130, SENS2_TTC, 0);
EQ_OUT DESIREDVSACTUALDISTGAIN = IF(MAGS2_1 > 0, MIN(1, MINRELDISTBUMP/ACCDESIREDDIST), 1);
EQ_OUT TUNDERBRK = IF(MINRELDISTBUMP > 0, ABS(VXZ_FWD/PEAK_ACC_BK_ACCEL) + EST_BRK_DELAY, 0);
EQ_OUT ESTSTOPDIST = VXZ_FWD*TUNDERBRK + 0.5*PEAK_ACC_BK_ACCEL*TUNDERBRK^2 + MIN_SAFE_DIST;
EQ_OUT STOPDISTFACTOR = IF(MINRELDISTBUMP > 0, MINRELDISTBUMP/ESTSTOPDIST, 0);
EQ_OUT DESIREDSPEED = IF((((MAGS2_1 > 0) & (ABS(MINRELSPEED) < ACC_MAX_REL_SPD)) & (LEADVEHSPEED > MIN_THRESH)) & (MINDISTEXCEEDED > 0), LEADVEHSPEED, SPEEDLIMITSET);
EQ_OUT DESIREDSPDGAIN = IF(MAGS2_1 > 0, DESIREDSPEED/SPEED_LIMIT, 1);
EQ_OUT DESIREDSPDGAINADJ = IF((STOPDISTFACTOR <= 2) & (STOPDISTFACTOR > 0), DESIREDSPDGAIN*STOPDISTFACTOR, DESIREDSPDGAIN);
EQ_OUT MINRELCRITERIAGAIN = MIN(DESIREDVSACTUALDISTGAIN, DESIREDSPDGAINADJ);
EQ_OUT LEADVEHSLOWSTOPFLAG = IF((VXZ_FWD < LEADVEHSPEED) | ((LEADVEHSPEED < MIN_THRESH) & (LEADVEHSPEED >= -MIN_THRESH)), 1, 0);
EQ_OUT STOPDISTGAINON = IF((((ACC_TTC > 0) & (STOPDISTFACTOR > 0)) & LEADVEHSLOWSTOPFLAG) & (STOPDISTFACTOR < STAT_VEH_ACC_THRESH), 1, 0);
EQ_OUT ACCSPDSTOPGAIN = IF(((LEADVEHSPEED < REL_SPEED_DIFF_THRESH) & (MINDISTEXCEEDED > 0)) | STOPDISTGAINON, MIN_ACC_GAIN, 1);
EQ_OUT MINACC_GAIN = IF(MINDISTEXCEEDED, 0, MIN(MINRELCRITERIAGAIN, ACCSPDSTOPGAIN));
EQ_OUT SPEED_TARGET_GAIN(1) = IF(ACC_ON & VEHOBJINLANE, MINACC_GAIN, 1);
EQ_OUT SPEEDTARGETGAINOUT = SPEED_TARGET_GAIN(1);
EQ_OUT LB2_OPCT = IF(TIME_GAP > 1, 1, 0);
EQ_OUT LB3_OPCT = IF(TIME_GAP >= 2, 1, 0);
EQ_OUT LB4_OPCT = IF(TIME_GAP >= 3, 1, 0);
EQ_OUT STEERDISTURBANCE = STEER_RATIO*LX_AXLE(2)*CURVPD_3;
EQ_OUT THRESHDIST = LANE_WIDTH*LDW_THRESH;
EQ_OUT WARN_L = YOFFSETPD_1 < THRESHDIST;
EQ_OUT WARN_R = YOFFSETPD_2 > -THRESHDIST;
EQ_OUT FIXSTEER = IF(WARN_L | WARN_R, 1, 0);
EQ_OUT V_OBJ_38 = VX_GVT;
EQ_OUT VUTSTART = VUT_START;
EQ_OUT CONTACT = MAGS2_1 & (MINRELDISTBUMP < 0.2);
EQ_OUT CURRENTRUNSCORE = SCORE_NEW;
EQ_OUT TOTALSCORE = SCORE_OLD;
EQ_OUT EGOSPEEDREDUCTION = SPEED_REDUCTION;
EQ_OUT VIMPACTOUT = V_IMPACT;
EQ_OUT AX_M_PER_SEC = AX;

!------------------------------------------------------------------------------------
! DIFFERENTIAL EQUATIONS FOR NEW STATE VARIABLES (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_DIFFERENTIAL INTYOFFSETPD = YOFFSETPD_3;

!------------------------------------------------------------------------------------
! EVENTS
!------------------------------------------------------------------------------------
! Each event is defined with a formula and an optional pathname for a parsfile to
! read if the specified formula is not zero. If no pathname is specified and the
! specified formula is not zero, then the run stops.
SET_EVENT_ID 0
DEFINE_EVENT CRASHED <= 0; Events\Events_80f1ba63-70a1-4fc3-ac8d-0590e24a3107.par ! ID 0

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_AERO_ROAD_ID_1 1001 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 106.1415591 ; m ! Road path station for tracked aero road point
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission {TC_Lock}
SV_AVX  0.06019801884 ; deg/s ! ODE: Body-X roll rate of sprung-mass {AVx}
SV_AVY 0.005871907633 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass {AVy}
SV_AVY_L1 8.427205604 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 8.427205604 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 8.602249306 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 8.602249306 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_R1 8.447992945 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 8.447992945 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 8.607143294 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 8.607143294 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVZ   0.0140000786 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass {AVz}
SV_AV_CL  617.9599392 ; rpm ! Clutch relative spin, previous time step
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG 739.0919012 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D2 8.602249306 ; rpm ! ODE: Diff2 Left (first) output shaft speed
                             ! {AV_DS_L2}
SV_AV_SHAFT_R_D2 8.607143294 ; rpm ! ODE: Diff2 Right (second) output shaft speed
                             ! {AV_DS_R2}
SV_AV_SW            0 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC   121.131962 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC}
SV_AV_TR_OUT 33.64776721 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BETA  0.2100831742 ; deg ! Sideslip (ISO)
SV_BETA_RD 0.2100831742 ; deg ! Sideslip using road axes
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state, 2nd drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff
SV_CL_ACCEL_START   0 ; - ! Boolean: low-speed accel mode started prev. time step
SV_CL_AUTO_ACCEL    0 ; - ! Boolean: clutch is re-engaging to accelerate from stop
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: clutch is disengaging to stop
SV_CL_AUTO_INIT     0 ; - ! Initiate closed-loop clutch, set in previous time step:
                      ! -1 -> accel, 0 -> no change, or 1 -> brake
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: gear shift with clutch is in progress
SV_CL_BRAKE_STOP    1 ; - ! Boolean: low-speed brake mode started prev. time step
SV_CL_CON           0 ; - ! Transmission clutch control {ClutchTr}
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff
SV_CL_DIFF_SPIN_2 -0.004893988411 ; rpm ! Clutch rel. spin, 2nd drive axle diff,
                                  ! prev. time step
SV_CL_LOCKED        0 ; - ! Clutch lockup state {Cl_Stat}
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch, prev. time step
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch, prev. time step
SV_CMP_S_L1 46.49321995 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 -57.58902055 ; mm ! Compression of ride spring L2
SV_CMP_S_R1 46.70110598 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 -57.06764639 ; mm ! Compression of ride spring R2
SV_CONTACT_ID_L1I 1001 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O 1001 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I 1001 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O 1001 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_R1I 1001 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O 1001 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I 1001 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O 1001 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_STA_L1I 107.7182753 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 7.500279011 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 104.6242706 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 4.399717199 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_R1I 107.7226806 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 7.500288027 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 104.6306506 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 4.399726214 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio
SV_DZDX_GND         0 ; - ! dZ/dX of ground at vehicle aero ref. pt (saved)
SV_DZDX_L1I         0 ; - ! Ground X slope under tire L1i (saved)
SV_DZDX_L1O         0 ; - ! Ground X slope under tire L1o (saved)
SV_DZDX_L2I         0 ; - ! Ground X slope under tire L2i (saved)
SV_DZDX_L2O         0 ; - ! Ground X slope under tire L2o (saved)
SV_DZDX_R1I         0 ; - ! Ground X slope under tire R1i (saved)
SV_DZDX_R1O         0 ; - ! Ground X slope under tire R1o (saved)
SV_DZDX_R2I         0 ; - ! Ground X slope under tire R2i (saved)
SV_DZDX_R2O         0 ; - ! Ground X slope under tire R2o (saved)
SV_DZDY_GND         0 ; - ! dZ/dY of ground at vehicle aero ref. pt (saved)
SV_DZDY_L1I         0 ; - ! Ground Y slope under tire L1i  (saved)
SV_DZDY_L1O         0 ; - ! Ground Y slope under tire L1o  (saved)
SV_DZDY_L2I         0 ; - ! Ground Y slope under tire L2i  (saved)
SV_DZDY_L2O         0 ; - ! Ground Y slope under tire L2o  (saved)
SV_DZDY_R1I         0 ; - ! Ground Y slope under tire R1i  (saved)
SV_DZDY_R1O         0 ; - ! Ground Y slope under tire R1o  (saved)
SV_DZDY_R2I         0 ; - ! Ground Y slope under tire R2i  (saved)
SV_DZDY_R2O         0 ; - ! Ground Y slope under tire R2o  (saved)
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control, prev. time step
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  9212.654605 ; N ! Force from ride spring L1
SV_FS_L2   4547.90205 ; N ! Force from ride spring L2
SV_FS_R1  9254.074414 ; N ! Force from ride spring R1
SV_FS_R2   4585.21757 ; N ! Force from ride spring R2
SV_FUEL 0.03667224014 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 -653.3651733 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 918.7164101 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_R1 -648.0002287 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 920.2746797 ; N ! Tire force [sx] component, wheel R2
SV_FY_SM_L1 142.9406208 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 -49.21062434 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_R1 -114.6131738 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 100.7115508 ; N ! Tire force [sy] component, wheel R2
SV_FZ_SM_L1 6675.169283 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 5075.046383 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_R1 6716.250452 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 5147.607966 ; N ! Tire force force [sz] component, wheel R2
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_GEAR             1 ; - ! Automatic transmission gear {Gear_CL}
SV_GEAR_DELAY       1 ; - ! Delayed transmission gear position {Gear_Del}
SV_GEAR_MEM         2 ; - ! Gear saved in memory, used for transition
SV_GEAR_STAT        1 ; - ! Transmission gear status {GearStat}
SV_IVERR -0.1939427997 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_I_GEAR_SHIFT  0.15 ; kg-m2 ! Transmission gear inertia modulated by shift
SV_I_GEAR_SHIFT_START 0.1506 ; kg-m2 ! Gear spin inertia when automatic shift
                             ! started
SV_JNCR_L1 0.001168500389 ; m/s ! ODE: Jounce rate at wheel L1
SV_JNCR_L2 -0.0005869422643 ; m/s ! ODE: Jounce rate at wheel L2
SV_JNCR_R1 0.003186791554 ; m/s ! ODE: Jounce rate at wheel R1
SV_JNCR_R2 0.0001929896315 ; m/s ! ODE: Jounce rate at wheel R2
SV_JNC_L1 -0.002545483694 ; m ! ODE: Jounce movement at wheel L1
SV_JNC_L2 -0.003630584264 ; m ! ODE: Jounce movement at wheel L2
SV_JNC_R1 -0.002205244693 ; m ! ODE: Jounce movement at wheel R1
SV_JNC_R2 -0.003109210101 ; m ! ODE: Jounce movement at wheel R2
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Clutch locked while in neutral in previous time
                           ! step
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MY_BRK_L1 290.4279208 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 -315.5377666 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_R1 288.7143334 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -315.6652412 ; N-m ! Spin moment, wheel R2
SV_MZ_WHEEL_L1 -7.689618127 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 2.756150437 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_R1 5.549658827 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 -5.267734813 ; N-m ! Tire Mz, wheel R2
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff
SV_M_CLUTCH_DEL     0 ; N-m ! ODE: Time delayed clutch torque capacity
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL     -0.1 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -35.80928574 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_R1 31.86778649 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_TC   94.40145268 ; N-m ! Transmission input shaft torque {M_TC}
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1 1.435857055 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2 1.435857053 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_R1 1.435857054 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2 1.435857053 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PITCH -1.214212708 ; deg ! ODE: Pitch of sprung mass {Pitch}
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio
SV_ROLL 0.02500102476 ; deg ! ODE: Roll (Euler) of sprung mass {Roll_E}
SV_ROT_L1 232.9993739 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 229.3145994 ; rev ! ODE: Rotation of wheel L2
SV_ROT_LK_L1 232.9206713 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2 229.2330912 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_R1 233.4530603 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2 229.9836092 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_R1  233.532281 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 230.0654941 ; rev ! ODE: Rotation of wheel R2
SV_ROT_SHAFT_2 900.3849831 ; rev ! ODE: 2nd drive axle diff input shaft rotation
                           ! {Rot_D3r}
SV_ROT_SHAFT_L_D2 229.3145994 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D2 230.0654941 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_TC 798.2056241 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC}
SV_ROT_TR_OUT 900.4326323 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_SHIFT   3.6 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 2.18064 ; - ! Gear ratio when automatic shift started
SV_R_GEAR_TOTAL_SC 14.112 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.012052586 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -1.000000659 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.011814569 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -1.000000478 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.3798300275 ; m ! Deflected radius for tire L1i (saved)
SV_R_L1O 0.3798300275 ; m ! Deflected radius for tire L1o (saved)
SV_R_L2I  0.383163079 ; m ! Deflected radius for tire L2i (saved)
SV_R_L2O  0.383163079 ; m ! Deflected radius for tire L2o (saved)
SV_R_R1I 0.3797426376 ; m ! Deflected radius for tire R1i (saved)
SV_R_R1O 0.3797426376 ; m ! Deflected radius for tire R1o (saved)
SV_R_R2I 0.3830085179 ; m ! Deflected radius for tire R2i (saved)
SV_R_R2O 0.3830085179 ; m ! Deflected radius for tire R2o (saved)
SV_SHIFT_DELAY      0 ; - ! Boolean: shifting delay in T.C. is active, prev. time
                      ! step
SV_SLIP_LAT_L1I -0.001756740866 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I 0.0008180948781 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O     0 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_R1I 0.001295239736 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I -0.001544312514 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O     0 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LONG_L1I -0.005508841776 ; - ! ODE: Lagged long. slip, tire L1i {KappL_L1i}
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o {KappL_L1o}
SV_SLIP_LONG_L2I 0.007261338593 ; - ! ODE: Lagged long. slip, tire L2i {KappL_L2i}
SV_SLIP_LONG_L2O    0 ; - ! ODE: Lagged long. slip, tire L2o {KappL_L2o}
SV_SLIP_LONG_R1I -0.005460731869 ; - ! ODE: Lagged long. slip, tire R1i {KappL_R1i}
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o {KappL_R1o}
SV_SLIP_LONG_R2I 0.007165593663 ; - ! ODE: Lagged long. slip, tire R2i {KappL_R2i}
SV_SLIP_LONG_R2O    0 ; - ! ODE: Lagged long. slip, tire R2o {KappL_R2o}
SV_SO_DIST 579.712903 ; m ! ODE: Distance  used for tire "wandering profiles"
                      ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 107.6880355 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 107.6880355 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM 0.6437456364 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD 0.6437456364 ; deg ! Road-wheel steer from driver model (prev. time
                           ! step)
SV_STR_IN_DGR_A1    0 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_GR_A1 0.277043409 ; - ! ODE: Steering gear input position, axle 1
                            ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_KP_L1 0.6370457823 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD 0.6370457823 ; deg ! Kingpin steer angle, wheel L1 (previous time
                              ! step)
SV_STR_KP_L2 -0.007225555351 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L2_OLD -0.08352153242 ; deg ! Kingpin steer angle, wheel L2 (previous time
                                ! step)
SV_STR_KP_R1 0.6658102721 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD 0.6658102721 ; deg ! Kingpin steer angle, wheel R1 (previous time
                              ! step)
SV_STR_KP_R2 0.003051300076 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R2_OLD 0.07171270281 ; deg ! Kingpin steer angle, wheel R2 (previous time
                               ! step)
SV_STR_OUT_GR_A1 0.01108173636 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_SWA    15.87341808 ; deg ! ODE: Steering wheel angle
SV_SWA_DM 16.10261524 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD 15.87341808 ; deg ! Steering wheel angle (previous time step)
SV_S_OBJ_38       115 ; m ! ODE: Station of object 38 {S_Obj_38}
SV_S_RDO_1          0 ; m ! Station of object 1 on road path {S_RdO_1}
SV_S_RDO_10         0 ; m ! Station of object 10 on road path {S_RdO_10}
SV_S_RDO_11         0 ; m ! Station of object 11 on road path {S_RdO_11}
SV_S_RDO_12         0 ; m ! Station of object 12 on road path {S_RdO_12}
SV_S_RDO_13         0 ; m ! Station of object 13 on road path {S_RdO_13}
SV_S_RDO_14         0 ; m ! Station of object 14 on road path {S_RdO_14}
SV_S_RDO_15         0 ; m ! Station of object 15 on road path {S_RdO_15}
SV_S_RDO_16         0 ; m ! Station of object 16 on road path {S_RdO_16}
SV_S_RDO_17         0 ; m ! Station of object 17 on road path {S_RdO_17}
SV_S_RDO_18         0 ; m ! Station of object 18 on road path {S_RdO_18}
SV_S_RDO_19         0 ; m ! Station of object 19 on road path {S_RdO_19}
SV_S_RDO_2          0 ; m ! Station of object 2 on road path {S_RdO_2}
SV_S_RDO_20         0 ; m ! Station of object 20 on road path {S_RdO_20}
SV_S_RDO_21         0 ; m ! Station of object 21 on road path {S_RdO_21}
SV_S_RDO_22         0 ; m ! Station of object 22 on road path {S_RdO_22}
SV_S_RDO_23         0 ; m ! Station of object 23 on road path {S_RdO_23}
SV_S_RDO_24         0 ; m ! Station of object 24 on road path {S_RdO_24}
SV_S_RDO_25         0 ; m ! Station of object 25 on road path {S_RdO_25}
SV_S_RDO_26         0 ; m ! Station of object 26 on road path {S_RdO_26}
SV_S_RDO_27         0 ; m ! Station of object 27 on road path {S_RdO_27}
SV_S_RDO_28         0 ; m ! Station of object 28 on road path {S_RdO_28}
SV_S_RDO_29         0 ; m ! Station of object 29 on road path {S_RdO_29}
SV_S_RDO_3          0 ; m ! Station of object 3 on road path {S_RdO_3}
SV_S_RDO_30         0 ; m ! Station of object 30 on road path {S_RdO_30}
SV_S_RDO_31         0 ; m ! Station of object 31 on road path {S_RdO_31}
SV_S_RDO_32         0 ; m ! Station of object 32 on road path {S_RdO_32}
SV_S_RDO_33         0 ; m ! Station of object 33 on road path {S_RdO_33}
SV_S_RDO_34         0 ; m ! Station of object 34 on road path {S_RdO_34}
SV_S_RDO_35         0 ; m ! Station of object 35 on road path {S_RdO_35}
SV_S_RDO_36         0 ; m ! Station of object 36 on road path {S_RdO_36}
SV_S_RDO_37         0 ; m ! Station of object 37 on road path {S_RdO_37}
SV_S_RDO_38       115 ; m ! Station of object 38 on road path {S_RdO_38}
SV_S_RDO_4          0 ; m ! Station of object 4 on road path {S_RdO_4}
SV_S_RDO_5          0 ; m ! Station of object 5 on road path {S_RdO_5}
SV_S_RDO_6          0 ; m ! Station of object 6 on road path {S_RdO_6}
SV_S_RDO_7          0 ; m ! Station of object 7 on road path {S_RdO_7}
SV_S_RDO_8          0 ; m ! Station of object 8 on road path {S_RdO_8}
SV_S_RDO_9          0 ; m ! Station of object 9 on road path {S_RdO_9}
SV_THROTTLE 0.000137492777 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          0 ; - ! Requested Throttle
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: auto throttle, gear shift, prev. time step
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time when ESC control status last changed
SV_T_SHIFT_START 33.324 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VERR_OLD -1.215718739 ; km/h ! Speed controller error at previous time step
SV_VXS    1.215242573 ; km/h ! ODE: Body-X speed of laden sprung-mass CG
SV_VYS 0.001185037497 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG
SV_VZS -0.009450734044 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG
SV_XO     107.7774616 ; m ! ODE: Global X coord. of sprung-mass origin {Xo}
SV_X_GND  106.2326815 ; m ! X coord, ground, vehicle aero ref. pt (saved)
SV_YAW      4.5444823 ; deg ! ODE: Yaw of sprung mass {Yaw}
SV_YO    0.5905229452 ; m ! ODE: Global Y coord. of sprung-mass origin {Yo}
SV_Y_GND 0.4677393075 ; m ! Y coord, ground, vehicle aero ref. pt (saved)
SV_ZO   0.02723979816 ; m ! ODE: Global Z coord. of sprung-mass origin {Zo}
SV_Z_CTC_L1I       -0 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O       -0 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I       -0 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O       -0 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_R1I       -0 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O       -0 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I       -0 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O       -0 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_GND            0 ; m ! Z coord, ground, vehicle aero ref. pt (saved)

! ODE state variables associated with EQ_DIFFERENTIAL statements
INTYOFFSETPD -0.02717980196  ; - ! ODE: (null)

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_STEER_SW VS_ADD 15.87341808 ; deg ! #0. Steering wheel angle


END
