PARSFILE
! TruckSim 2022.1
! Revision 180841, June 1, 2022
MODEL_LAYOUT S_SS__SS S_SS__SS S_SS__SS

DATASET_TITLE Platoon: Brake Test
CATEGORY Tractor Trailer Platoon, Single Solver
TITLE Platoon: Brake Test <Tractor Trailer Platoon, Single Solver>

! Echo: Results\Run_4bba4ab1-89b8-4f7b-8dc3-48a971ef01fe\Run_echo.par
! This run was made 14:49 on June 02, 2022.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           2 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   338 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      370 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_DEFAULT    1 ! [D] Identify values not read? 1 -> yes, show [D], 0 -> no
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    0 ! Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SKIP_TSTART     0 ! [D] Skip calculations at T = TSTART when running under
                      ! external software? 0 -> no, 1 -> skip [L]
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME   2.655050975 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             20 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       20 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              40 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    4 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG(1)  0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is', vehicle 1 [I]
OPT_INIT_SPEED(1)   0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is', vehicle 1 [I]
ROLL_MAX_STOP(1)   80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached, vehicle 1
VLOW_STOP(1)     -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable, vehicle 1

OPT_INIT_CONFIG(2)  0 ! Init. Zo, pitch, roll, and deflections, vehicle 2 [I]
OPT_INIT_SPEED(2)   0 ! Initialize speed variables, vehicle 2 [I]
ROLL_MAX_STOP(2)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 2
VLOW_STOP(2)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 2

OPT_INIT_CONFIG(3)  0 ! Init. Zo, pitch, roll, and deflections, vehicle 3 [I]
OPT_INIT_SPEED(3)   0 ! Initialize speed variables, vehicle 3 [I]
ROLL_MAX_STOP(3)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 3
VLOW_STOP(3)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 3

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATIONS
!------------------------------------------------------------------------------------
! N_VEHICLES        3 ! Number of vehicles (lead units) (read-only)
! VEHICLE_UNITS_MAP(1) 2 ! Number of units in vehicle 1 (read-only)
! VEHICLE_UNITS_MAP(2) 2 ! Number of units in vehicle 2 (read-only)
! VEHICLE_UNITS_MAP(3) 2 ! Number of units in vehicle 3 (read-only)
! VEHICLE_LEAD_UNIT(1) 1 ! Lead unit for vehicle 1 (read-only)
! VEHICLE_LEAD_UNIT(2) 3 ! Lead unit for vehicle 2 (read-only)
! VEHICLE_LEAD_UNIT(3) 5 ! Lead unit for vehicle 3 (read-only)
! VEHICLE_NUNITS    6 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES   15 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 3 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 2 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 3 ! Number of axles on unit 3 (read-only)
! VEHICLE_AXLE_MAP(4) 2 ! Number of axles on unit 4 (read-only)
! VEHICLE_AXLE_MAP(5) 3 ! Number of axles on unit 5 (read-only)
! VEHICLE_AXLE_MAP(6) 2 ! Number of axles on unit 6 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! Unit 1 is the lead unit for vehicle 1
! H_CG_TL(1) 935.3088486 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1675.446994 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -0.003809573937 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        7103 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 3752.871034 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 61532.60624 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 60054.96091 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! Unit 2 is trailer #1 for vehicle 1
! H_CG_TL(2) 1561.520152 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 7312.492186 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(2) -0.002966559422 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        9598 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 22030.34069 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 215521.8422 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 213852.3015 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! Unit 3 is the lead unit for vehicle 2
! H_CG_TL(3) 935.4620885 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 1675.446994 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(3) 0.009236380436 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)        7103 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 3751.231268 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 61530.95383 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 60054.94778 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

! Unit 4 is trailer #1 for vehicle 2
! H_CG_TL(4) 1561.549077 ; mm ! CALC -- Height of TL CG, unit 4
! LX_CG_TL(4) 7312.492186 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(4) 0.003552577485 ; mm ! CALC -- Y coordinate of TL CG, unit 4
! M_TL(4)        9598 ; kg ! CALC -- TL mass, unit 4
! IXX_TL(4) 22029.65754 ; kg-m2 ! CALC -- TL roll inertia moment, unit 4
! IYY_TL(4) 215521.159 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 4
! IZZ_TL(4) 213852.3015 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 4

! Unit 5 is the lead unit for vehicle 3
! H_CG_TL(5) 935.4649518 ; mm ! CALC -- Height of TL CG, unit 5
! LX_CG_TL(5) 1675.446994 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(5) 0.008699138261 ; mm ! CALC -- Y coordinate of TL CG, unit 5
! M_TL(5)        7103 ; kg ! CALC -- TL mass, unit 5
! IXX_TL(5) 3751.191193 ; kg-m2 ! CALC -- TL roll inertia moment, unit 5
! IYY_TL(5) 61530.91088 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 5
! IZZ_TL(5) 60054.94488 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 5

! Unit 6 is trailer #1 for vehicle 3
! H_CG_TL(6) 1561.517412 ; mm ! CALC -- Height of TL CG, unit 6
! LX_CG_TL(6) 7312.492186 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(6) 0.003870157661 ; mm ! CALC -- Y coordinate of TL CG, unit 6
! M_TL(6)        9598 ; kg ! CALC -- TL mass, unit 6
! IXX_TL(6) 22030.40589 ; kg-m2 ! CALC -- TL roll inertia moment, unit 6
! IYY_TL(6) 215521.9074 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 6
! IZZ_TL(6) 213852.3015 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 6

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

! Unit 1 is the lead unit for vehicle 1
H_CG_SU(1)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)       750 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4770 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 2 is trailer #1 for vehicle 1
H_H_FRONT(2)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(2)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      8250 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          4000 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)      6728.8 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)    115648.5 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)    121528.6 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(2) 1769.067669 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 2
! LX_CG_SL(2) 6838.546366 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(2)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 2
! M_SL(2)        7980 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 2
! IXX_SL(2) 19449.78938 ; kg-m2 ! CALC -- Roll inertia for SL, unit 2
! IYY_SL(2) 198992.7745 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 2
! IZZ_SL(2) 199766.1851 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 2
! IXY_SL(2)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 2
! IXZ_SL(2) -8705.846015 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 2
! IYZ_SL(2)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 2

HT_SM(2)       1248.5 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)       10500 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(2)        2440 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)        860 ; mm ! Length from front to control pt (maybe for target)

! Unit 3 is the lead unit for vehicle 2
H_CG_SU(3)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)       750 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
IXZ_SU(3)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(3)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(3)        4770 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(3)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(3)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 4 is trailer #1 for vehicle 2
H_H_FRONT(4)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(4)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 4 [I]
LX_CG_SU(4)      8250 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(4)          0 ; mm ! Y coordinate of SU CG, unit 4 [I]
M_SU(4)          4000 ; kg ! Mass of unladen sprung mass (SU), unit 4 [I]
IXX_SU(4)      6728.8 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 4 [I]
IYY_SU(4)    115648.5 ; kg-m2 ! Pitch inertia for SU, unit 4 [I]
IZZ_SU(4)    121528.6 ; kg-m2 ! Yaw inertia for SU, unit 4 [I]
IXY_SU(4)           0 ; kg-m2 ! XY product of inertia for SU, unit 4 [I]
IXZ_SU(4)           0 ; kg-m2 ! XZ product of inertia for SU, unit 4 [I]
IYZ_SU(4)           0 ; kg-m2 ! YZ product of inertia for SU, unit 4 [I]

! N_PAYLOADS(4)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(4) 1769.067669 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 4
! LX_CG_SL(4) 6838.546366 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(4)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 4
! M_SL(4)        7980 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 4
! IXX_SL(4) 19449.78938 ; kg-m2 ! CALC -- Roll inertia for SL, unit 4
! IYY_SL(4) 198992.7745 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 4
! IZZ_SL(4) 199766.1851 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 4
! IXY_SL(4)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 4
! IXZ_SL(4) -8705.846015 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 4
! IYZ_SL(4)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 4

HT_SM(4)       1248.5 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(4)       10500 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(4)        2440 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(4)        860 ; mm ! Length from front to control pt (maybe for target)

! Unit 5 is the lead unit for vehicle 3
H_CG_SU(5)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 5 [I]
LX_CG_SU(5)       750 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(5)          0 ; mm ! Y coordinate of SU CG, unit 5 [I]
M_SU(5)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 5 [I]
IXX_SU(5)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 5 [I]
IYY_SU(5)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 5 [I]
IZZ_SU(5)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 5 [I]
IXY_SU(5)           0 ; kg-m2 ! XY product of inertia for SU, unit 5 [I]
IXZ_SU(5)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 5 [I]
IYZ_SU(5)           0 ; kg-m2 ! YZ product of inertia for SU, unit 5 [I]

! N_PAYLOADS(5)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(5)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(5)        4770 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(5)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(5)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 6 is trailer #1 for vehicle 3
H_H_FRONT(6)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(6)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 6 [I]
LX_CG_SU(6)      8250 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(6)          0 ; mm ! Y coordinate of SU CG, unit 6 [I]
M_SU(6)          4000 ; kg ! Mass of unladen sprung mass (SU), unit 6 [I]
IXX_SU(6)      6728.8 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 6 [I]
IYY_SU(6)    115648.5 ; kg-m2 ! Pitch inertia for SU, unit 6 [I]
IZZ_SU(6)    121528.6 ; kg-m2 ! Yaw inertia for SU, unit 6 [I]
IXY_SU(6)           0 ; kg-m2 ! XY product of inertia for SU, unit 6 [I]
IXZ_SU(6)           0 ; kg-m2 ! XZ product of inertia for SU, unit 6 [I]
IYZ_SU(6)           0 ; kg-m2 ! YZ product of inertia for SU, unit 6 [I]

! N_PAYLOADS(6)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(6) 1769.067669 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 6
! LX_CG_SL(6) 6838.546366 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(6)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 6
! M_SL(6)        7980 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 6
! IXX_SL(6) 19449.78938 ; kg-m2 ! CALC -- Roll inertia for SL, unit 6
! IYY_SL(6) 198992.7745 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 6
! IZZ_SL(6) 199766.1851 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 6
! IXY_SL(6)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 6
! IXZ_SL(6) -8705.846015 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 6
! IYZ_SL(6)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 6

HT_SM(6)       1248.5 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(6)       10500 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(6)        2440 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(6)        860 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             3 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     3 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; 40-foot Dry Cargo Container (Empty)
OPT_PL_BODY_ID(1)   2 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(1)      5420 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)       2542 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)          3980 ; kg ! Mass of payload [I]
IXX_PL(1)     7977.38 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)    62623.01 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)    62259.93 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(2)     2 ; 40-foot Dry Cargo Container (Empty)
OPT_PL_BODY_ID(2)   4 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(2)      5420 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(2)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(2)       2542 ; mm ! Z coordinate of payload mass center [I]
M_PL(2)          3980 ; kg ! Mass of payload [I]
IXX_PL(2)     7977.38 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(2)    62623.01 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(2)    62259.93 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(2)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(2)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(2)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(3)     3 ; 40-foot Dry Cargo Container (Empty)
OPT_PL_BODY_ID(3)   6 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(3)      5420 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(3)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(3)       2542 ; mm ! Z coordinate of payload mass center [I]
M_PL(3)          3980 ; kg ! Mass of payload [I]
IXX_PL(3)     7977.38 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(3)    62623.01 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(3)    62259.93 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(3)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(3)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(3)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.

OPT_HITCH_TYPE(1)   1 ! Type of hitch: 1 -> generic (5th wheel or ball/pintle), 2 ->
                      ! simple ball or pintle, 3 -> hinged tow bar, 4 ->
                      ! Articulation system [I]
! FZH_L(1) 22799.59745 ; N ! CALC -- Static load, laden vehicle, hitch 1
! FZH_UL(1) 5690.905699 ; N ! CALC -- Static load, unladen vehicle, hitch 1
HITCH_DMP_X(1)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 1
HITCH_DMP_Y(1)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 1
HITCH_DMP_Z(1)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 1
HITCH_FRIC_X(1)     0 ; N-m ! [D] Roll friction, hitch 1
HITCH_FRIC_Y(1)     0 ; N-m ! [D] Pitch friction, hitch 1
HITCH_FRIC_Z(1)     0 ; N-m ! [D] Articulation friction, hitch 1
HITCH_FREQ(1)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 1 [I]
HITCH_ZETA(1)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 1 [I]
H_H(1)           1070 ; mm ! Hitch point height (Z coord.), sprung mass [I]
LX_H(1)          4135 ; mm ! X dist. hitch is behind sprung mass origin [I]
Y_H(1)              0 ; mm ! Y coordinate, hitch point [I]

OPT_HITCH_TYPE(3)   1 ! Type of hitch: 1 -> generic (5th wheel or ball/pintle), 2 ->
                      ! simple ball or pintle, 3 -> hinged tow bar, 4 ->
                      ! Articulation system [I]
! FZH_L(3) 22799.59745 ; N ! CALC -- Static load, laden vehicle, hitch 3
! FZH_UL(3) 5690.905699 ; N ! CALC -- Static load, unladen vehicle, hitch 3
HITCH_DMP_X(3)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 3
HITCH_DMP_Y(3)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 3
HITCH_DMP_Z(3)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 3
HITCH_FRIC_X(3)     0 ; N-m ! [D] Roll friction, hitch 3
HITCH_FRIC_Y(3)     0 ; N-m ! [D] Pitch friction, hitch 3
HITCH_FRIC_Z(3)     0 ; N-m ! [D] Articulation friction, hitch 3
HITCH_FREQ(3)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 3 [I]
HITCH_ZETA(3)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 3 [I]
H_H(3)           1070 ; mm ! Hitch point height (Z coord.), sprung mass [I]
LX_H(3)          4135 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(3)              0 ; mm ! Y coordinate, hitch point [I]

OPT_HITCH_TYPE(5)   1 ! Type of hitch: 1 -> generic (5th wheel or ball/pintle), 2 ->
                      ! simple ball or pintle, 3 -> hinged tow bar, 4 ->
                      ! Articulation system [I]
! FZH_L(5) 22799.59745 ; N ! CALC -- Static load, laden vehicle, hitch 5
! FZH_UL(5) 5690.905699 ; N ! CALC -- Static load, unladen vehicle, hitch 5
HITCH_DMP_X(5)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 5
HITCH_DMP_Y(5)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 5
HITCH_DMP_Z(5)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 5
HITCH_FRIC_X(5)     0 ; N-m ! [D] Roll friction, hitch 5
HITCH_FRIC_Y(5)     0 ; N-m ! [D] Pitch friction, hitch 5
HITCH_FRIC_Z(5)     0 ; N-m ! [D] Articulation friction, hitch 5
HITCH_FREQ(5)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 5 [I]
HITCH_ZETA(5)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 5 [I]
H_H(5)           1070 ; mm ! Hitch point height (Z coord.), sprung mass [I]
LX_H(5)          4135 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(5)              0 ; mm ! Y coordinate, hitch point [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)       10 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    5000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        0 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)       0 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)       0 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)       10 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)    5000 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

AREA_AERO(4)        0 ; m2 ! Frontal cross-section area, unit 4
H_REF_AERO(4)       0 ; mm ! Height of aerodynamic reference point, unit 4
L_REF_AERO(4)       0 ; mm ! Aerodynamic reference length, unit 4
X_REF_AERO(4)       0 ; mm ! X coordinate of aerodynamic reference point, unit 4
Y_REF_AERO(4)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 4

AREA_AERO(5)       10 ; m2 ! Frontal cross-section area, unit 5
H_REF_AERO(5)       0 ; mm ! Height of aerodynamic reference point, unit 5
L_REF_AERO(5)    5000 ; mm ! Aerodynamic reference length, unit 5
X_REF_AERO(5)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 5
Y_REF_AERO(5)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 5

AREA_AERO(6)        0 ; m2 ! Frontal cross-section area, unit 6
H_REF_AERO(6)       0 ; mm ! Height of aerodynamic reference point, unit 6
L_REF_AERO(6)       0 ; mm ! Aerodynamic reference length, unit 6
X_REF_AERO(6)       0 ; mm ! X coordinate of aerodynamic reference point, unit 6
Y_REF_AERO(6)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 6

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
OPT_SUSP_Y_AXLE_ROLL(1,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
IA_YY(1,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       578 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.4982698962 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
X_CG_AXLE(1,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 1 [I]
Y_CG_AXLE(1,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
OPT_SUSP_Y_AXLE_ROLL(1,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
IA_YY(1,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     3500 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    603 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      1035 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
X_CG_AXLE(1,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 2 [I]
Y_CG_AXLE(1,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Solid-axle suspension for axle 3 on unit 1
OPT_JNC_DESIGN(1,3) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
OPT_SUSP_Y_AXLE_ROLL(1,3) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,3,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(1,3,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(1,3,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(1,3,2)        0 ; deg ! Static toe for wheel R3 [I]
H_CG_AXLE(1,3)    530 ; mm ! Z coordinate of axle 3 CG [I]
H_WC(1,3,1)       530 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(1,3,2)       530 ; mm ! Reference Z coordinate of wheel center R3 [I]
IA(1,3)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 3 [I]
IA_YY(1,3)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 3 [I]
! ISPIN(1,3,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(1,3,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(1,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(1,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(1,3,1)          20 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(1,3,2)          20 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(1,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(1,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(1,3,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(1,3,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(1,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(1,3)     4770 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_AXLE(1,3)    603 ; kg ! Unsteered mass for axle 3 [I]
M_US_STR(1,3,1)     0 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(1,3,2)     0 ; kg ! Steered mass for wheel R3 [I]
! M_US(1,3)      1035 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(1,3) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
X_CG_AXLE(1,3)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,3)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 3 [I]
Y_CG_AXLE(1,3)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(1,3)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
OPT_SUSP_Y_AXLE_ROLL(2,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(2,1)    530 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(2,1,1)       530 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,1,2)       530 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(2,1)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
IA_YY(2,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 4 [I]
! ISPIN(2,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(2,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(2,1,1)          20 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,1,2)          20 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,1)     8800 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(2,1)    445 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(2,1,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,1,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,1)       809 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,1) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
X_CG_AXLE(2,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(2,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 4 [I]
Y_CG_AXLE(2,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
OPT_SUSP_Y_AXLE_ROLL(2,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(2,2)    530 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(2,2,1)       530 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(2,2,2)       530 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(2,2)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
IA_YY(2,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 5 [I]
! ISPIN(2,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(2,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(2,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(2,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(2,2,1)          20 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(2,2,2)          20 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(2,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(2,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(2,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(2,2)    10500 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    445 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(2,2)       809 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(2,2) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
X_CG_AXLE(2,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(2,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 5 [I]
Y_CG_AXLE(2,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Solid-axle suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
OPT_SUSP_Y_AXLE_ROLL(3,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(3,1,1)     0 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(3,1,2)     0 ; deg ! Static camber for wheel R6 [I]
A_TOE(3,1,1)        0 ; deg ! Static toe for wheel L6 [I]
A_TOE(3,1,2)        0 ; deg ! Static toe for wheel R6 [I]
H_CG_AXLE(3,1)    510 ; mm ! Z coordinate of axle 6 CG [I]
H_WC(3,1,1)       510 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(3,1,2)       510 ; mm ! Reference Z coordinate of wheel center R6 [I]
IA(3,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 6 [I]
IA_YY(3,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 6 [I]
! ISPIN(3,1,1)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L6 [I]
! ISPIN(3,1,2)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R6 [I]
! ISPIN_XXZZ(3,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L6 [I]
! ISPIN_XXZZ(3,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R6 [I]
IW(3,1,1)          10 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(3,1,2)          10 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(3,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(3,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(3,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(3,1)        0 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_AXLE(3,1)    290 ; kg ! Unsteered mass for axle 6 [I]
M_US_STR(3,1,1)    36 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(3,1,2)    36 ; kg ! Steered mass for wheel R6 [I]
! M_US(3,1)       578 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(3,1) 0.4982698962 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
X_CG_AXLE(3,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(3,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 6 [I]
Y_CG_AXLE(3,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

! Solid-axle suspension for axle 2 on unit 3
OPT_JNC_DESIGN(3,2) 1 ! Specify JNC_DESIGN explicitly for axle 7? [I]
OPT_SUSP_Y_AXLE_ROLL(3,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(3,2,1)     0 ; deg ! Static camber for wheel L7 [I]
A_CAMBER(3,2,2)     0 ; deg ! Static camber for wheel R7 [I]
A_TOE(3,2,1)        0 ; deg ! Static toe for wheel L7 [I]
A_TOE(3,2,2)        0 ; deg ! Static toe for wheel R7 [I]
H_CG_AXLE(3,2)    530 ; mm ! Z coordinate of axle 7 CG [I]
H_WC(3,2,1)       530 ; mm ! Reference Z coordinate of wheel center L7 [I]
H_WC(3,2,2)       530 ; mm ! Reference Z coordinate of wheel center R7 [I]
IA(3,2)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 7 [I]
IA_YY(3,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 7 [I]
! ISPIN(3,2,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L7 [I]
! ISPIN(3,2,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R7 [I]
! ISPIN_XXZZ(3,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L7 [I]
! ISPIN_XXZZ(3,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R7 [I]
IW(3,2,1)          20 ; kg-m2 ! Spin inertia for wheel L7 [I]
IW(3,2,2)          20 ; kg-m2 ! Spin inertia for wheel R7 [I]
IW_XXZZ(3,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L7 [I]
IW_XXZZ(3,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R7 [I]
JNC_DESIGN(3,2,1)   0 ; mm ! Jounce when center of wheel L7 is at H_WC [I]
JNC_DESIGN(3,2,2)   0 ; mm ! Jounce when center of wheel R7 is at H_WC [I]
L_TRACK(3,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 7 [I]
LX_AXLE(3,2)     3500 ; mm ! X dist. axle 7 is behind the sprung-mass origin [I]
M_US_AXLE(3,2)    603 ; kg ! Unsteered mass for axle 7 [I]
M_US_STR(3,2,1)     0 ; kg ! Steered mass for wheel L7 [I]
M_US_STR(3,2,2)     0 ; kg ! Steered mass for wheel R7 [I]
! M_US(3,2)      1035 ; kg ! CALC -- Total unsprung mass for axle 7
! R_US_STR(3,2) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 7
X_CG_AXLE(3,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(3,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 7 [I]
Y_CG_AXLE(3,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 7 [I]
Y_CL_SUSP(3,2)      0 ; mm ! Y coord. for suspension centerline, axle 7 [I]

! Solid-axle suspension for axle 3 on unit 3
OPT_JNC_DESIGN(3,3) 1 ! Specify JNC_DESIGN explicitly for axle 8? [I]
OPT_SUSP_Y_AXLE_ROLL(3,3) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(3,3,1)     0 ; deg ! Static camber for wheel L8 [I]
A_CAMBER(3,3,2)     0 ; deg ! Static camber for wheel R8 [I]
A_TOE(3,3,1)        0 ; deg ! Static toe for wheel L8 [I]
A_TOE(3,3,2)        0 ; deg ! Static toe for wheel R8 [I]
H_CG_AXLE(3,3)    530 ; mm ! Z coordinate of axle 8 CG [I]
H_WC(3,3,1)       530 ; mm ! Reference Z coordinate of wheel center L8 [I]
H_WC(3,3,2)       530 ; mm ! Reference Z coordinate of wheel center R8 [I]
IA(3,3)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 8 [I]
IA_YY(3,3)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 8 [I]
! ISPIN(3,3,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L8 [I]
! ISPIN(3,3,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R8 [I]
! ISPIN_XXZZ(3,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L8 [I]
! ISPIN_XXZZ(3,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R8 [I]
IW(3,3,1)          20 ; kg-m2 ! Spin inertia for wheel L8 [I]
IW(3,3,2)          20 ; kg-m2 ! Spin inertia for wheel R8 [I]
IW_XXZZ(3,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L8 [I]
IW_XXZZ(3,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R8 [I]
JNC_DESIGN(3,3,1)   0 ; mm ! Jounce when center of wheel L8 is at H_WC [I]
JNC_DESIGN(3,3,2)   0 ; mm ! Jounce when center of wheel R8 is at H_WC [I]
L_TRACK(3,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 8 [I]
LX_AXLE(3,3)     4770 ; mm ! X dist. axle 8 is behind the sprung-mass origin [I]
M_US_AXLE(3,3)    603 ; kg ! Unsteered mass for axle 8 [I]
M_US_STR(3,3,1)     0 ; kg ! Steered mass for wheel L8 [I]
M_US_STR(3,3,2)     0 ; kg ! Steered mass for wheel R8 [I]
! M_US(3,3)      1035 ; kg ! CALC -- Total unsprung mass for axle 8
! R_US_STR(3,3) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 8
X_CG_AXLE(3,3)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(3,3)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 8 [I]
Y_CG_AXLE(3,3)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 8 [I]
Y_CL_SUSP(3,3)      0 ; mm ! Y coord. for suspension centerline, axle 8 [I]

! Solid-axle suspension for axle 1 on unit 4
OPT_JNC_DESIGN(4,1) 1 ! Specify JNC_DESIGN explicitly for axle 9? [I]
OPT_SUSP_Y_AXLE_ROLL(4,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(4,1,1)     0 ; deg ! Static camber for wheel L9 [I]
A_CAMBER(4,1,2)     0 ; deg ! Static camber for wheel R9 [I]
A_TOE(4,1,1)        0 ; deg ! Static toe for wheel L9 [I]
A_TOE(4,1,2)        0 ; deg ! Static toe for wheel R9 [I]
H_CG_AXLE(4,1)    530 ; mm ! Z coordinate of axle 9 CG [I]
H_WC(4,1,1)       530 ; mm ! Reference Z coordinate of wheel center L9 [I]
H_WC(4,1,2)       530 ; mm ! Reference Z coordinate of wheel center R9 [I]
IA(4,1)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 9 [I]
IA_YY(4,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 9 [I]
! ISPIN(4,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L9 [I]
! ISPIN(4,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R9 [I]
! ISPIN_XXZZ(4,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L9 [I]
! ISPIN_XXZZ(4,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R9 [I]
IW(4,1,1)          20 ; kg-m2 ! Spin inertia for wheel L9 [I]
IW(4,1,2)          20 ; kg-m2 ! Spin inertia for wheel R9 [I]
IW_XXZZ(4,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L9 [I]
IW_XXZZ(4,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R9 [I]
JNC_DESIGN(4,1,1)   0 ; mm ! Jounce when center of wheel L9 is at H_WC [I]
JNC_DESIGN(4,1,2)   0 ; mm ! Jounce when center of wheel R9 is at H_WC [I]
L_TRACK(4,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 9 [I]
LX_AXLE(4,1)     8800 ; mm ! X dist. axle 9 is behind the sprung-mass origin [I]
M_US_AXLE(4,1)    445 ; kg ! Unsteered mass for axle 9 [I]
M_US_STR(4,1,1)     0 ; kg ! Steered mass for wheel L9 [I]
M_US_STR(4,1,2)     0 ; kg ! Steered mass for wheel R9 [I]
! M_US(4,1)       809 ; kg ! CALC -- Total unsprung mass for axle 9
! R_US_STR(4,1) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 9
X_CG_AXLE(4,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(4,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 9 [I]
Y_CG_AXLE(4,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 9 [I]
Y_CL_SUSP(4,1)      0 ; mm ! Y coord. for suspension centerline, axle 9 [I]

! Solid-axle suspension for axle 2 on unit 4
OPT_JNC_DESIGN(4,2) 1 ! Specify JNC_DESIGN explicitly for axle 10? [I]
OPT_SUSP_Y_AXLE_ROLL(4,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(4,2,1)     0 ; deg ! Static camber for wheel L10 [I]
A_CAMBER(4,2,2)     0 ; deg ! Static camber for wheel R10 [I]
A_TOE(4,2,1)        0 ; deg ! Static toe for wheel L10 [I]
A_TOE(4,2,2)        0 ; deg ! Static toe for wheel R10 [I]
H_CG_AXLE(4,2)    530 ; mm ! Z coordinate of axle 10 CG [I]
H_WC(4,2,1)       530 ; mm ! Reference Z coordinate of wheel center L10 [I]
H_WC(4,2,2)       530 ; mm ! Reference Z coordinate of wheel center R10 [I]
IA(4,2)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 10 [I]
IA_YY(4,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 10 [I]
! ISPIN(4,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L10 [I]
! ISPIN(4,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R10 [I]
! ISPIN_XXZZ(4,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L10 [I]
! ISPIN_XXZZ(4,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R10 [I]
IW(4,2,1)          20 ; kg-m2 ! Spin inertia for wheel L10 [I]
IW(4,2,2)          20 ; kg-m2 ! Spin inertia for wheel R10 [I]
IW_XXZZ(4,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L10 [I]
IW_XXZZ(4,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R10 [I]
JNC_DESIGN(4,2,1)   0 ; mm ! Jounce when center of wheel L10 is at H_WC [I]
JNC_DESIGN(4,2,2)   0 ; mm ! Jounce when center of wheel R10 is at H_WC [I]
L_TRACK(4,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 10 [I]
LX_AXLE(4,2)    10500 ; mm ! X dist. axle 10 is behind the sprung-mass origin [I]
M_US_AXLE(4,2)    445 ; kg ! Unsteered mass for axle 10 [I]
M_US_STR(4,2,1)     0 ; kg ! Steered mass for wheel L10 [I]
M_US_STR(4,2,2)     0 ; kg ! Steered mass for wheel R10 [I]
! M_US(4,2)       809 ; kg ! CALC -- Total unsprung mass for axle 10
! R_US_STR(4,2) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 10
X_CG_AXLE(4,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(4,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 10 [I]
Y_CG_AXLE(4,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 10 [I]
Y_CL_SUSP(4,2)      0 ; mm ! Y coord. for suspension centerline, axle 10 [I]

! Solid-axle suspension for axle 1 on unit 5
OPT_JNC_DESIGN(5,1) 1 ! Specify JNC_DESIGN explicitly for axle 11? [I]
OPT_SUSP_Y_AXLE_ROLL(5,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(5,1,1)     0 ; deg ! Static camber for wheel L11 [I]
A_CAMBER(5,1,2)     0 ; deg ! Static camber for wheel R11 [I]
A_TOE(5,1,1)        0 ; deg ! Static toe for wheel L11 [I]
A_TOE(5,1,2)        0 ; deg ! Static toe for wheel R11 [I]
H_CG_AXLE(5,1)    510 ; mm ! Z coordinate of axle 11 CG [I]
H_WC(5,1,1)       510 ; mm ! Reference Z coordinate of wheel center L11 [I]
H_WC(5,1,2)       510 ; mm ! Reference Z coordinate of wheel center R11 [I]
IA(5,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 11 [I]
IA_YY(5,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 11 [I]
! ISPIN(5,1,1)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L11 [I]
! ISPIN(5,1,2)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R11 [I]
! ISPIN_XXZZ(5,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L11 [I]
! ISPIN_XXZZ(5,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R11 [I]
IW(5,1,1)          10 ; kg-m2 ! Spin inertia for wheel L11 [I]
IW(5,1,2)          10 ; kg-m2 ! Spin inertia for wheel R11 [I]
IW_XXZZ(5,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L11 [I]
IW_XXZZ(5,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R11 [I]
JNC_DESIGN(5,1,1)   0 ; mm ! Jounce when center of wheel L11 is at H_WC [I]
JNC_DESIGN(5,1,2)   0 ; mm ! Jounce when center of wheel R11 is at H_WC [I]
L_TRACK(5,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 11 [I]
LX_AXLE(5,1)        0 ; mm ! X dist. axle 11 is behind the sprung-mass origin [I]
M_US_AXLE(5,1)    290 ; kg ! Unsteered mass for axle 11 [I]
M_US_STR(5,1,1)    36 ; kg ! Steered mass for wheel L11 [I]
M_US_STR(5,1,2)    36 ; kg ! Steered mass for wheel R11 [I]
! M_US(5,1)       578 ; kg ! CALC -- Total unsprung mass for axle 11
! R_US_STR(5,1) 0.4982698962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 11
X_CG_AXLE(5,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(5,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 11 [I]
Y_CG_AXLE(5,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(5,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 11 [I]
Y_CL_SUSP(5,1)      0 ; mm ! Y coord. for suspension centerline, axle 11 [I]

! Solid-axle suspension for axle 2 on unit 5
OPT_JNC_DESIGN(5,2) 1 ! Specify JNC_DESIGN explicitly for axle 12? [I]
OPT_SUSP_Y_AXLE_ROLL(5,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(5,2,1)     0 ; deg ! Static camber for wheel L12 [I]
A_CAMBER(5,2,2)     0 ; deg ! Static camber for wheel R12 [I]
A_TOE(5,2,1)        0 ; deg ! Static toe for wheel L12 [I]
A_TOE(5,2,2)        0 ; deg ! Static toe for wheel R12 [I]
H_CG_AXLE(5,2)    530 ; mm ! Z coordinate of axle 12 CG [I]
H_WC(5,2,1)       530 ; mm ! Reference Z coordinate of wheel center L12 [I]
H_WC(5,2,2)       530 ; mm ! Reference Z coordinate of wheel center R12 [I]
IA(5,2)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 12 [I]
IA_YY(5,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 12 [I]
! ISPIN(5,2,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L12 [I]
! ISPIN(5,2,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R12 [I]
! ISPIN_XXZZ(5,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L12 [I]
! ISPIN_XXZZ(5,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R12 [I]
IW(5,2,1)          20 ; kg-m2 ! Spin inertia for wheel L12 [I]
IW(5,2,2)          20 ; kg-m2 ! Spin inertia for wheel R12 [I]
IW_XXZZ(5,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L12 [I]
IW_XXZZ(5,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R12 [I]
JNC_DESIGN(5,2,1)   0 ; mm ! Jounce when center of wheel L12 is at H_WC [I]
JNC_DESIGN(5,2,2)   0 ; mm ! Jounce when center of wheel R12 is at H_WC [I]
L_TRACK(5,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 12 [I]
LX_AXLE(5,2)     3500 ; mm ! X dist. axle 12 is behind the sprung-mass origin [I]
M_US_AXLE(5,2)    603 ; kg ! Unsteered mass for axle 12 [I]
M_US_STR(5,2,1)     0 ; kg ! Steered mass for wheel L12 [I]
M_US_STR(5,2,2)     0 ; kg ! Steered mass for wheel R12 [I]
! M_US(5,2)      1035 ; kg ! CALC -- Total unsprung mass for axle 12
! R_US_STR(5,2) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 12
X_CG_AXLE(5,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(5,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 12 [I]
Y_CG_AXLE(5,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(5,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 12 [I]
Y_CL_SUSP(5,2)      0 ; mm ! Y coord. for suspension centerline, axle 12 [I]

! Solid-axle suspension for axle 3 on unit 5
OPT_JNC_DESIGN(5,3) 1 ! Specify JNC_DESIGN explicitly for axle 13? [I]
OPT_SUSP_Y_AXLE_ROLL(5,3) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(5,3,1)     0 ; deg ! Static camber for wheel L13 [I]
A_CAMBER(5,3,2)     0 ; deg ! Static camber for wheel R13 [I]
A_TOE(5,3,1)        0 ; deg ! Static toe for wheel L13 [I]
A_TOE(5,3,2)        0 ; deg ! Static toe for wheel R13 [I]
H_CG_AXLE(5,3)    530 ; mm ! Z coordinate of axle 13 CG [I]
H_WC(5,3,1)       530 ; mm ! Reference Z coordinate of wheel center L13 [I]
H_WC(5,3,2)       530 ; mm ! Reference Z coordinate of wheel center R13 [I]
IA(5,3)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 13 [I]
IA_YY(5,3)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 13 [I]
! ISPIN(5,3,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L13 [I]
! ISPIN(5,3,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R13 [I]
! ISPIN_XXZZ(5,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L13 [I]
! ISPIN_XXZZ(5,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R13 [I]
IW(5,3,1)          20 ; kg-m2 ! Spin inertia for wheel L13 [I]
IW(5,3,2)          20 ; kg-m2 ! Spin inertia for wheel R13 [I]
IW_XXZZ(5,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L13 [I]
IW_XXZZ(5,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R13 [I]
JNC_DESIGN(5,3,1)   0 ; mm ! Jounce when center of wheel L13 is at H_WC [I]
JNC_DESIGN(5,3,2)   0 ; mm ! Jounce when center of wheel R13 is at H_WC [I]
L_TRACK(5,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 13 [I]
LX_AXLE(5,3)     4770 ; mm ! X dist. axle 13 is behind the sprung-mass origin [I]
M_US_AXLE(5,3)    603 ; kg ! Unsteered mass for axle 13 [I]
M_US_STR(5,3,1)     0 ; kg ! Steered mass for wheel L13 [I]
M_US_STR(5,3,2)     0 ; kg ! Steered mass for wheel R13 [I]
! M_US(5,3)      1035 ; kg ! CALC -- Total unsprung mass for axle 13
! R_US_STR(5,3) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 13
X_CG_AXLE(5,3)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(5,3)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 13 [I]
Y_CG_AXLE(5,3)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(5,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 13 [I]
Y_CL_SUSP(5,3)      0 ; mm ! Y coord. for suspension centerline, axle 13 [I]

! Solid-axle suspension for axle 1 on unit 6
OPT_JNC_DESIGN(6,1) 1 ! Specify JNC_DESIGN explicitly for axle 14? [I]
OPT_SUSP_Y_AXLE_ROLL(6,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(6,1,1)     0 ; deg ! Static camber for wheel L14 [I]
A_CAMBER(6,1,2)     0 ; deg ! Static camber for wheel R14 [I]
A_TOE(6,1,1)        0 ; deg ! Static toe for wheel L14 [I]
A_TOE(6,1,2)        0 ; deg ! Static toe for wheel R14 [I]
H_CG_AXLE(6,1)    530 ; mm ! Z coordinate of axle 14 CG [I]
H_WC(6,1,1)       530 ; mm ! Reference Z coordinate of wheel center L14 [I]
H_WC(6,1,2)       530 ; mm ! Reference Z coordinate of wheel center R14 [I]
IA(6,1)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 14 [I]
IA_YY(6,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 14 [I]
! ISPIN(6,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L14 [I]
! ISPIN(6,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R14 [I]
! ISPIN_XXZZ(6,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L14 [I]
! ISPIN_XXZZ(6,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R14 [I]
IW(6,1,1)          20 ; kg-m2 ! Spin inertia for wheel L14 [I]
IW(6,1,2)          20 ; kg-m2 ! Spin inertia for wheel R14 [I]
IW_XXZZ(6,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L14 [I]
IW_XXZZ(6,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R14 [I]
JNC_DESIGN(6,1,1)   0 ; mm ! Jounce when center of wheel L14 is at H_WC [I]
JNC_DESIGN(6,1,2)   0 ; mm ! Jounce when center of wheel R14 is at H_WC [I]
L_TRACK(6,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 14 [I]
LX_AXLE(6,1)     8800 ; mm ! X dist. axle 14 is behind the sprung-mass origin [I]
M_US_AXLE(6,1)    445 ; kg ! Unsteered mass for axle 14 [I]
M_US_STR(6,1,1)     0 ; kg ! Steered mass for wheel L14 [I]
M_US_STR(6,1,2)     0 ; kg ! Steered mass for wheel R14 [I]
! M_US(6,1)       809 ; kg ! CALC -- Total unsprung mass for axle 14
! R_US_STR(6,1) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 14
X_CG_AXLE(6,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(6,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 14 [I]
Y_CG_AXLE(6,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(6,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 14 [I]
Y_CL_SUSP(6,1)      0 ; mm ! Y coord. for suspension centerline, axle 14 [I]

! Solid-axle suspension for axle 2 on unit 6
OPT_JNC_DESIGN(6,2) 1 ! Specify JNC_DESIGN explicitly for axle 15? [I]
OPT_SUSP_Y_AXLE_ROLL(6,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(6,2,1)     0 ; deg ! Static camber for wheel L15 [I]
A_CAMBER(6,2,2)     0 ; deg ! Static camber for wheel R15 [I]
A_TOE(6,2,1)        0 ; deg ! Static toe for wheel L15 [I]
A_TOE(6,2,2)        0 ; deg ! Static toe for wheel R15 [I]
H_CG_AXLE(6,2)    530 ; mm ! Z coordinate of axle 15 CG [I]
H_WC(6,2,1)       530 ; mm ! Reference Z coordinate of wheel center L15 [I]
H_WC(6,2,2)       530 ; mm ! Reference Z coordinate of wheel center R15 [I]
IA(6,2)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 15 [I]
IA_YY(6,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 15 [I]
! ISPIN(6,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L15 [I]
! ISPIN(6,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R15 [I]
! ISPIN_XXZZ(6,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L15 [I]
! ISPIN_XXZZ(6,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R15 [I]
IW(6,2,1)          20 ; kg-m2 ! Spin inertia for wheel L15 [I]
IW(6,2,2)          20 ; kg-m2 ! Spin inertia for wheel R15 [I]
IW_XXZZ(6,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L15 [I]
IW_XXZZ(6,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R15 [I]
JNC_DESIGN(6,2,1)   0 ; mm ! Jounce when center of wheel L15 is at H_WC [I]
JNC_DESIGN(6,2,2)   0 ; mm ! Jounce when center of wheel R15 is at H_WC [I]
L_TRACK(6,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 15 [I]
LX_AXLE(6,2)    10500 ; mm ! X dist. axle 15 is behind the sprung-mass origin [I]
M_US_AXLE(6,2)    445 ; kg ! Unsteered mass for axle 15 [I]
M_US_STR(6,2,1)     0 ; kg ! Steered mass for wheel L15 [I]
M_US_STR(6,2,2)     0 ; kg ! Steered mass for wheel R15 [I]
! M_US(6,2)       809 ; kg ! CALC -- Total unsprung mass for axle 15
! R_US_STR(6,2) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 15
X_CG_AXLE(6,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(6,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 15 [I]
Y_CG_AXLE(6,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(6,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 15 [I]
Y_CL_SUSP(6,2)      0 ; mm ! Y coord. for suspension centerline, axle 15 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
! CMP_DESIGN(1,1,1) 71.52889875 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 71.52889875 ; mm ! CALC -- Compression at design load, spring R1
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 35764.44937 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 35764.44937 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 17882.22469 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 17882.22469 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 41432.69307 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 41432.69307 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,2,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R2
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2) 1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2) 1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)   1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Solid-axle suspension for axle 3 on unit 1
OPT_EXT_SP(1,3,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,3,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,3,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(1,3,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R3
CMP_OFFSET(1,3,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(1,3,2)   0 ; mm ! Initial compression of external spring R3 [I]
DAUX(1,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
DMP_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L3 [I]
DMP_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R3 [I]
DMP_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L3 [I]
DMP_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R3 [I]
DMP_LEN(1,3,1)      0 ; mm ! [D] Length at design for damper L3 [I]
DMP_LEN(1,3,2)      0 ; mm ! [D] Length at design for damper R3 [I]
SPG_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L3 [I]
SPG_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R3 [I]
SPG_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L3 [I]
SPG_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R3 [I]
SPG_LEN(1,3,1)      0 ; mm ! [D] Length at design for spring L3 [I]
SPG_LEN(1,3,2)      0 ; mm ! [D] Length at design for spring R3 [I]
! FSA_DESIGN(1,3) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(1,3) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(1,3,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(1,3,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(1,3,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(1,3,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(1,3) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(1,3) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(1,3,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(1,3,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(1,3) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_DAMPERS(1,3)   1000 ; mm ! Distance between dampers on axle 3 [I]
Y_DAMPERS(1,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 3 [I]
L_JNC_STOPS(1,3) 1000 ; mm ! Distance between jounce stops on axle 3 [I]
L_REB_STOPS(1,3) 1000 ; mm ! Distance between rebound stops on axle 3 [I]
L_SPRINGS(1,3)   1000 ; mm ! Distance between springs on axle 3 [I]
Y_SPRINGS(1,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 3 [I]
L_SPG_ADJ(1,3,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(1,3,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(1,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(1,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(1,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(1,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,1,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(2,1,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring R4
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R4 [I]
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(2,1,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(2,1,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(2,1,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(2,1,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(2,1) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,1) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,1,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,1,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,1) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,1) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,1,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,1,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(2,1)   1000 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(2,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(2,1) 1000 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(2,1) 1000 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(2,1)   1000 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(2,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,2,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(2,2,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring R5
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R5 [I]
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(2,2) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(2,2) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(2,2,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(2,2,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(2,2) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(2,2) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(2,2,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(2,2,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(2,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(2,2)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(2,2) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(2,2) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(2,2)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Solid-axle suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(3,1,1) 71.52889875 ; mm ! CALC -- Compression at design load, spring L6
! CMP_DESIGN(3,1,2) 71.52889875 ; mm ! CALC -- Compression at design load, spring R6
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R6 [I]
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
DMP_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L6 [I]
DMP_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R6 [I]
DMP_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L6 [I]
DMP_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R6 [I]
DMP_LEN(3,1,1)      0 ; mm ! [D] Length at design for damper L6 [I]
DMP_LEN(3,1,2)      0 ; mm ! [D] Length at design for damper R6 [I]
SPG_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L6 [I]
SPG_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R6 [I]
SPG_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L6 [I]
SPG_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R6 [I]
SPG_LEN(3,1,1)      0 ; mm ! [D] Length at design for spring L6 [I]
SPG_LEN(3,1,2)      0 ; mm ! [D] Length at design for spring R6 [I]
! FSA_DESIGN(3,1) 35764.44937 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(3,1) 35764.44937 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(3,1,1) 17882.22469 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(3,1,2) 17882.22469 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(3,1) 41432.69307 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(3,1) 41432.69307 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(3,1,1) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(3,1,2) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(3,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_DAMPERS(3,1)   1100 ; mm ! Distance between dampers on axle 6 [I]
Y_DAMPERS(3,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 6 [I]
L_JNC_STOPS(3,1)  890 ; mm ! Distance between jounce stops on axle 6 [I]
L_REB_STOPS(3,1)  890 ; mm ! Distance between rebound stops on axle 6 [I]
L_SPRINGS(3,1)    890 ; mm ! Distance between springs on axle 6 [I]
Y_SPRINGS(3,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 6 [I]
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

! Solid-axle suspension for axle 2 on unit 3
OPT_EXT_SP(3,2,1)   0 ! Disable built-in spring L7? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,2,2)   0 ! Disable built-in spring R7? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(3,2,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L7
! CMP_DESIGN(3,2,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R7
CMP_OFFSET(3,2,1)   0 ; mm ! Initial compression of external spring L7 [I]
CMP_OFFSET(3,2,2)   0 ; mm ! Initial compression of external spring R7 [I]
DAUX(3,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 7
DMP_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L7 [I]
DMP_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R7 [I]
DMP_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L7 [I]
DMP_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R7 [I]
DMP_LEN(3,2,1)      0 ; mm ! [D] Length at design for damper L7 [I]
DMP_LEN(3,2,2)      0 ; mm ! [D] Length at design for damper R7 [I]
SPG_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L7 [I]
SPG_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R7 [I]
SPG_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L7 [I]
SPG_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R7 [I]
SPG_LEN(3,2,1)      0 ; mm ! [D] Length at design for spring L7 [I]
SPG_LEN(3,2,2)      0 ; mm ! [D] Length at design for spring R7 [I]
! FSA_DESIGN(3,2) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 7
! FSA_L(3,2) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  7
FS_OFFSET(3,2,1)    0 ; N ! Force offset subtracted from built-in spring L7 [I]
FS_OFFSET(3,2,2)    0 ; N ! Force offset subtracted from built-in spring R7 [I]
! FS_STATIC(3,2,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L7
! FS_STATIC(3,2,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R7
! FZA_L(3,2) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 7
! FZA_UL(3,2) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 7
! FZ_STATIC(3,2,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L7
! FZ_STATIC(3,2,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R7
! KA_ROLL(3,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 7
L_DAMPERS(3,2)   1000 ; mm ! Distance between dampers on axle 7 [I]
Y_DAMPERS(3,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 7 [I]
L_JNC_STOPS(3,2) 1000 ; mm ! Distance between jounce stops on axle 7 [I]
L_REB_STOPS(3,2) 1000 ; mm ! Distance between rebound stops on axle 7 [I]
L_SPRINGS(3,2)   1000 ; mm ! Distance between springs on axle 7 [I]
Y_SPRINGS(3,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 7 [I]
L_SPG_ADJ(3,2,1)    0 ; mm ! Upper seat height increase for spring L7 [I]
L_SPG_ADJ(3,2,2)    0 ; mm ! Upper seat height increase for spring R7 [I]
SPRING_COMP_BETA(3,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L7
SPRING_COMP_BETA(3,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R7
SPRING_EXT_BETA(3,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L7
SPRING_EXT_BETA(3,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R7

! Solid-axle suspension for axle 3 on unit 3
OPT_EXT_SP(3,3,1)   0 ! Disable built-in spring L8? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,3,2)   0 ! Disable built-in spring R8? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(3,3,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L8
! CMP_DESIGN(3,3,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R8
CMP_OFFSET(3,3,1)   0 ; mm ! Initial compression of external spring L8 [I]
CMP_OFFSET(3,3,2)   0 ; mm ! Initial compression of external spring R8 [I]
DAUX(3,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 8
DMP_AX(3,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L8 [I]
DMP_AX(3,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R8 [I]
DMP_AY(3,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L8 [I]
DMP_AY(3,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R8 [I]
DMP_LEN(3,3,1)      0 ; mm ! [D] Length at design for damper L8 [I]
DMP_LEN(3,3,2)      0 ; mm ! [D] Length at design for damper R8 [I]
SPG_AX(3,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L8 [I]
SPG_AX(3,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R8 [I]
SPG_AY(3,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L8 [I]
SPG_AY(3,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R8 [I]
SPG_LEN(3,3,1)      0 ; mm ! [D] Length at design for spring L8 [I]
SPG_LEN(3,3,2)      0 ; mm ! [D] Length at design for spring R8 [I]
! FSA_DESIGN(3,3) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 8
! FSA_L(3,3) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  8
FS_OFFSET(3,3,1)    0 ; N ! Force offset subtracted from built-in spring L8 [I]
FS_OFFSET(3,3,2)    0 ; N ! Force offset subtracted from built-in spring R8 [I]
! FS_STATIC(3,3,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L8
! FS_STATIC(3,3,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R8
! FZA_L(3,3) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 8
! FZA_UL(3,3) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 8
! FZ_STATIC(3,3,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L8
! FZ_STATIC(3,3,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R8
! KA_ROLL(3,3) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 8
L_DAMPERS(3,3)   1000 ; mm ! Distance between dampers on axle 8 [I]
Y_DAMPERS(3,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 8 [I]
L_JNC_STOPS(3,3) 1000 ; mm ! Distance between jounce stops on axle 8 [I]
L_REB_STOPS(3,3) 1000 ; mm ! Distance between rebound stops on axle 8 [I]
L_SPRINGS(3,3)   1000 ; mm ! Distance between springs on axle 8 [I]
Y_SPRINGS(3,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 8 [I]
L_SPG_ADJ(3,3,1)    0 ; mm ! Upper seat height increase for spring L8 [I]
L_SPG_ADJ(3,3,2)    0 ; mm ! Upper seat height increase for spring R8 [I]
SPRING_COMP_BETA(3,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L8
SPRING_COMP_BETA(3,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R8
SPRING_EXT_BETA(3,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L8
SPRING_EXT_BETA(3,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R8

! Solid-axle suspension for axle 1 on unit 4
OPT_EXT_SP(4,1,1)   0 ! Disable built-in spring L9? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,1,2)   0 ! Disable built-in spring R9? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(4,1,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring L9
! CMP_DESIGN(4,1,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring R9
CMP_OFFSET(4,1,1)   0 ; mm ! Initial compression of external spring L9 [I]
CMP_OFFSET(4,1,2)   0 ; mm ! Initial compression of external spring R9 [I]
DAUX(4,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 9
DMP_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L9 [I]
DMP_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R9 [I]
DMP_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L9 [I]
DMP_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R9 [I]
DMP_LEN(4,1,1)      0 ; mm ! [D] Length at design for damper L9 [I]
DMP_LEN(4,1,2)      0 ; mm ! [D] Length at design for damper R9 [I]
SPG_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L9 [I]
SPG_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R9 [I]
SPG_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L9 [I]
SPG_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R9 [I]
SPG_LEN(4,1,1)      0 ; mm ! [D] Length at design for spring L9 [I]
SPG_LEN(4,1,2)      0 ; mm ! [D] Length at design for spring R9 [I]
! FSA_DESIGN(4,1) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 9
! FSA_L(4,1) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  9
FS_OFFSET(4,1,1)    0 ; N ! Force offset subtracted from built-in spring L9 [I]
FS_OFFSET(4,1,2)    0 ; N ! Force offset subtracted from built-in spring R9 [I]
! FS_STATIC(4,1,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L9
! FS_STATIC(4,1,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R9
! FZA_L(4,1) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 9
! FZA_UL(4,1) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 9
! FZ_STATIC(4,1,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L9
! FZ_STATIC(4,1,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R9
! KA_ROLL(4,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 9
L_DAMPERS(4,1)   1000 ; mm ! Distance between dampers on axle 9 [I]
Y_DAMPERS(4,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 9 [I]
L_JNC_STOPS(4,1) 1000 ; mm ! Distance between jounce stops on axle 9 [I]
L_REB_STOPS(4,1) 1000 ; mm ! Distance between rebound stops on axle 9 [I]
L_SPRINGS(4,1)   1000 ; mm ! Distance between springs on axle 9 [I]
Y_SPRINGS(4,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 9 [I]
L_SPG_ADJ(4,1,1)    0 ; mm ! Upper seat height increase for spring L9 [I]
L_SPG_ADJ(4,1,2)    0 ; mm ! Upper seat height increase for spring R9 [I]
SPRING_COMP_BETA(4,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L9
SPRING_COMP_BETA(4,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R9
SPRING_EXT_BETA(4,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L9
SPRING_EXT_BETA(4,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R9

! Solid-axle suspension for axle 2 on unit 4
OPT_EXT_SP(4,2,1)   0 ! Disable built-in spring L10? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,2,2)   0 ! Disable built-in spring R10? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(4,2,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! L10
! CMP_DESIGN(4,2,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! R10
CMP_OFFSET(4,2,1)   0 ; mm ! Initial compression of external spring L10 [I]
CMP_OFFSET(4,2,2)   0 ; mm ! Initial compression of external spring R10 [I]
DAUX(4,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 10
DMP_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L10 [I]
DMP_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R10 [I]
DMP_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L10 [I]
DMP_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R10 [I]
DMP_LEN(4,2,1)      0 ; mm ! [D] Length at design for damper L10 [I]
DMP_LEN(4,2,2)      0 ; mm ! [D] Length at design for damper R10 [I]
SPG_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L10 [I]
SPG_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R10 [I]
SPG_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L10 [I]
SPG_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R10 [I]
SPG_LEN(4,2,1)      0 ; mm ! [D] Length at design for spring L10 [I]
SPG_LEN(4,2,2)      0 ; mm ! [D] Length at design for spring R10 [I]
! FSA_DESIGN(4,2) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 10
! FSA_L(4,2) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  10
FS_OFFSET(4,2,1)    0 ; N ! Force offset subtracted from built-in spring L10 [I]
FS_OFFSET(4,2,2)    0 ; N ! Force offset subtracted from built-in spring R10 [I]
! FS_STATIC(4,2,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L10
! FS_STATIC(4,2,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R10
! FZA_L(4,2) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 10
! FZA_UL(4,2) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 10
! FZ_STATIC(4,2,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L10
! FZ_STATIC(4,2,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R10
! KA_ROLL(4,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 10
L_DAMPERS(4,2)   1000 ; mm ! Distance between dampers on axle 10 [I]
Y_DAMPERS(4,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 10 [I]
L_JNC_STOPS(4,2) 1000 ; mm ! Distance between jounce stops on axle 10 [I]
L_REB_STOPS(4,2) 1000 ; mm ! Distance between rebound stops on axle 10 [I]
L_SPRINGS(4,2)   1000 ; mm ! Distance between springs on axle 10 [I]
Y_SPRINGS(4,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 10 [I]
L_SPG_ADJ(4,2,1)    0 ; mm ! Upper seat height increase for spring L10 [I]
L_SPG_ADJ(4,2,2)    0 ; mm ! Upper seat height increase for spring R10 [I]
SPRING_COMP_BETA(4,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L10
SPRING_COMP_BETA(4,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R10
SPRING_EXT_BETA(4,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L10
SPRING_EXT_BETA(4,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R10

! Solid-axle suspension for axle 1 on unit 5
OPT_EXT_SP(5,1,1)   0 ! Disable built-in spring L11? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(5,1,2)   0 ! Disable built-in spring R11? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(5,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(5,1,1) 71.52889875 ; mm ! CALC -- Compression at design load, spring
                                ! L11
! CMP_DESIGN(5,1,2) 71.52889875 ; mm ! CALC -- Compression at design load, spring
                                ! R11
CMP_OFFSET(5,1,1)   0 ; mm ! Initial compression of external spring L11 [I]
CMP_OFFSET(5,1,2)   0 ; mm ! Initial compression of external spring R11 [I]
DAUX(5,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 11
DMP_AX(5,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L11 [I]
DMP_AX(5,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R11 [I]
DMP_AY(5,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L11 [I]
DMP_AY(5,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R11 [I]
DMP_LEN(5,1,1)      0 ; mm ! [D] Length at design for damper L11 [I]
DMP_LEN(5,1,2)      0 ; mm ! [D] Length at design for damper R11 [I]
SPG_AX(5,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L11 [I]
SPG_AX(5,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R11 [I]
SPG_AY(5,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L11 [I]
SPG_AY(5,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R11 [I]
SPG_LEN(5,1,1)      0 ; mm ! [D] Length at design for spring L11 [I]
SPG_LEN(5,1,2)      0 ; mm ! [D] Length at design for spring R11 [I]
! FSA_DESIGN(5,1) 35764.44937 ; N ! CALC -- Design Load (susp., unladen), axle 11
! FSA_L(5,1) 35764.44937 ; N ! CALC -- Static suspension load, laden, axle  11
FS_OFFSET(5,1,1)    0 ; N ! Force offset subtracted from built-in spring L11 [I]
FS_OFFSET(5,1,2)    0 ; N ! Force offset subtracted from built-in spring R11 [I]
! FS_STATIC(5,1,1) 17882.22469 ; N ! CALC -- Static spring force, laden, spring L11
! FS_STATIC(5,1,2) 17882.22469 ; N ! CALC -- Static spring force, laden, spring R11
! FZA_L(5,1) 41432.69307 ; N ! CALC -- Static ground load, laden, axle 11
! FZA_UL(5,1) 41432.69307 ; N ! CALC -- Static ground load, unladen, axle 11
! FZ_STATIC(5,1,1) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel L11
! FZ_STATIC(5,1,2) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel R11
! KA_ROLL(5,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 11
L_DAMPERS(5,1)   1100 ; mm ! Distance between dampers on axle 11 [I]
Y_DAMPERS(5,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 11 [I]
L_JNC_STOPS(5,1)  890 ; mm ! Distance between jounce stops on axle 11 [I]
L_REB_STOPS(5,1)  890 ; mm ! Distance between rebound stops on axle 11 [I]
L_SPRINGS(5,1)    890 ; mm ! Distance between springs on axle 11 [I]
Y_SPRINGS(5,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 11 [I]
L_SPG_ADJ(5,1,1)    0 ; mm ! Upper seat height increase for spring L11 [I]
L_SPG_ADJ(5,1,2)    0 ; mm ! Upper seat height increase for spring R11 [I]
SPRING_COMP_BETA(5,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L11
SPRING_COMP_BETA(5,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R11
SPRING_EXT_BETA(5,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L11
SPRING_EXT_BETA(5,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R11

! Solid-axle suspension for axle 2 on unit 5
OPT_EXT_SP(5,2,1)   0 ! Disable built-in spring L12? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(5,2,2)   0 ! Disable built-in spring R12? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(5,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(5,2,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring
                                ! L12
! CMP_DESIGN(5,2,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring
                                ! R12
CMP_OFFSET(5,2,1)   0 ; mm ! Initial compression of external spring L12 [I]
CMP_OFFSET(5,2,2)   0 ; mm ! Initial compression of external spring R12 [I]
DAUX(5,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 12
DMP_AX(5,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L12 [I]
DMP_AX(5,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R12 [I]
DMP_AY(5,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L12 [I]
DMP_AY(5,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R12 [I]
DMP_LEN(5,2,1)      0 ; mm ! [D] Length at design for damper L12 [I]
DMP_LEN(5,2,2)      0 ; mm ! [D] Length at design for damper R12 [I]
SPG_AX(5,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L12 [I]
SPG_AX(5,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R12 [I]
SPG_AY(5,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L12 [I]
SPG_AY(5,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R12 [I]
SPG_LEN(5,2,1)      0 ; mm ! [D] Length at design for spring L12 [I]
SPG_LEN(5,2,2)      0 ; mm ! [D] Length at design for spring R12 [I]
! FSA_DESIGN(5,2) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 12
! FSA_L(5,2) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  12
FS_OFFSET(5,2,1)    0 ; N ! Force offset subtracted from built-in spring L12 [I]
FS_OFFSET(5,2,2)    0 ; N ! Force offset subtracted from built-in spring R12 [I]
! FS_STATIC(5,2,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L12
! FS_STATIC(5,2,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R12
! FZA_L(5,2) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 12
! FZA_UL(5,2) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 12
! FZ_STATIC(5,2,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L12
! FZ_STATIC(5,2,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R12
! KA_ROLL(5,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 12
L_DAMPERS(5,2)   1000 ; mm ! Distance between dampers on axle 12 [I]
Y_DAMPERS(5,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 12 [I]
L_JNC_STOPS(5,2) 1000 ; mm ! Distance between jounce stops on axle 12 [I]
L_REB_STOPS(5,2) 1000 ; mm ! Distance between rebound stops on axle 12 [I]
L_SPRINGS(5,2)   1000 ; mm ! Distance between springs on axle 12 [I]
Y_SPRINGS(5,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 12 [I]
L_SPG_ADJ(5,2,1)    0 ; mm ! Upper seat height increase for spring L12 [I]
L_SPG_ADJ(5,2,2)    0 ; mm ! Upper seat height increase for spring R12 [I]
SPRING_COMP_BETA(5,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L12
SPRING_COMP_BETA(5,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R12
SPRING_EXT_BETA(5,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L12
SPRING_EXT_BETA(5,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R12

! Solid-axle suspension for axle 3 on unit 5
OPT_EXT_SP(5,3,1)   0 ! Disable built-in spring L13? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(5,3,2)   0 ! Disable built-in spring R13? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(5,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(5,3,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring
                                ! L13
! CMP_DESIGN(5,3,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring
                                ! R13
CMP_OFFSET(5,3,1)   0 ; mm ! Initial compression of external spring L13 [I]
CMP_OFFSET(5,3,2)   0 ; mm ! Initial compression of external spring R13 [I]
DAUX(5,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 13
DMP_AX(5,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L13 [I]
DMP_AX(5,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R13 [I]
DMP_AY(5,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L13 [I]
DMP_AY(5,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R13 [I]
DMP_LEN(5,3,1)      0 ; mm ! [D] Length at design for damper L13 [I]
DMP_LEN(5,3,2)      0 ; mm ! [D] Length at design for damper R13 [I]
SPG_AX(5,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L13 [I]
SPG_AX(5,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R13 [I]
SPG_AY(5,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L13 [I]
SPG_AY(5,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R13 [I]
SPG_LEN(5,3,1)      0 ; mm ! [D] Length at design for spring L13 [I]
SPG_LEN(5,3,2)      0 ; mm ! [D] Length at design for spring R13 [I]
! FSA_DESIGN(5,3) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 13
! FSA_L(5,3) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  13
FS_OFFSET(5,3,1)    0 ; N ! Force offset subtracted from built-in spring L13 [I]
FS_OFFSET(5,3,2)    0 ; N ! Force offset subtracted from built-in spring R13 [I]
! FS_STATIC(5,3,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L13
! FS_STATIC(5,3,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R13
! FZA_L(5,3) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 13
! FZA_UL(5,3) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 13
! FZ_STATIC(5,3,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L13
! FZ_STATIC(5,3,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R13
! KA_ROLL(5,3) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 13
L_DAMPERS(5,3)   1000 ; mm ! Distance between dampers on axle 13 [I]
Y_DAMPERS(5,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 13 [I]
L_JNC_STOPS(5,3) 1000 ; mm ! Distance between jounce stops on axle 13 [I]
L_REB_STOPS(5,3) 1000 ; mm ! Distance between rebound stops on axle 13 [I]
L_SPRINGS(5,3)   1000 ; mm ! Distance between springs on axle 13 [I]
Y_SPRINGS(5,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 13 [I]
L_SPG_ADJ(5,3,1)    0 ; mm ! Upper seat height increase for spring L13 [I]
L_SPG_ADJ(5,3,2)    0 ; mm ! Upper seat height increase for spring R13 [I]
SPRING_COMP_BETA(5,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L13
SPRING_COMP_BETA(5,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R13
SPRING_EXT_BETA(5,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L13
SPRING_EXT_BETA(5,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R13

! Solid-axle suspension for axle 1 on unit 6
OPT_EXT_SP(6,1,1)   0 ! Disable built-in spring L14? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(6,1,2)   0 ! Disable built-in spring R14? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(6,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(6,1,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! L14
! CMP_DESIGN(6,1,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! R14
CMP_OFFSET(6,1,1)   0 ; mm ! Initial compression of external spring L14 [I]
CMP_OFFSET(6,1,2)   0 ; mm ! Initial compression of external spring R14 [I]
DAUX(6,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 14
DMP_AX(6,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L14 [I]
DMP_AX(6,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R14 [I]
DMP_AY(6,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L14 [I]
DMP_AY(6,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R14 [I]
DMP_LEN(6,1,1)      0 ; mm ! [D] Length at design for damper L14 [I]
DMP_LEN(6,1,2)      0 ; mm ! [D] Length at design for damper R14 [I]
SPG_AX(6,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L14 [I]
SPG_AX(6,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R14 [I]
SPG_AY(6,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L14 [I]
SPG_AY(6,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R14 [I]
SPG_LEN(6,1,1)      0 ; mm ! [D] Length at design for spring L14 [I]
SPG_LEN(6,1,2)      0 ; mm ! [D] Length at design for spring R14 [I]
! FSA_DESIGN(6,1) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 14
! FSA_L(6,1) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  14
FS_OFFSET(6,1,1)    0 ; N ! Force offset subtracted from built-in spring L14 [I]
FS_OFFSET(6,1,2)    0 ; N ! Force offset subtracted from built-in spring R14 [I]
! FS_STATIC(6,1,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L14
! FS_STATIC(6,1,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R14
! FZA_L(6,1) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 14
! FZA_UL(6,1) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 14
! FZ_STATIC(6,1,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L14
! FZ_STATIC(6,1,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R14
! KA_ROLL(6,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 14
L_DAMPERS(6,1)   1000 ; mm ! Distance between dampers on axle 14 [I]
Y_DAMPERS(6,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 14 [I]
L_JNC_STOPS(6,1) 1000 ; mm ! Distance between jounce stops on axle 14 [I]
L_REB_STOPS(6,1) 1000 ; mm ! Distance between rebound stops on axle 14 [I]
L_SPRINGS(6,1)   1000 ; mm ! Distance between springs on axle 14 [I]
Y_SPRINGS(6,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 14 [I]
L_SPG_ADJ(6,1,1)    0 ; mm ! Upper seat height increase for spring L14 [I]
L_SPG_ADJ(6,1,2)    0 ; mm ! Upper seat height increase for spring R14 [I]
SPRING_COMP_BETA(6,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L14
SPRING_COMP_BETA(6,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R14
SPRING_EXT_BETA(6,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L14
SPRING_EXT_BETA(6,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R14

! Solid-axle suspension for axle 2 on unit 6
OPT_EXT_SP(6,2,1)   0 ! Disable built-in spring L15? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(6,2,2)   0 ! Disable built-in spring R15? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(6,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(6,2,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! L15
! CMP_DESIGN(6,2,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring
                                ! R15
CMP_OFFSET(6,2,1)   0 ; mm ! Initial compression of external spring L15 [I]
CMP_OFFSET(6,2,2)   0 ; mm ! Initial compression of external spring R15 [I]
DAUX(6,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 15
DMP_AX(6,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L15 [I]
DMP_AX(6,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R15 [I]
DMP_AY(6,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L15 [I]
DMP_AY(6,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R15 [I]
DMP_LEN(6,2,1)      0 ; mm ! [D] Length at design for damper L15 [I]
DMP_LEN(6,2,2)      0 ; mm ! [D] Length at design for damper R15 [I]
SPG_AX(6,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L15 [I]
SPG_AX(6,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R15 [I]
SPG_AY(6,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L15 [I]
SPG_AY(6,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R15 [I]
SPG_LEN(6,2,1)      0 ; mm ! [D] Length at design for spring L15 [I]
SPG_LEN(6,2,2)      0 ; mm ! [D] Length at design for spring R15 [I]
! FSA_DESIGN(6,2) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 15
! FSA_L(6,2) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  15
FS_OFFSET(6,2,1)    0 ; N ! Force offset subtracted from built-in spring L15 [I]
FS_OFFSET(6,2,2)    0 ; N ! Force offset subtracted from built-in spring R15 [I]
! FS_STATIC(6,2,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L15
! FS_STATIC(6,2,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R15
! FZA_L(6,2) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 15
! FZA_UL(6,2) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 15
! FZ_STATIC(6,2,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L15
! FZ_STATIC(6,2,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R15
! KA_ROLL(6,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 15
L_DAMPERS(6,2)   1000 ; mm ! Distance between dampers on axle 15 [I]
Y_DAMPERS(6,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 15 [I]
L_JNC_STOPS(6,2) 1000 ; mm ! Distance between jounce stops on axle 15 [I]
L_REB_STOPS(6,2) 1000 ; mm ! Distance between rebound stops on axle 15 [I]
L_SPRINGS(6,2)   1000 ; mm ! Distance between springs on axle 15 [I]
Y_SPRINGS(6,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 15 [I]
L_SPG_ADJ(6,2,1)    0 ; mm ! Upper seat height increase for spring L15 [I]
L_SPG_ADJ(6,2,2)    0 ; mm ! Upper seat height increase for spring R15 [I]
SPRING_COMP_BETA(6,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L15
SPRING_COMP_BETA(6,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R15
SPRING_EXT_BETA(6,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L15
SPRING_EXT_BETA(6,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R15

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control).

OPT_M_SW_CALC(1)    0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details), vehicle 1 [I]
OPT_POWER(1)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 1 [I]
OPT_STEER_DEF(1)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 1
OPT_I_GEAR_IN(1)    0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes, vehicle 1 [I]
BETA_COL(1)       0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(1)         0.01 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 1
HYS_COL(1)        0.1 ; N-m ! [D] Steering column friction torque, vehicle 1
I_COL(1)         0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN(1)   0.0001 ; kg-m2 ! [D] Steering system inertia, vehicle 1
A_STR_STOP_L(1)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(1)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 1
K_STR_STOP_R(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 1

OPT_M_SW_CALC(2)    0 ! [D] Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 2 [I]
OPT_POWER(2)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 2 [I]
OPT_STEER_DEF(2)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 2
OPT_I_GEAR_IN(2)    0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes, vehicle 2 [I]
BETA_COL(2)       0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(2)         0.01 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 2
HYS_COL(2)        0.1 ; N-m ! [D] Steering column friction torque, vehicle 2
I_COL(2)         0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN(2)   0.0001 ; kg-m2 ! [D] Steering system inertia, vehicle 2
A_STR_STOP_L(2)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(2)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(2)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 2
K_STR_STOP_R(2)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 2

OPT_M_SW_CALC(3)    0 ! [D] Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 3 [I]
OPT_POWER(3)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 3 [I]
OPT_STEER_DEF(3)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 3
OPT_I_GEAR_IN(3)    0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes, vehicle 3 [I]
BETA_COL(3)       0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(3)         0.01 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 3
HYS_COL(3)        0.1 ; N-m ! [D] Steering column friction torque, vehicle 3
I_COL(3)         0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN(3)   0.0001 ; kg-m2 ! [D] Steering system inertia, vehicle 3
A_STR_STOP_L(3)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(3)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(3)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 3
K_STR_STOP_R(3)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 3

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,3)  1 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  0 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(3,1)         1 ! Compliant steer option, axle 6: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(3,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(3,1,1)   5.2 ; deg ! Caster for wheel L6 [I]
A_CASTER(3,1,2)   5.2 ; deg ! Caster for wheel R6 [I]
A_KPI(3,1,1)      7.2 ; deg ! Kingpin inclination for wheel L6 [I]
A_KPI(3,1,2)      7.2 ; deg ! Kingpin inclination for wheel R6 [I]
A_MZ_BETA(3,1,1)  0.1 ; deg ! Ref. hysteresis angle for L6 parking steer torque
A_MZ_BETA(3,1,2)  0.1 ; deg ! Ref. hysteresis angle for R6 parking steer torque
BETA_GEAR(3,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 6
CS_MZ_ROD(3,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 6
CS_MZ_SHAFT(3,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 6
C_WRAP(3,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 6
D_GEAR(3,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 6
HYS_GEAR(3,1)       0 ; N-m ! Steering gear hysteresis, axle 6
L_KPO(3,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L6 [I]
L_KPO(3,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R6 [I]
R_BMP_STR(3,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 6
R_WRAP_STR(3,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 6
X_KPO(3,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L6 [I]
X_KPO(3,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R6 [I]

OPT_STEER_EXT(3,2)  1 ! Steer model option for axle 7: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,3)  1 ! Steer model option for axle 8: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,1)  1 ! Steer model option for axle 9: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,2)  1 ! Steer model option for axle 10: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(5,1)  0 ! Steer model option for axle 11: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(5,1)         1 ! Compliant steer option, axle 11: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(5,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(5,1,1)   5.2 ; deg ! Caster for wheel L11 [I]
A_CASTER(5,1,2)   5.2 ; deg ! Caster for wheel R11 [I]
A_KPI(5,1,1)      7.2 ; deg ! Kingpin inclination for wheel L11 [I]
A_KPI(5,1,2)      7.2 ; deg ! Kingpin inclination for wheel R11 [I]
A_MZ_BETA(5,1,1)  0.1 ; deg ! Ref. hysteresis angle for L11 parking steer torque
A_MZ_BETA(5,1,2)  0.1 ; deg ! Ref. hysteresis angle for R11 parking steer torque
BETA_GEAR(5,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 11
CS_MZ_ROD(5,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 11
CS_MZ_SHAFT(5,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 11
C_WRAP(5,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 11
D_GEAR(5,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 11
HYS_GEAR(5,1)       0 ; N-m ! Steering gear hysteresis, axle 11
L_KPO(5,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L11 [I]
L_KPO(5,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R11 [I]
R_BMP_STR(5,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle
                       ! 11
R_WRAP_STR(5,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 11
X_KPO(5,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L11 [I]
X_KPO(5,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R11 [I]

OPT_STEER_EXT(5,2)  1 ! Steer model option for axle 12: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(5,3)  1 ! Steer model option for axle 13: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(6,1)  1 ! Steer model option for axle 14: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(6,2)  1 ! Steer model option for axle 15: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE.

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)       310 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(1,3)       310 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(2,1)       310 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(2,2)       310 ; mm ! Dual-tire spacing for axle 5 [I]
L_DUAL(3,1)         0 ; mm ! Dual-tire spacing for axle 6 [I]
L_DUAL(3,2)       310 ; mm ! Dual-tire spacing for axle 7 [I]
L_DUAL(3,3)       310 ; mm ! Dual-tire spacing for axle 8 [I]
L_DUAL(4,1)       310 ; mm ! Dual-tire spacing for axle 9 [I]
L_DUAL(4,2)       310 ; mm ! Dual-tire spacing for axle 10 [I]
L_DUAL(5,1)         0 ; mm ! Dual-tire spacing for axle 11 [I]
L_DUAL(5,2)       310 ; mm ! Dual-tire spacing for axle 12 [I]
L_DUAL(5,3)       310 ; mm ! Dual-tire spacing for axle 13 [I]
L_DUAL(6,1)       310 ; mm ! Dual-tire spacing for axle 14 [I]
L_DUAL(6,2)       310 ; mm ! Dual-tire spacing for axle 15 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 8 -> SIEMENS
                          ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                          ! tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 35000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)   108 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 35000 ; N ! Reference vertical force
IT(1,1,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)   108 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 35000 ; N ! Reference vertical force
IT(1,2,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)   108 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(1,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(1,2,1,2) 35000 ; N ! Reference vertical force
IT(1,2,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(1,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(1,2,1,2)   108 ; kg ! Mass of tire L2o
MU_REF_X(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(1,2,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(1,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 35000 ; N ! Reference vertical force
IT(1,2,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)   108 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(1,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(1,2,2,2) 35000 ; N ! Reference vertical force
IT(1,2,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(1,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(1,2,2,2)   108 ; kg ! Mass of tire R2o
MU_REF_X(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(1,2,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(1,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(1,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(1,3,1,1) 35000 ; N ! Reference vertical force
IT(1,3,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(1,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(1,3,1,1)   108 ; kg ! Mass of tire L3i
MU_REF_X(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(1,3,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(1,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,2) 1 ! Internal tire shear-model option, L3o [I]
OPT_TIRE_COMB(1,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L3o [I]
FZ_REF(1,3,1,2) 35000 ; N ! Reference vertical force
IT(1,3,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L3o [I]
IT_XXZZ(1,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L3o [I]
M_TIRE(1,3,1,2)   108 ; kg ! Mass of tire L3o
MU_REF_X(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3o
MU_REF_Y(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3o
R0(1,3,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L3o [I]
RR_C(1,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(1,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(1,3,2,1) 35000 ; N ! Reference vertical force
IT(1,3,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(1,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(1,3,2,1)   108 ; kg ! Mass of tire R3i
MU_REF_X(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(1,3,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(1,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,2) 1 ! Internal tire shear-model option, R3o [I]
OPT_TIRE_COMB(1,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R3o [I]
FZ_REF(1,3,2,2) 35000 ; N ! Reference vertical force
IT(1,3,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R3o [I]
IT_XXZZ(1,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R3o [I]
M_TIRE(1,3,2,2)   108 ; kg ! Mass of tire R3o
MU_REF_X(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3o
MU_REF_Y(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3o
R0(1,3,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R3o [I]
RR_C(1,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(2,1,1,1) 30000 ; N ! Reference vertical force
IT(2,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(2,1,1,1)    91 ; kg ! Mass of tire L4i
MU_REF_X(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(2,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(2,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(2,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(2,1,1,2) 30000 ; N ! Reference vertical force
IT(2,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(2,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(2,1,1,2)    91 ; kg ! Mass of tire L4o
MU_REF_X(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(2,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(2,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(2,1,2,1) 30000 ; N ! Reference vertical force
IT(2,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(2,1,2,1)    91 ; kg ! Mass of tire R4i
MU_REF_X(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(2,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(2,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(2,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(2,1,2,2) 30000 ; N ! Reference vertical force
IT(2,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(2,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(2,1,2,2)    91 ; kg ! Mass of tire R4o
MU_REF_X(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(2,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(2,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(2,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(2,2,1,1) 30000 ; N ! Reference vertical force
IT(2,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(2,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(2,2,1,1)    91 ; kg ! Mass of tire L5i
MU_REF_X(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(2,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(2,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,2) 1 ! Internal tire shear-model option, L5o [I]
OPT_TIRE_COMB(2,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L5o [I]
FZ_REF(2,2,1,2) 30000 ; N ! Reference vertical force
IT(2,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L5o [I]
IT_XXZZ(2,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L5o [I]
M_TIRE(2,2,1,2)    91 ; kg ! Mass of tire L5o
MU_REF_X(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5o
MU_REF_Y(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5o
R0(2,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5o [I]
RR_C(2,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(2,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(2,2,2,1) 30000 ; N ! Reference vertical force
IT(2,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(2,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(2,2,2,1)    91 ; kg ! Mass of tire R5i
MU_REF_X(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(2,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(2,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,2) 1 ! Internal tire shear-model option, R5o [I]
OPT_TIRE_COMB(2,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R5o [I]
FZ_REF(2,2,2,2) 30000 ; N ! Reference vertical force
IT(2,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R5o [I]
IT_XXZZ(2,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R5o [I]
M_TIRE(2,2,2,2)    91 ; kg ! Mass of tire R5o
MU_REF_X(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5o
MU_REF_Y(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5o
R0(2,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5o [I]
RR_C(2,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,1) 1 ! Internal tire shear-model option, L6i [I]
OPT_TIRE_COMB(3,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L6i [I]
FZ_REF(3,1,1,1) 35000 ; N ! Reference vertical force
IT(3,1,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L6i [I]
IT_XXZZ(3,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L6i [I]
M_TIRE(3,1,1,1)   108 ; kg ! Mass of tire L6i
MU_REF_X(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6i
MU_REF_Y(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6i
R0(3,1,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L6i [I]
RR_C(3,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(3,1,2,1) 1 ! Internal tire shear-model option, R6i [I]
OPT_TIRE_COMB(3,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R6i [I]
FZ_REF(3,1,2,1) 35000 ; N ! Reference vertical force
IT(3,1,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R6i [I]
IT_XXZZ(3,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R6i [I]
M_TIRE(3,1,2,1)   108 ; kg ! Mass of tire R6i
MU_REF_X(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6i
MU_REF_Y(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6i
R0(3,1,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R6i [I]
RR_C(3,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(3,2,1,1) 1 ! Internal tire shear-model option, L7i [I]
OPT_TIRE_COMB(3,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L7i [I]
FZ_REF(3,2,1,1) 35000 ; N ! Reference vertical force
IT(3,2,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L7i [I]
IT_XXZZ(3,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L7i [I]
M_TIRE(3,2,1,1)   108 ; kg ! Mass of tire L7i
MU_REF_X(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7i
MU_REF_Y(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7i
R0(3,2,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L7i [I]
RR_C(3,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1,2) 1 ! Internal tire shear-model option, L7o [I]
OPT_TIRE_COMB(3,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L7o [I]
FZ_REF(3,2,1,2) 35000 ; N ! Reference vertical force
IT(3,2,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L7o [I]
IT_XXZZ(3,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L7o [I]
M_TIRE(3,2,1,2)   108 ; kg ! Mass of tire L7o
MU_REF_X(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7o
MU_REF_Y(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7o
R0(3,2,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L7o [I]
RR_C(3,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,1) 1 ! Internal tire shear-model option, R7i [I]
OPT_TIRE_COMB(3,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R7i [I]
FZ_REF(3,2,2,1) 35000 ; N ! Reference vertical force
IT(3,2,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R7i [I]
IT_XXZZ(3,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R7i [I]
M_TIRE(3,2,2,1)   108 ; kg ! Mass of tire R7i
MU_REF_X(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7i
MU_REF_Y(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7i
R0(3,2,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R7i [I]
RR_C(3,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,2) 1 ! Internal tire shear-model option, R7o [I]
OPT_TIRE_COMB(3,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R7o [I]
FZ_REF(3,2,2,2) 35000 ; N ! Reference vertical force
IT(3,2,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R7o [I]
IT_XXZZ(3,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R7o [I]
M_TIRE(3,2,2,2)   108 ; kg ! Mass of tire R7o
MU_REF_X(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7o
MU_REF_Y(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7o
R0(3,2,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R7o [I]
RR_C(3,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,1,1) 1 ! Internal tire shear-model option, L8i [I]
OPT_TIRE_COMB(3,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L8i [I]
FZ_REF(3,3,1,1) 35000 ; N ! Reference vertical force
IT(3,3,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L8i [I]
IT_XXZZ(3,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L8i [I]
M_TIRE(3,3,1,1)   108 ; kg ! Mass of tire L8i
MU_REF_X(3,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8i
MU_REF_Y(3,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8i
R0(3,3,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L8i [I]
RR_C(3,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,1,2) 1 ! Internal tire shear-model option, L8o [I]
OPT_TIRE_COMB(3,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L8o [I]
FZ_REF(3,3,1,2) 35000 ; N ! Reference vertical force
IT(3,3,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L8o [I]
IT_XXZZ(3,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L8o [I]
M_TIRE(3,3,1,2)   108 ; kg ! Mass of tire L8o
MU_REF_X(3,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8o
MU_REF_Y(3,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8o
R0(3,3,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L8o [I]
RR_C(3,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,2,1) 1 ! Internal tire shear-model option, R8i [I]
OPT_TIRE_COMB(3,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R8i [I]
FZ_REF(3,3,2,1) 35000 ; N ! Reference vertical force
IT(3,3,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R8i [I]
IT_XXZZ(3,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R8i [I]
M_TIRE(3,3,2,1)   108 ; kg ! Mass of tire R8i
MU_REF_X(3,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8i
MU_REF_Y(3,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8i
R0(3,3,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R8i [I]
RR_C(3,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,2,2) 1 ! Internal tire shear-model option, R8o [I]
OPT_TIRE_COMB(3,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R8o [I]
FZ_REF(3,3,2,2) 35000 ; N ! Reference vertical force
IT(3,3,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R8o [I]
IT_XXZZ(3,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R8o [I]
M_TIRE(3,3,2,2)   108 ; kg ! Mass of tire R8o
MU_REF_X(3,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8o
MU_REF_Y(3,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8o
R0(3,3,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R8o [I]
RR_C(3,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,1,1) 1 ! Internal tire shear-model option, L9i [I]
OPT_TIRE_COMB(4,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L9i [I]
FZ_REF(4,1,1,1) 30000 ; N ! Reference vertical force
IT(4,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L9i [I]
IT_XXZZ(4,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L9i [I]
M_TIRE(4,1,1,1)    91 ; kg ! Mass of tire L9i
MU_REF_X(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L9i
MU_REF_Y(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L9i
R0(4,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L9i [I]
RR_C(4,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,1,2) 1 ! Internal tire shear-model option, L9o [I]
OPT_TIRE_COMB(4,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L9o [I]
FZ_REF(4,1,1,2) 30000 ; N ! Reference vertical force
IT(4,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L9o [I]
IT_XXZZ(4,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L9o [I]
M_TIRE(4,1,1,2)    91 ; kg ! Mass of tire L9o
MU_REF_X(4,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L9o
MU_REF_Y(4,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L9o
R0(4,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L9o [I]
RR_C(4,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,2,1) 1 ! Internal tire shear-model option, R9i [I]
OPT_TIRE_COMB(4,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R9i [I]
FZ_REF(4,1,2,1) 30000 ; N ! Reference vertical force
IT(4,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R9i [I]
IT_XXZZ(4,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R9i [I]
M_TIRE(4,1,2,1)    91 ; kg ! Mass of tire R9i
MU_REF_X(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R9i
MU_REF_Y(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R9i
R0(4,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R9i [I]
RR_C(4,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,2,2) 1 ! Internal tire shear-model option, R9o [I]
OPT_TIRE_COMB(4,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R9o [I]
FZ_REF(4,1,2,2) 30000 ; N ! Reference vertical force
IT(4,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R9o [I]
IT_XXZZ(4,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R9o [I]
M_TIRE(4,1,2,2)    91 ; kg ! Mass of tire R9o
MU_REF_X(4,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R9o
MU_REF_Y(4,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R9o
R0(4,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R9o [I]
RR_C(4,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1,1) 1 ! Internal tire shear-model option, L10i [I]
OPT_TIRE_COMB(4,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L10i [I]
FZ_REF(4,2,1,1) 30000 ; N ! Reference vertical force
IT(4,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L10i [I]
IT_XXZZ(4,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L10i [I]
M_TIRE(4,2,1,1)    91 ; kg ! Mass of tire L10i
MU_REF_X(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L10i
MU_REF_Y(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L10i
R0(4,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L10i [I]
RR_C(4,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1,2) 1 ! Internal tire shear-model option, L10o [I]
OPT_TIRE_COMB(4,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L10o [I]
FZ_REF(4,2,1,2) 30000 ; N ! Reference vertical force
IT(4,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L10o [I]
IT_XXZZ(4,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L10o [I]
M_TIRE(4,2,1,2)    91 ; kg ! Mass of tire L10o
MU_REF_X(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L10o
MU_REF_Y(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L10o
R0(4,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L10o [I]
RR_C(4,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,1) 1 ! Internal tire shear-model option, R10i [I]
OPT_TIRE_COMB(4,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R10i [I]
FZ_REF(4,2,2,1) 30000 ; N ! Reference vertical force
IT(4,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R10i [I]
IT_XXZZ(4,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R10i [I]
M_TIRE(4,2,2,1)    91 ; kg ! Mass of tire R10i
MU_REF_X(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R10i
MU_REF_Y(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R10i
R0(4,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R10i [I]
RR_C(4,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,2) 1 ! Internal tire shear-model option, R10o [I]
OPT_TIRE_COMB(4,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R10o [I]
FZ_REF(4,2,2,2) 30000 ; N ! Reference vertical force
IT(4,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R10o [I]
IT_XXZZ(4,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R10o [I]
M_TIRE(4,2,2,2)    91 ; kg ! Mass of tire R10o
MU_REF_X(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R10o
MU_REF_Y(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R10o
R0(4,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R10o [I]
RR_C(4,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,1,1,1) 1 ! Internal tire shear-model option, L11i [I]
OPT_TIRE_COMB(5,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L11i [I]
FZ_REF(5,1,1,1) 35000 ; N ! Reference vertical force
IT(5,1,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L11i [I]
IT_XXZZ(5,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L11i [I]
M_TIRE(5,1,1,1)   108 ; kg ! Mass of tire L11i
MU_REF_X(5,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L11i
MU_REF_Y(5,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L11i
R0(5,1,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,1,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L11i [I]
RR_C(5,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(5,1,2,1) 1 ! Internal tire shear-model option, R11i [I]
OPT_TIRE_COMB(5,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R11i [I]
FZ_REF(5,1,2,1) 35000 ; N ! Reference vertical force
IT(5,1,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R11i [I]
IT_XXZZ(5,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R11i [I]
M_TIRE(5,1,2,1)   108 ; kg ! Mass of tire R11i
MU_REF_X(5,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R11i
MU_REF_Y(5,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R11i
R0(5,1,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,1,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R11i [I]
RR_C(5,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(5,2,1,1) 1 ! Internal tire shear-model option, L12i [I]
OPT_TIRE_COMB(5,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L12i [I]
FZ_REF(5,2,1,1) 35000 ; N ! Reference vertical force
IT(5,2,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L12i [I]
IT_XXZZ(5,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L12i [I]
M_TIRE(5,2,1,1)   108 ; kg ! Mass of tire L12i
MU_REF_X(5,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L12i
MU_REF_Y(5,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L12i
R0(5,2,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,2,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L12i [I]
RR_C(5,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,2,1,2) 1 ! Internal tire shear-model option, L12o [I]
OPT_TIRE_COMB(5,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(5,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L12o [I]
FZ_REF(5,2,1,2) 35000 ; N ! Reference vertical force
IT(5,2,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L12o [I]
IT_XXZZ(5,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L12o [I]
M_TIRE(5,2,1,2)   108 ; kg ! Mass of tire L12o
MU_REF_X(5,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L12o
MU_REF_Y(5,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L12o
R0(5,2,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,2,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L12o [I]
RR_C(5,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,2,2,1) 1 ! Internal tire shear-model option, R12i [I]
OPT_TIRE_COMB(5,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R12i [I]
FZ_REF(5,2,2,1) 35000 ; N ! Reference vertical force
IT(5,2,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R12i [I]
IT_XXZZ(5,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R12i [I]
M_TIRE(5,2,2,1)   108 ; kg ! Mass of tire R12i
MU_REF_X(5,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R12i
MU_REF_Y(5,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R12i
R0(5,2,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,2,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R12i [I]
RR_C(5,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,2,2,2) 1 ! Internal tire shear-model option, R12o [I]
OPT_TIRE_COMB(5,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(5,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R12o [I]
FZ_REF(5,2,2,2) 35000 ; N ! Reference vertical force
IT(5,2,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R12o [I]
IT_XXZZ(5,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R12o [I]
M_TIRE(5,2,2,2)   108 ; kg ! Mass of tire R12o
MU_REF_X(5,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R12o
MU_REF_Y(5,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R12o
R0(5,2,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,2,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R12o [I]
RR_C(5,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,3,1,1) 1 ! Internal tire shear-model option, L13i [I]
OPT_TIRE_COMB(5,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L13i [I]
FZ_REF(5,3,1,1) 35000 ; N ! Reference vertical force
IT(5,3,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L13i [I]
IT_XXZZ(5,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L13i [I]
M_TIRE(5,3,1,1)   108 ; kg ! Mass of tire L13i
MU_REF_X(5,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L13i
MU_REF_Y(5,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L13i
R0(5,3,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,3,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L13i [I]
RR_C(5,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,3,1,2) 1 ! Internal tire shear-model option, L13o [I]
OPT_TIRE_COMB(5,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(5,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L13o [I]
FZ_REF(5,3,1,2) 35000 ; N ! Reference vertical force
IT(5,3,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L13o [I]
IT_XXZZ(5,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L13o [I]
M_TIRE(5,3,1,2)   108 ; kg ! Mass of tire L13o
MU_REF_X(5,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L13o
MU_REF_Y(5,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L13o
R0(5,3,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,3,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L13o [I]
RR_C(5,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,3,2,1) 1 ! Internal tire shear-model option, R13i [I]
OPT_TIRE_COMB(5,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(5,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R13i [I]
FZ_REF(5,3,2,1) 35000 ; N ! Reference vertical force
IT(5,3,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R13i [I]
IT_XXZZ(5,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R13i [I]
M_TIRE(5,3,2,1)   108 ; kg ! Mass of tire R13i
MU_REF_X(5,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R13i
MU_REF_Y(5,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R13i
R0(5,3,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,3,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R13i [I]
RR_C(5,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(5,3,2,2) 1 ! Internal tire shear-model option, R13o [I]
OPT_TIRE_COMB(5,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(5,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(5,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(5,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R13o [I]
FZ_REF(5,3,2,2) 35000 ; N ! Reference vertical force
IT(5,3,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R13o [I]
IT_XXZZ(5,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R13o [I]
M_TIRE(5,3,2,2)   108 ; kg ! Mass of tire R13o
MU_REF_X(5,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R13o
MU_REF_Y(5,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R13o
R0(5,3,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(5,3,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R13o [I]
RR_C(5,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(5,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(5,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(5,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(5,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(5,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,1,1,1) 1 ! Internal tire shear-model option, L14i [I]
OPT_TIRE_COMB(6,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(6,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L14i [I]
FZ_REF(6,1,1,1) 30000 ; N ! Reference vertical force
IT(6,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L14i [I]
IT_XXZZ(6,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L14i [I]
M_TIRE(6,1,1,1)    91 ; kg ! Mass of tire L14i
MU_REF_X(6,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L14i
MU_REF_Y(6,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L14i
R0(6,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L14i [I]
RR_C(6,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,1,1,2) 1 ! Internal tire shear-model option, L14o [I]
OPT_TIRE_COMB(6,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(6,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L14o [I]
FZ_REF(6,1,1,2) 30000 ; N ! Reference vertical force
IT(6,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L14o [I]
IT_XXZZ(6,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L14o [I]
M_TIRE(6,1,1,2)    91 ; kg ! Mass of tire L14o
MU_REF_X(6,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L14o
MU_REF_Y(6,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L14o
R0(6,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L14o [I]
RR_C(6,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,1,2,1) 1 ! Internal tire shear-model option, R14i [I]
OPT_TIRE_COMB(6,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(6,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R14i [I]
FZ_REF(6,1,2,1) 30000 ; N ! Reference vertical force
IT(6,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R14i [I]
IT_XXZZ(6,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R14i [I]
M_TIRE(6,1,2,1)    91 ; kg ! Mass of tire R14i
MU_REF_X(6,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R14i
MU_REF_Y(6,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R14i
R0(6,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R14i [I]
RR_C(6,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,1,2,2) 1 ! Internal tire shear-model option, R14o [I]
OPT_TIRE_COMB(6,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(6,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R14o [I]
FZ_REF(6,1,2,2) 30000 ; N ! Reference vertical force
IT(6,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R14o [I]
IT_XXZZ(6,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R14o [I]
M_TIRE(6,1,2,2)    91 ; kg ! Mass of tire R14o
MU_REF_X(6,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R14o
MU_REF_Y(6,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R14o
R0(6,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R14o [I]
RR_C(6,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,2,1,1) 1 ! Internal tire shear-model option, L15i [I]
OPT_TIRE_COMB(6,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(6,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L15i [I]
FZ_REF(6,2,1,1) 30000 ; N ! Reference vertical force
IT(6,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L15i [I]
IT_XXZZ(6,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L15i [I]
M_TIRE(6,2,1,1)    91 ; kg ! Mass of tire L15i
MU_REF_X(6,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L15i
MU_REF_Y(6,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L15i
R0(6,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L15i [I]
RR_C(6,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,2,1,2) 1 ! Internal tire shear-model option, L15o [I]
OPT_TIRE_COMB(6,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(6,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L15o [I]
FZ_REF(6,2,1,2) 30000 ; N ! Reference vertical force
IT(6,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L15o [I]
IT_XXZZ(6,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L15o [I]
M_TIRE(6,2,1,2)    91 ; kg ! Mass of tire L15o
MU_REF_X(6,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L15o
MU_REF_Y(6,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L15o
R0(6,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L15o [I]
RR_C(6,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,2,2,1) 1 ! Internal tire shear-model option, R15i [I]
OPT_TIRE_COMB(6,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(6,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R15i [I]
FZ_REF(6,2,2,1) 30000 ; N ! Reference vertical force
IT(6,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R15i [I]
IT_XXZZ(6,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R15i [I]
M_TIRE(6,2,2,1)    91 ; kg ! Mass of tire R15i
MU_REF_X(6,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R15i
MU_REF_Y(6,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R15i
R0(6,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R15i [I]
RR_C(6,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(6,2,2,2) 1 ! Internal tire shear-model option, R15o [I]
OPT_TIRE_COMB(6,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(6,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(6,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(6,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R15o [I]
FZ_REF(6,2,2,2) 30000 ; N ! Reference vertical force
IT(6,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R15o [I]
IT_XXZZ(6,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R15o [I]
M_TIRE(6,2,2,2)    91 ; kg ! Mass of tire R15o
MU_REF_X(6,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R15o
MU_REF_Y(6,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R15o
R0(6,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(6,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R15o [I]
RR_C(6,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(6,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(6,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(6,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(6,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(6,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure).

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL(1)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 1

OPT_BK_PEDAL(2)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 2

OPT_BK_PEDAL(3)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 3

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  1 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)      0.3 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  1 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)      0.3 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)      0.3 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)      0.3 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(1,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,1)  2 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(1,3,1)      0.3 ; s ! Time constant for brake actuator L3
TLAG_BK(1,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(1,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,2)  2 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(1,3,2)      0.3 ; s ! Time constant for brake actuator R3
TLAG_BK(1,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  2 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,1,1)      0.3 ; s ! Time constant for brake actuator L4
TLAG_BK(2,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  2 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,1,2)      0.3 ; s ! Time constant for brake actuator R4
TLAG_BK(2,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1)  2 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(2,2,1)      0.3 ; s ! Time constant for brake actuator L5
TLAG_BK(2,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2)  2 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(2,2,2)      0.3 ; s ! Time constant for brake actuator R5
TLAG_BK(2,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1)  1 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(3,1,1)      0.3 ; s ! Time constant for brake actuator L6
TLAG_BK(3,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2)  1 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(3,1,2)      0.3 ; s ! Time constant for brake actuator R6
TLAG_BK(3,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R6 [I]

OPT_BK_DYN(3,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,1) 0 ! [D] Brake L7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,1)  2 ; N-m ! Bearing/brake friction, wheel L7
TC_BK(3,2,1)      0.3 ; s ! Time constant for brake actuator L7
TLAG_BK(3,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L7 [I]

OPT_BK_DYN(3,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,2) 0 ! [D] Brake R7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,2)  2 ; N-m ! Bearing/brake friction, wheel R7
TC_BK(3,2,2)      0.3 ; s ! Time constant for brake actuator R7
TLAG_BK(3,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R7 [I]

OPT_BK_DYN(3,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,3,1) 0 ! [D] Brake L8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,3,1)  2 ; N-m ! Bearing/brake friction, wheel L8
TC_BK(3,3,1)      0.3 ; s ! Time constant for brake actuator L8
TLAG_BK(3,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L8 [I]

OPT_BK_DYN(3,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,3,2) 0 ! [D] Brake R8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,3,2)  2 ; N-m ! Bearing/brake friction, wheel R8
TC_BK(3,3,2)      0.3 ; s ! Time constant for brake actuator R8
TLAG_BK(3,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R8 [I]

OPT_BK_DYN(4,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,1) 0 ! [D] Brake L9 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,1)  2 ; N-m ! Bearing/brake friction, wheel L9
TC_BK(4,1,1)      0.3 ; s ! Time constant for brake actuator L9
TLAG_BK(4,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L9 [I]

OPT_BK_DYN(4,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,2) 0 ! [D] Brake R9 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,2)  2 ; N-m ! Bearing/brake friction, wheel R9
TC_BK(4,1,2)      0.3 ; s ! Time constant for brake actuator R9
TLAG_BK(4,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R9 [I]

OPT_BK_DYN(4,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,1) 0 ! [D] Brake L10 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,1)  2 ; N-m ! Bearing/brake friction, wheel L10
TC_BK(4,2,1)      0.3 ; s ! Time constant for brake actuator L10
TLAG_BK(4,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L10 [I]

OPT_BK_DYN(4,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,2) 0 ! [D] Brake R10 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,2)  2 ; N-m ! Bearing/brake friction, wheel R10
TC_BK(4,2,2)      0.3 ; s ! Time constant for brake actuator R10
TLAG_BK(4,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R10 [I]

OPT_BK_DYN(5,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,1,1) 0 ! [D] Brake L11 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,1,1)  1 ; N-m ! Bearing/brake friction, wheel L11
TC_BK(5,1,1)      0.3 ; s ! Time constant for brake actuator L11
TLAG_BK(5,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L11 [I]

OPT_BK_DYN(5,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,1,2) 0 ! [D] Brake R11 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,1,2)  1 ; N-m ! Bearing/brake friction, wheel R11
TC_BK(5,1,2)      0.3 ; s ! Time constant for brake actuator R11
TLAG_BK(5,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R11 [I]

OPT_BK_DYN(5,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,2,1) 0 ! [D] Brake L12 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,2,1)  2 ; N-m ! Bearing/brake friction, wheel L12
TC_BK(5,2,1)      0.3 ; s ! Time constant for brake actuator L12
TLAG_BK(5,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L12 [I]

OPT_BK_DYN(5,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,2,2) 0 ! [D] Brake R12 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,2,2)  2 ; N-m ! Bearing/brake friction, wheel R12
TC_BK(5,2,2)      0.3 ; s ! Time constant for brake actuator R12
TLAG_BK(5,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R12 [I]

OPT_BK_DYN(5,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,3,1) 0 ! [D] Brake L13 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,3,1)  2 ; N-m ! Bearing/brake friction, wheel L13
TC_BK(5,3,1)      0.3 ; s ! Time constant for brake actuator L13
TLAG_BK(5,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L13 [I]

OPT_BK_DYN(5,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(5,3,2) 0 ! [D] Brake R13 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(5,3,2)  2 ; N-m ! Bearing/brake friction, wheel R13
TC_BK(5,3,2)      0.3 ; s ! Time constant for brake actuator R13
TLAG_BK(5,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R13 [I]

OPT_BK_DYN(6,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(6,1,1) 0 ! [D] Brake L14 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(6,1,1)  2 ; N-m ! Bearing/brake friction, wheel L14
TC_BK(6,1,1)      0.3 ; s ! Time constant for brake actuator L14
TLAG_BK(6,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L14 [I]

OPT_BK_DYN(6,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(6,1,2) 0 ! [D] Brake R14 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(6,1,2)  2 ; N-m ! Bearing/brake friction, wheel R14
TC_BK(6,1,2)      0.3 ; s ! Time constant for brake actuator R14
TLAG_BK(6,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R14 [I]

OPT_BK_DYN(6,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(6,2,1) 0 ! [D] Brake L15 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(6,2,1)  2 ; N-m ! Bearing/brake friction, wheel L15
TC_BK(6,2,1)      0.3 ; s ! Time constant for brake actuator L15
TLAG_BK(6,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L15 [I]

OPT_BK_DYN(6,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(6,2,2) 0 ! [D] Brake R15 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(6,2,2)  2 ; N-m ! Bearing/brake friction, wheel R15
TC_BK(6,2,2)      0.3 ; s ! Time constant for brake actuator R15
TLAG_BK(6,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R15 [I]

!------------------------------------------------------------------------------------
! TANDEM SUSPENSIONS
!------------------------------------------------------------------------------------
TANDEM_NAME(1,1)    1 ! [D] Tandem in unit 1 that connects axles 2 & 3
CFZ_MY_TAND(1,1)    0 ; 1/m ! Coefficient: Load transfer to front axle of this
                      ! tandem per unit of total wheel-spin torque applied to the
                      ! four wheels of this tandem
R_TAND_TRAIL_STATIC(1,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(1,1)    0.45 ; - ! Ratio: fraction of dynamic suspension load shared by the
                      ! other axle of this tandem; 0 -> no sharing; 1/2 -> full
                      ! sharing [I]

TANDEM_NAME(2,1)    2 ! [D] Tandem in unit 2 that connects axles 4 & 5
CFZ_MY_TAND(2,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(2,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(2,1)     0.5 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(3,1)    3 ! [D] Tandem in unit 3 that connects axles 7 & 8
CFZ_MY_TAND(3,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(3,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(3,1)    0.45 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(4,1)    4 ! [D] Tandem in unit 4 that connects axles 9 & 10
CFZ_MY_TAND(4,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(4,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(4,1)     0.5 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(5,1)    5 ! [D] Tandem in unit 5 that connects axles 12 & 13
CFZ_MY_TAND(5,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(5,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(5,1)    0.45 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(6,1)    6 ! [D] Tandem in unit 6 that connects axles 14 & 15
CFZ_MY_TAND(6,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(6,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(6,1)     0.5 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle request can be specified
! with the function THROTTLE_ENGINE.

POWERTRAIN_UNIT(1)  1 ! Vehicle unit with powertrain, vehicle 1
INSTALL_POWERTRAIN(1) 3 ! Powertrain type: 0 -> Simple, 1 -> front-axle drive, 2 ->
                        ! rear-axle drive, 3 -> 2-axle drive, 4 -> 3-axle drive, 5
                        ! -> 4-axle drive, 6 -> 5-axle drive, vehicle 1 [L]
! R_DRIVE_SC(1,1)   0 ; - ! Drive torque ratio: [this axle]/[total], vehicle 1 [I]
! R_DRIVE_SC(1,2) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 1 [I]
! R_DRIVE_SC(1,3) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 1 [I]

POWERTRAIN_UNIT(2)  3 ! Vehicle unit with powertrain, vehicle 2
INSTALL_POWERTRAIN(2) 3 ! Powertrain type, vehicle 2 [L]
! R_DRIVE_SC(2,1)   0 ; - ! Drive torque ratio: [this axle]/[total], vehicle 2 [I]
! R_DRIVE_SC(2,2) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 2 [I]
! R_DRIVE_SC(2,3) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 2 [I]

POWERTRAIN_UNIT(3)  5 ! Vehicle unit with powertrain, vehicle 3
INSTALL_POWERTRAIN(3) 3 ! Powertrain type, vehicle 3 [L]
! R_DRIVE_SC(3,1)   0 ; - ! Drive torque ratio: [this axle]/[total], vehicle 3 [I]
! R_DRIVE_SC(3,2) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 3 [I]
! R_DRIVE_SC(3,3) 0.5 ; - ! Drive torque ratio: [this axle]/[total], vehicle 3 [I]

OPT_HEV(1)          0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! power-split hybrid electric, 2 -> electric, 3 ->
                      ! range-extended electric (series hybrid), 4 -> parallel
                      ! hybrid electric, vehicle 1
OPT_THROTTLE_DELAY(1) 0 ! Apply lag to requested throttle using time constants: 0 ->
                        ! no, 1 -> yes
R_MDRIVE(1)         1 ; - ! Multiplier for driveshaft torque acting on engine body
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 1 [I]
VLOW_IW(1)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 1

! The powertrain differentials are specified with the following parameters and the
! function M_DIFF_VISC.

! NDIFF(1)          3 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(1,1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 1 [I]
OPT_LOCKED_DIFF(1,1) 0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 1 [I]
LOCKED_DIFF_DAMP(1,1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                          ! diff, vehicle 1 [I]
LOCKED_DIFF_K(1,1) 80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff, vehicle 1 [I]
R_EFF_F_DIFF(1,1) 0.99 ; - ! Forward efficiency of 1st drive axle diff, vehicle 1
                       ! [I]
R_EFF_R_DIFF(1,1) 0.99 ; - ! Reverse efficiency of 1st drive axle diff, vehicle 1
                       ! [I]
R_GEAR_DIFF(1,1)  4.4 ; - ! Gear ratio of 1st drive axle diff, vehicle 1 [I]
IDS(1,1)        0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft,
                      ! vehicle 1 [I]
IHS_L(1,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle
                      ! diff, vehicle 1 [I]
IHS_R(1,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff, vehicle 1 [I]
OPT_CLUTCH_DIFF(1,1) 0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control. When 0 or 2, functions CLUTCH_CON_DIFF and
                       ! CLUTCH_TORQUE_DIFF are used. When 2, CLUTCH_TORQUE_DIFF2
                       ! is also used., vehicle 1 [I]
OPT_TWIN_CLUTCH(1,1) 0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 ->
                       ! yes. If 1, then functions CLUTCH_TWIN and M_TWIN are
                       ! used., vehicle 1 [I]

OPT_DIFF_INTERNAL(1,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 1 [I]
OPT_LOCKED_DIFF(1,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 1 [I]
LOCKED_DIFF_DAMP(1,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 1 [I]
LOCKED_DIFF_K(1,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 1 [I]
R_EFF_F_DIFF(1,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_EFF_R_DIFF(1,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_GEAR_DIFF(1,2)  4.4 ; - ! Gear ratio of 2nd drive axle diff, vehicle 1 [I]
IDS(1,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 1 [I]
IHS_L(1,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
IHS_R(1,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
OPT_CLUTCH_DIFF(1,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 1 [I]
OPT_TWIN_CLUTCH(1,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 1 [I]

OPT_DIFF_INTERNAL(1,3) 1 ! Inter-axle diff for axles 1,2 model: 1 -> internal, 0 ->
                         ! external, vehicle 1 [I]
OPT_LOCKED_DIFF(1,3) 0 ! Is the inter-axle diff for axles 1,2 locked? 0 -> no, 1 ->
                       ! yes, vehicle 1 [I]
R_REAR_BIAS(1,3)  0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for axles 1,2, vehicle 1 [I]
LOCKED_DIFF_DAMP(1,3) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                          ! for axles 1,2, vehicle 1 [I]
LOCKED_DIFF_K(1,3) 80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for axles 1,2, vehicle 1 [I]
R_EFF_F_DIFF(1,3) 0.99 ; - ! Forward efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 1 [I]
R_EFF_R_DIFF(1,3) 0.99 ; - ! Reverse efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 1 [I]
R_GEAR_DIFF(1,3)    1 ; - ! Gear ratio of inter-axle diff for axles 1,2, vehicle 1
                      ! [I]
IDS(1,3)            0 ; kg-m2 ! [D] Spin inertia of inter-axle diff for axles 1,2
                      ! input shaft, vehicle 1 [I]
OPT_CLUTCH_DIFF(1,3) 0 ! [D] Clutch control for inter-axle diff for axles 1,2: 0 ->
                       ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 1 [I]

OPT_HEV(2)          0 ! Propulsion type, vehicle 2
OPT_THROTTLE_DELAY(2) 0 ! Apply lag to requested throttle using time constants: 0 ->
                        ! no, 1 -> yes
R_MDRIVE(2)         1 ; - ! Multiplier for driveshaft torque acting on engine body
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 2 [I]
VLOW_IW(2)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 2

! NDIFF(2)          3 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(2,1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,1) 0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                          ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,1) 80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,1) 0.99 ; - ! Forward efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,1) 0.99 ; - ! Reverse efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,1)  4.4 ; - ! Gear ratio of 1st drive axle diff, vehicle 2 [I]
IDS(2,1)        0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,1) 0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,1) 0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,2)  4.4 ; - ! Gear ratio of 2nd drive axle diff, vehicle 2 [I]
IDS(2,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,3) 1 ! Inter-axle diff for axles 1,2 model: 1 -> internal, 0 ->
                         ! external, vehicle 2 [I]
OPT_LOCKED_DIFF(2,3) 0 ! Is the inter-axle diff for axles 1,2 locked? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]
R_REAR_BIAS(2,3)  0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for axles 1,2, vehicle 2 [I]
LOCKED_DIFF_DAMP(2,3) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                          ! for axles 1,2, vehicle 2 [I]
LOCKED_DIFF_K(2,3) 80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for axles 1,2, vehicle 2 [I]
R_EFF_F_DIFF(2,3) 0.99 ; - ! Forward efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 2 [I]
R_EFF_R_DIFF(2,3) 0.99 ; - ! Reverse efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 2 [I]
R_GEAR_DIFF(2,3)    1 ; - ! Gear ratio of inter-axle diff for axles 1,2, vehicle 2
                      ! [I]
IDS(2,3)            0 ; kg-m2 ! [D] Spin inertia of inter-axle diff for axles 1,2
                      ! input shaft, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,3) 0 ! [D] Clutch control for inter-axle diff for axles 1,2: 0 ->
                       ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]

OPT_HEV(3)          0 ! Propulsion type, vehicle 3
OPT_THROTTLE_DELAY(3) 0 ! Apply lag to requested throttle using time constants: 0 ->
                        ! no, 1 -> yes
R_MDRIVE(3)         1 ; - ! Multiplier for driveshaft torque acting on engine body
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 3 [I]
VLOW_IW(3)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 3

! NDIFF(3)          3 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(3,1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 3 [I]
OPT_LOCKED_DIFF(3,1) 0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 3 [I]
LOCKED_DIFF_DAMP(3,1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                          ! diff, vehicle 3 [I]
LOCKED_DIFF_K(3,1) 80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff, vehicle 3 [I]
R_EFF_F_DIFF(3,1) 0.99 ; - ! Forward efficiency of 1st drive axle diff, vehicle 3
                       ! [I]
R_EFF_R_DIFF(3,1) 0.99 ; - ! Reverse efficiency of 1st drive axle diff, vehicle 3
                       ! [I]
R_GEAR_DIFF(3,1)  4.4 ; - ! Gear ratio of 1st drive axle diff, vehicle 3 [I]
IDS(3,1)        0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft,
                      ! vehicle 3 [I]
IHS_L(3,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle
                      ! diff, vehicle 3 [I]
IHS_R(3,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff, vehicle 3 [I]
OPT_CLUTCH_DIFF(3,1) 0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 3 [I]
OPT_TWIN_CLUTCH(3,1) 0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 3 [I]

OPT_DIFF_INTERNAL(3,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 3 [I]
OPT_LOCKED_DIFF(3,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 3 [I]
LOCKED_DIFF_DAMP(3,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 3 [I]
LOCKED_DIFF_K(3,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 3 [I]
R_EFF_F_DIFF(3,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 3
                       ! [I]
R_EFF_R_DIFF(3,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 3
                       ! [I]
R_GEAR_DIFF(3,2)  4.4 ; - ! Gear ratio of 2nd drive axle diff, vehicle 3 [I]
IDS(3,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 3 [I]
IHS_L(3,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 3 [I]
IHS_R(3,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 3 [I]
OPT_CLUTCH_DIFF(3,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 3 [I]
OPT_TWIN_CLUTCH(3,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 3 [I]

OPT_DIFF_INTERNAL(3,3) 1 ! Inter-axle diff for axles 1,2 model: 1 -> internal, 0 ->
                         ! external, vehicle 3 [I]
OPT_LOCKED_DIFF(3,3) 0 ! Is the inter-axle diff for axles 1,2 locked? 0 -> no, 1 ->
                       ! yes, vehicle 3 [I]
R_REAR_BIAS(3,3)  0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for axles 1,2, vehicle 3 [I]
LOCKED_DIFF_DAMP(3,3) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                          ! for axles 1,2, vehicle 3 [I]
LOCKED_DIFF_K(3,3) 80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for axles 1,2, vehicle 3 [I]
R_EFF_F_DIFF(3,3) 0.99 ; - ! Forward efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 3 [I]
R_EFF_R_DIFF(3,3) 0.99 ; - ! Reverse efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 3 [I]
R_GEAR_DIFF(3,3)    1 ; - ! Gear ratio of inter-axle diff for axles 1,2, vehicle 3
                      ! [I]
IDS(3,3)            0 ; kg-m2 ! [D] Spin inertia of inter-axle diff for axles 1,2
                      ! input shaft, vehicle 3 [I]
OPT_CLUTCH_DIFF(3,3) 0 ! [D] Clutch control for inter-axle diff for axles 1,2: 0 ->
                       ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 3 [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
! Behavior of an internal-combustion engine is specified with the Configurable
! Functions MENGINE and FUEL_RATE, along with the following parameters.

INSTALL_ENGINE(1)     ! VS Command to install an engine, vehicle 1
INSTALL_ENGINE(2)     ! VS Command to install an engine, vehicle 2
INSTALL_ENGINE(3)     ! VS Command to install an engine, vehicle 3

OPT_ENGINE_INTERNAL(1) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(1) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
AV_ENG_IDLE(1)    800 ; rpm ! Engine idle speed used for initialization [I]
AV_ENG_LOW_CLUTCH(1) 720 ; rpm ! Engine low speed limit: disengage clutch when
                         ! stopping
ENGINE_ESC_PG(1)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(1)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(1) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(1)          2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter
TH_MIN_CL_ACCEL(1) 0.05 ; - ! [D] Minimum throttle for clutch to re-engage to
                        ! accelerate from stop

OPT_ENGINE_INTERNAL(2) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(2) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
AV_ENG_IDLE(2)    800 ; rpm ! Engine idle speed used for initialization [I]
AV_ENG_LOW_CLUTCH(2) 720 ; rpm ! Engine low speed limit: disengage clutch when
                         ! stopping
ENGINE_ESC_PG(2)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(2)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(2) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(2)          2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter
TH_MIN_CL_ACCEL(2) 0.05 ; - ! [D] Minimum throttle for clutch to re-engage to
                        ! accelerate from stop

OPT_ENGINE_INTERNAL(3) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(3) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
AV_ENG_IDLE(3)    800 ; rpm ! Engine idle speed used for initialization [I]
AV_ENG_LOW_CLUTCH(3) 720 ; rpm ! Engine low speed limit: disengage clutch when
                         ! stopping
ENGINE_ESC_PG(3)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(3)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(3) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(3)          2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(3) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter
TH_MIN_CL_ACCEL(3) 0.05 ; - ! [D] Minimum throttle for clutch to re-engage to
                        ! accelerate from stop

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters to specify a hyraulic torque converted or a mechanical
! clutch.

INSTALL_TORQUE_TRANSFER_DEVICE(1)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 1
INSTALL_TORQUE_TRANSFER_DEVICE(2)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 2
INSTALL_TORQUE_TRANSFER_DEVICE(3)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 3

OPT_CLUTCH(1)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch. The torque
                      ! converter options (0 and 2) use functions INV_CAP_TC and
                      ! RM_TC. Option 2 also uses LOCK_AT and UNLOCK_AT. [I]
OPT_CLUTCH_MODE(1)  1 ! [D] Clutch control mode: 0 -> open-loop with function
                      ! CLUTCH_CONTROL, 1 -> closed-loop (based on shifting and
                      ! function CLUTCH_TORQUE) [I]
OPT_CLUTCH_DELAY(1) 1 ! Apply lag to requested clutch torque using time constants: 0
                      ! -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(1) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(1) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(1) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_START(1)       0 ; s ! [D] Time elapsed after shift starts when clutch control
                      ! starts [I]
T_CL_DISENGAGE(1) 0.1 ; s ! [D] Time elapsed when clutch is fully disengaged [I]
T_CL_PRESS_TOTAL(1) 0.3 ; s ! [D] Time elapsed when clutch starts re-engaging [I]
T_CL_HALF_HOLD(1) 0.1 ; s ! [D] Time holding the clutch at half pressure [I]
T_CL_RE_ENGAGE(1) 0.5 ; s ! [D] Time elapsed when clutch is fully re-engaged [I]
! T_CL_HALF_TOTAL(1) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(1) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_GEAR_LAG(1)     0.1 ; s ! [D] Time elapsed after shift starts when shift is
                      ! complete
T_TH_START(1)       0 ; s ! [D] Time elapsed after shift starts when throttle
                      ! control starts [I]
T_TH_ZERO(1)      0.1 ; s ! [D] Time elapsed when throttle drops to zero [I]
T_TH_ZERO_TOTAL(1) 0.3 ; s ! [D] Time elapsed when throttle starts to return [I]
T_TH_RETURNED(1)  0.4 ; s ! [D] Time elapsed when throttle has returned to pre-shift
                      ! level [I]
! T_TH_ZERO_HOLD(1) 0.2 ; s ! CALC -- Time spent holding zero throttle [I]
! T_TH_RETURN(1)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
VLOW_CLUTCH(1)      5 ; km/h ! [D] Disengage the clutch when effective wheel speeds
                      ! are below this limit when braking or resting [I]

OPT_CLUTCH(2)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch. The torque
                      ! converter options (0 and 2) use functions INV_CAP_TC and
                      ! RM_TC. Option 2 also uses LOCK_AT and UNLOCK_AT. [I]
OPT_CLUTCH_MODE(2)  1 ! Clutch control mode: 0 -> open-loop with function
                      ! CLUTCH_CONTROL, 1 -> closed-loop (based on shifting and
                      ! function CLUTCH_TORQUE) [I]
OPT_CLUTCH_DELAY(2) 1 ! Apply lag to requested clutch torque using time constants: 0
                      ! -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(2) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(2) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(2) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_START(2)       0 ; s ! Time elapsed after shift starts when clutch control
                      ! starts [I]
T_CL_DISENGAGE(2) 0.1 ; s ! Time elapsed when clutch is fully disengaged [I]
T_CL_PRESS_TOTAL(2) 0.3 ; s ! Time elapsed when clutch starts re-engaging [I]
T_CL_HALF_HOLD(2) 0.1 ; s ! Time holding the clutch at half pressure [I]
T_CL_RE_ENGAGE(2) 0.5 ; s ! Time elapsed when clutch is fully re-engaged [I]
! T_CL_HALF_TOTAL(2) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(2) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_GEAR_LAG(2)     0.1 ; s ! Time elapsed after shift starts when shift is complete
T_TH_START(2)       0 ; s ! Time elapsed after shift starts when throttle control
                      ! starts [I]
T_TH_ZERO(2)      0.1 ; s ! Time elapsed when throttle drops to zero [I]
T_TH_ZERO_TOTAL(2) 0.3 ; s ! Time elapsed when throttle starts to return [I]
T_TH_RETURNED(2)  0.4 ; s ! Time elapsed when throttle has returned to pre-shift
                      ! level [I]
! T_TH_ZERO_HOLD(2) 0.2 ; s ! CALC -- Time spent holding zero throttle [I]
! T_TH_RETURN(2)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
VLOW_CLUTCH(2)      5 ; km/h ! Disengage the clutch when effective wheel speeds are
                      ! below this limit when braking or resting [I]

OPT_CLUTCH(3)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch. The torque
                      ! converter options (0 and 2) use functions INV_CAP_TC and
                      ! RM_TC. Option 2 also uses LOCK_AT and UNLOCK_AT. [I]
OPT_CLUTCH_MODE(3)  1 ! Clutch control mode: 0 -> open-loop with function
                      ! CLUTCH_CONTROL, 1 -> closed-loop (based on shifting and
                      ! function CLUTCH_TORQUE) [I]
OPT_CLUTCH_DELAY(3) 1 ! Apply lag to requested clutch torque using time constants: 0
                      ! -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(3) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(3) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(3) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_START(3)       0 ; s ! Time elapsed after shift starts when clutch control
                      ! starts [I]
T_CL_DISENGAGE(3) 0.1 ; s ! Time elapsed when clutch is fully disengaged [I]
T_CL_PRESS_TOTAL(3) 0.3 ; s ! Time elapsed when clutch starts re-engaging [I]
T_CL_HALF_HOLD(3) 0.1 ; s ! Time holding the clutch at half pressure [I]
T_CL_RE_ENGAGE(3) 0.5 ; s ! Time elapsed when clutch is fully re-engaged [I]
! T_CL_HALF_TOTAL(3) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(3) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_GEAR_LAG(3)     0.1 ; s ! Time elapsed after shift starts when shift is complete
T_TH_START(3)       0 ; s ! Time elapsed after shift starts when throttle control
                      ! starts [I]
T_TH_ZERO(3)      0.1 ; s ! Time elapsed when throttle drops to zero [I]
T_TH_ZERO_TOTAL(3) 0.3 ; s ! Time elapsed when throttle starts to return [I]
T_TH_RETURNED(3)  0.4 ; s ! Time elapsed when throttle has returned to pre-shift
                      ! level [I]
! T_TH_ZERO_HOLD(3) 0.2 ; s ! CALC -- Time spent holding zero throttle [I]
! T_TH_RETURN(3)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
VLOW_CLUTCH(3)      5 ; km/h ! Disengage the clutch when effective wheel speeds are
                      ! below this limit when braking or resting [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and Configurable
! Functions noted below. Transmission controller mode can be specified with the
! open-loop function MODE_TRANS and transmission gear can be specified with the
! open-loop function GEAR_TRANS.

INSTALL_TRANSMISSION(1)  ! VS Command to install a transmission, vehicle 1
INSTALL_TRANSMISSION(2)  ! VS Command to install a transmission, vehicle 2
INSTALL_TRANSMISSION(3)  ! VS Command to install a transmission, vehicle 3

OPT_TRANS_INTERNAL(1) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(1) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model. Option 1 uses functions DOWNSHIFT_TRANS and
                          ! UPSHIFT_TRANS. Option 2 uses functions R_GEAR_CVT,
                          ! R_EFF_CVT_F, and R_EFF_CVT_R. [I]
LIMIT_DOWNSHIFT(1)  1 ! [D] Limit to number of gears covered in a downshift
LIMIT_UPSHIFT(1)    1 ! [D] Limit to number of gears covered in an upshift
NGEARS(1)          18 ! Number of forward gears in transmission [I]
OPT_SHIFT_INTERNAL(1) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]

DRIVELINE_FREQ(1)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, but not including
                      ! the engine. Does not include effect of nonlinear function
                      ! M_TRANS_ROT. [I]
DRIVELINE_ZETA(1) 0.9 ; - ! Damping ratio of entire driveline. Does not include
                      ! effect of nonlinear function M_TRANS_AV. [I]
ITC_OUTPUT_SHAFT(1) 0.5 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(1)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(1)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(1) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(1) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(1) -12.85 ; - ! Reverse-gear ratio of trans (should be negative)

ITR(1,1)          0.2 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 1
R_EFF_TR_F(1,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,1)   14.4 ; - ! 1st-gear ratio of transmission, vehicle 1

ITR(1,2)          0.2 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,2)  12.29 ; - ! 2nd-gear ratio of transmission, vehicle 1

ITR(1,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,3)   8.56 ; - ! 3rd-gear ratio of transmission, vehicle 1

ITR(1,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,4)    7.3 ; - ! 4th-gear ratio of transmission, vehicle 1

ITR(1,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,5)   6.05 ; - ! 5th-gear ratio of transmission, vehicle 1

ITR(1,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,6)   5.16 ; - ! 6th-gear ratio of transmission, vehicle 1

ITR(1,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,7)   4.38 ; - ! 7th-gear ratio of transmission, vehicle 1

ITR(1,8)          0.2 ; kg-m2 ! 8th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,8)  0.92 ; - ! 8th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,8)  0.92 ; - ! 8th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,8)   3.74 ; - ! 8th-gear ratio of transmission, vehicle 1

ITR(1,9)          0.2 ; kg-m2 ! 9th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,9)  0.92 ; - ! 9th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,9)  0.92 ; - ! 9th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,9)    3.2 ; - ! 9th-gear ratio of transmission, vehicle 1

ITR(1,10)         0.2 ; kg-m2 ! 10th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,10) 0.92 ; - ! 10th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,10) 0.92 ; - ! 10th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,10)  2.73 ; - ! 10th-gear ratio of transmission, vehicle 1

ITR(1,11)         0.2 ; kg-m2 ! 11th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,11) 0.92 ; - ! 11th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,11) 0.92 ; - ! 11th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,11)  2.29 ; - ! 11th-gear ratio of transmission, vehicle 1

ITR(1,12)         0.2 ; kg-m2 ! 12th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,12) 0.92 ; - ! 12th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,12) 0.92 ; - ! 12th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,12)  1.95 ; - ! 12th-gear ratio of transmission, vehicle 1

ITR(1,13)         0.2 ; kg-m2 ! 13th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,13) 0.92 ; - ! 13th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,13) 0.92 ; - ! 13th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,13)  1.62 ; - ! 13th-gear ratio of transmission, vehicle 1

ITR(1,14)         0.2 ; kg-m2 ! 14th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,14) 0.92 ; - ! 14th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,14) 0.92 ; - ! 14th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,14)  1.38 ; - ! 14th-gear ratio of transmission, vehicle 1

ITR(1,15)         0.2 ; kg-m2 ! 15th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,15) 0.92 ; - ! 15th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,15) 0.92 ; - ! 15th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,15)  1.17 ; - ! 15th-gear ratio of transmission, vehicle 1

ITR(1,16)         0.2 ; kg-m2 ! 16th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,16) 0.92 ; - ! 16th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,16) 0.92 ; - ! 16th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,16)     1 ; - ! 16th-gear ratio of transmission, vehicle 1

ITR(1,17)         0.2 ; kg-m2 ! 17th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,17) 0.92 ; - ! 17th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,17) 0.92 ; - ! 17th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,17)  0.86 ; - ! 17th-gear ratio of transmission, vehicle 1

ITR(1,18)         0.2 ; kg-m2 ! 18th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,18) 0.92 ; - ! 18th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,18) 0.92 ; - ! 18th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,18)  0.73 ; - ! 18th-gear ratio of transmission, vehicle 1

OPT_TRANS_INTERNAL(2) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(2) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model. Option 1 uses functions DOWNSHIFT_TRANS and
                          ! UPSHIFT_TRANS. Option 2 uses functions R_GEAR_CVT,
                          ! R_EFF_CVT_F, and R_EFF_CVT_R. [I]
LIMIT_DOWNSHIFT(2)  1 ! [D] Limit to number of gears covered in a downshift
LIMIT_UPSHIFT(2)    1 ! [D] Limit to number of gears covered in an upshift
NGEARS(2)          18 ! Number of forward gears in transmission [I]
OPT_SHIFT_INTERNAL(2) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]

DRIVELINE_FREQ(2)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, but not including
                      ! the engine. Does not include effect of nonlinear function
                      ! M_TRANS_ROT. [I]
DRIVELINE_ZETA(2) 0.9 ; - ! Damping ratio of entire driveline. Does not include
                      ! effect of nonlinear function M_TRANS_AV. [I]
ITC_OUTPUT_SHAFT(2) 0.5 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(2)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(2)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(2) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(2) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(2) -12.85 ; - ! Reverse-gear ratio of trans (should be negative)

ITR(2,1)          0.2 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 2
R_EFF_TR_F(2,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,1)   14.4 ; - ! 1st-gear ratio of transmission, vehicle 2

ITR(2,2)          0.2 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,2)  12.29 ; - ! 2nd-gear ratio of transmission, vehicle 2

ITR(2,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,3)   8.56 ; - ! 3rd-gear ratio of transmission, vehicle 2

ITR(2,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,4)    7.3 ; - ! 4th-gear ratio of transmission, vehicle 2

ITR(2,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,5)   6.05 ; - ! 5th-gear ratio of transmission, vehicle 2

ITR(2,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,6)   5.16 ; - ! 6th-gear ratio of transmission, vehicle 2

ITR(2,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,7)   4.38 ; - ! 7th-gear ratio of transmission, vehicle 2

ITR(2,8)          0.2 ; kg-m2 ! 8th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,8)  0.92 ; - ! 8th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,8)  0.92 ; - ! 8th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,8)   3.74 ; - ! 8th-gear ratio of transmission, vehicle 2

ITR(2,9)          0.2 ; kg-m2 ! 9th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,9)  0.92 ; - ! 9th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,9)  0.92 ; - ! 9th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,9)    3.2 ; - ! 9th-gear ratio of transmission, vehicle 2

ITR(2,10)         0.2 ; kg-m2 ! 10th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,10) 0.92 ; - ! 10th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,10) 0.92 ; - ! 10th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,10)  2.73 ; - ! 10th-gear ratio of transmission, vehicle 2

ITR(2,11)         0.2 ; kg-m2 ! 11th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,11) 0.92 ; - ! 11th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,11) 0.92 ; - ! 11th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,11)  2.29 ; - ! 11th-gear ratio of transmission, vehicle 2

ITR(2,12)         0.2 ; kg-m2 ! 12th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,12) 0.92 ; - ! 12th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,12) 0.92 ; - ! 12th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,12)  1.95 ; - ! 12th-gear ratio of transmission, vehicle 2

ITR(2,13)         0.2 ; kg-m2 ! 13th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,13) 0.92 ; - ! 13th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,13) 0.92 ; - ! 13th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,13)  1.62 ; - ! 13th-gear ratio of transmission, vehicle 2

ITR(2,14)         0.2 ; kg-m2 ! 14th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,14) 0.92 ; - ! 14th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,14) 0.92 ; - ! 14th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,14)  1.38 ; - ! 14th-gear ratio of transmission, vehicle 2

ITR(2,15)         0.2 ; kg-m2 ! 15th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,15) 0.92 ; - ! 15th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,15) 0.92 ; - ! 15th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,15)  1.17 ; - ! 15th-gear ratio of transmission, vehicle 2

ITR(2,16)         0.2 ; kg-m2 ! 16th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,16) 0.92 ; - ! 16th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,16) 0.92 ; - ! 16th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,16)     1 ; - ! 16th-gear ratio of transmission, vehicle 2

ITR(2,17)         0.2 ; kg-m2 ! 17th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,17) 0.92 ; - ! 17th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,17) 0.92 ; - ! 17th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,17)  0.86 ; - ! 17th-gear ratio of transmission, vehicle 2

ITR(2,18)         0.2 ; kg-m2 ! 18th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,18) 0.92 ; - ! 18th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,18) 0.92 ; - ! 18th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,18)  0.73 ; - ! 18th-gear ratio of transmission, vehicle 2

OPT_TRANS_INTERNAL(3) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(3) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model. Option 1 uses functions DOWNSHIFT_TRANS and
                          ! UPSHIFT_TRANS. Option 2 uses functions R_GEAR_CVT,
                          ! R_EFF_CVT_F, and R_EFF_CVT_R. [I]
LIMIT_DOWNSHIFT(3)  1 ! [D] Limit to number of gears covered in a downshift
LIMIT_UPSHIFT(3)    1 ! [D] Limit to number of gears covered in an upshift
NGEARS(3)          18 ! Number of forward gears in transmission [I]
OPT_SHIFT_INTERNAL(3) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]

DRIVELINE_FREQ(3)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, but not including
                      ! the engine. Does not include effect of nonlinear function
                      ! M_TRANS_ROT. [I]
DRIVELINE_ZETA(3) 0.9 ; - ! Damping ratio of entire driveline. Does not include
                      ! effect of nonlinear function M_TRANS_AV. [I]
ITC_OUTPUT_SHAFT(3) 0.5 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(3)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(3)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(3) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(3) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(3) -12.85 ; - ! Reverse-gear ratio of trans (should be negative)

ITR(3,1)          0.2 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 3
R_EFF_TR_F(3,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,1)   14.4 ; - ! 1st-gear ratio of transmission, vehicle 3

ITR(3,2)          0.2 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,2)  12.29 ; - ! 2nd-gear ratio of transmission, vehicle 3

ITR(3,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,3)   8.56 ; - ! 3rd-gear ratio of transmission, vehicle 3

ITR(3,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,4)    7.3 ; - ! 4th-gear ratio of transmission, vehicle 3

ITR(3,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,5)   6.05 ; - ! 5th-gear ratio of transmission, vehicle 3

ITR(3,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,6)   5.16 ; - ! 6th-gear ratio of transmission, vehicle 3

ITR(3,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,7)   4.38 ; - ! 7th-gear ratio of transmission, vehicle 3

ITR(3,8)          0.2 ; kg-m2 ! 8th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,8)  0.92 ; - ! 8th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,8)  0.92 ; - ! 8th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,8)   3.74 ; - ! 8th-gear ratio of transmission, vehicle 3

ITR(3,9)          0.2 ; kg-m2 ! 9th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,9)  0.92 ; - ! 9th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,9)  0.92 ; - ! 9th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,9)    3.2 ; - ! 9th-gear ratio of transmission, vehicle 3

ITR(3,10)         0.2 ; kg-m2 ! 10th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,10) 0.92 ; - ! 10th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,10) 0.92 ; - ! 10th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,10)  2.73 ; - ! 10th-gear ratio of transmission, vehicle 3

ITR(3,11)         0.2 ; kg-m2 ! 11th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,11) 0.92 ; - ! 11th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,11) 0.92 ; - ! 11th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,11)  2.29 ; - ! 11th-gear ratio of transmission, vehicle 3

ITR(3,12)         0.2 ; kg-m2 ! 12th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,12) 0.92 ; - ! 12th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,12) 0.92 ; - ! 12th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,12)  1.95 ; - ! 12th-gear ratio of transmission, vehicle 3

ITR(3,13)         0.2 ; kg-m2 ! 13th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,13) 0.92 ; - ! 13th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,13) 0.92 ; - ! 13th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,13)  1.62 ; - ! 13th-gear ratio of transmission, vehicle 3

ITR(3,14)         0.2 ; kg-m2 ! 14th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,14) 0.92 ; - ! 14th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,14) 0.92 ; - ! 14th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,14)  1.38 ; - ! 14th-gear ratio of transmission, vehicle 3

ITR(3,15)         0.2 ; kg-m2 ! 15th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,15) 0.92 ; - ! 15th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,15) 0.92 ; - ! 15th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,15)  1.17 ; - ! 15th-gear ratio of transmission, vehicle 3

ITR(3,16)         0.2 ; kg-m2 ! 16th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,16) 0.92 ; - ! 16th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,16) 0.92 ; - ! 16th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,16)     1 ; - ! 16th-gear ratio of transmission, vehicle 3

ITR(3,17)         0.2 ; kg-m2 ! 17th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,17) 0.92 ; - ! 17th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,17) 0.92 ; - ! 17th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,17)  0.86 ; - ! 17th-gear ratio of transmission, vehicle 3

ITR(3,18)         0.2 ; kg-m2 ! 18th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,18) 0.92 ; - ! 18th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,18) 0.92 ; - ! 18th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,18)  0.73 ; - ! 18th-gear ratio of transmission, vehicle 3

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

OPT_SL_METHOD       1 ! [D] Use curvature in iteration for S-L from X-Y? 1 -> yes, 0
                      ! -> no
TOL_SL_METHOD       1 ; mm ! [D] Stop iteration if X-Y from S-L solution is no
                      ! further from requested X-Y than this
! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID(1)  1 ! ROAD_ID during initialization, vehicle 1 [I]
CURRENT_ROAD_ID(2)  1 ! [D] ROAD_ID during initialization, vehicle 2 [I]
CURRENT_ROAD_ID(3)  1 ! [D] ROAD_ID during initialization, vehicle 3 [I]

ROAD_ID(1)          1 ; Brake Distance Test Road
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             3 ! Number of LTARG datasets that are used in this run

PATH_ID_DM(1)       1 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(1)      1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0), vehicle 1
                      ! [I]
OPT_INIT_PATH(1)    0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION(1)   -1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station, vehicle 1 [I]

OPT_DM(1)           3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point, vehicle 1 [I]
OPT_DRIVER_ACTION(1) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore calculated Steer_DM [I]
OPT_STR_BY_TRQ(1)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(1)    720 ; deg ! Limit steering wheel angle for DM, vehicle 1
AV_SW_MAX_DM(1)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 1
VLOW_DM(1)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(1)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(1)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(1)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(1)          0 ; mm ! [D] Local Y coordinate of DM ref. point
OPT_DM_AUX(1)       0 ! [D] Activate auxiliary path follower? 0 -> no, 1 -> yes [I]


PATH_ID_DM(2)       1 ! [D] PATH_ID of the DM reference path [I]
LTARG_ID_DM(2)      2 ! LTARG_ID of LTARG for the DM, vehicle 2 [I]
OPT_INIT_PATH(2)    0 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_DIRECTION(2)   -1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 2 [I]

OPT_DM(2)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 2 [I]
OPT_DRIVER_ACTION(2) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore calculated Steer_DM [I]
OPT_STR_BY_TRQ(2)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(2)    720 ; deg ! Limit steering wheel angle for DM, vehicle 2
AV_SW_MAX_DM(2)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 2
VLOW_DM(2)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(2)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(2)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(2)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(2)          0 ; mm ! [D] Local Y coordinate of DM ref. point
OPT_DM_AUX(2)       0 ! [D] Activate auxiliary path follower? 0 -> no, 1 -> yes [I]


PATH_ID_DM(3)       1 ! [D] PATH_ID of the DM reference path [I]
LTARG_ID_DM(3)      3 ! LTARG_ID of LTARG for the DM, vehicle 3 [I]
OPT_INIT_PATH(3)    0 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_DIRECTION(3)   -1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 3 [I]

OPT_DM(3)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 3 [I]
OPT_DRIVER_ACTION(3) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore calculated Steer_DM [I]
OPT_STR_BY_TRQ(3)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(3)    720 ; deg ! Limit steering wheel angle for DM, vehicle 3
AV_SW_MAX_DM(3)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 3
VLOW_DM(3)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(3)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(3)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(3)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(3)          0 ; mm ! [D] Local Y coordinate of DM ref. point
OPT_DM_AUX(3)       0 ! [D] Activate auxiliary path follower? 0 -> no, 1 -> yes [I]

! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      5 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC(1)           4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd, vehicle 1 [I]
OPT_AUTO_RESET_IC(1) 1 ! [D] Reset integral of speed error Vx_Err when Vx_Err
                       ! changes sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0
                       ! -> no, vehicle 1
OPT_SC_3D(1)        1 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL(1)     1 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING(1) 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018(1)      0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC(1)      1 ! SPEED_TARGET_ID for speed controller, vehicle 1 [I]
BK_PERF_SC(1)     1.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(1)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(1) 8 ; m ! Speed controller: length of path used to calculate
                       ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP(1)         2 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(1)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(1)         1 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(1)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(1) 0 ; m ! Speed controller: path preview start (distance in
                         ! front of sprung mass origin), vehicle 1 [I]
SPEED_PREVIEW_STEP(1) 4 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(1)  1 ; m ! [D] Integral control deadband for auto reset

OPT_SC(2)           3 ! Speed controller option: 0 - 5, vehicle 2 [I]
OPT_AUTO_RESET_IC(2) 1 ! [D] Auto-reset integral of speed error Vx_Err?, vehicle 2
OPT_BK_SC(2)        1 ! Allow SC to use brakes?
OPT_SC_ENGINE_BRAKING(2) 1 ! Use engine braking in SC?
OPT_SC_2018(2)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(2)      3 ! SPEED_TARGET_ID for speed controller, vehicle 2 [I]
BK_PERF_SC(2)     1.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(2)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP(2)         2 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(2)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(2)         1 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC(2)  1 ; m ! [D] Integral control deadband for auto reset

OPT_SC(3)           3 ! Speed controller option: 0 - 5, vehicle 3 [I]
OPT_AUTO_RESET_IC(3) 1 ! [D] Auto-reset integral of speed error Vx_Err?, vehicle 3
OPT_BK_SC(3)        1 ! Allow SC to use brakes?
OPT_SC_ENGINE_BRAKING(3) 1 ! Use engine braking in SC?
OPT_SC_2018(3)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(3)      5 ! SPEED_TARGET_ID for speed controller, vehicle 3 [I]
BK_PERF_SC(3)     1.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(3)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP(3)         2 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(3)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(3)         1 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC(3)  1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,3)   2 ! ABS control option, unit 1, axle 3
ABS_SLIP_ON(1,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   2 ! ABS control option, unit 3, axle 1
ABS_SLIP_ON(3,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,2)   2 ! ABS control option, unit 3, axle 2
ABS_SLIP_ON(3,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,3)   2 ! ABS control option, unit 3, axle 3
ABS_SLIP_ON(3,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,1)   2 ! ABS control option, unit 4, axle 1
ABS_SLIP_ON(4,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,2)   2 ! ABS control option, unit 4, axle 2
ABS_SLIP_ON(4,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(5,1)   2 ! ABS control option, unit 5, axle 1
ABS_SLIP_ON(5,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(5,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(5,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(5,2)   2 ! ABS control option, unit 5, axle 2
ABS_SLIP_ON(5,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(5,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(5,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(5,3)   2 ! ABS control option, unit 5, axle 3
ABS_SLIP_ON(5,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(5,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(5,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(6,1)   2 ! ABS control option, unit 6, axle 1
ABS_SLIP_ON(6,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(6,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(6,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(6,2)   2 ! ABS control option, unit 6, axle 2
ABS_SLIP_ON(6,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(6,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(6,2)       6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           3 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      3 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; Platooning Sensor
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 0 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 0 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 25 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)      1000 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      2900 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(2)      2 ; Platooning Sensor
IOBJECT_SENSOR(2)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(2)     3 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(2) 0 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(2) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(2) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(2) 0 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(2)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(2) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(2) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(2) 25 ; m ! Range limit (set 0 for no limit)
X_SENSOR(2)      1000 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(2)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(2)      2900 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(2)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(2) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(2)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(3)      3 ; Platooning Sensor
IOBJECT_SENSOR(3)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(3)     5 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(3) 0 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(3) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(3) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(3) 0 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(3)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(3) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(3) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(3) 25 ; m ! Range limit (set 0 for no limit)
X_SENSOR(3)      1000 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(3)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(3)      2900 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(3)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(3) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(3)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT           4 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 4 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; IUNIT_OBJ, Platoon
IUNIT_OBJ(1)        1 ! Attach object to sprung mass of this vehicle unit, or 0 ->
                      ! don't attach to a sprung mass [I]
SHAPE_TYPE_OBJ(1)   1 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
H_OBJ(1)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)   17.25 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(1)   1.5 ; m ! Distance from reference point to front of rectangular
                      ! object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)        3 ; m ! Width of rectangular object
MsgObj_1            4 ; - ! Output: User-defined Message (code) for object
TypeO_1           199 ; - ! Output: User-defined Type (code) for object
V_Obj_1 -0.0006561190699 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1   142.8018874 ; m ! Output: X coordinate of object 1
Y_Obj_1 -0.04853799537 ; m ! Output: Y coordinate of object 1
Z_Obj_1 -0.4765411482 ; m ! Output: Z coordinate of object 1
YawO_1    179.4624085 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO1 -0.2223346551 ; deg ! Output: Pitch angle of object 1
RollO_1 0.005913748302 ; deg ! Output: Roll angle of object 1

OBJECT_NAME(2)      2 ; IUNIT_OBJ, Platoon
IUNIT_OBJ(2)        3 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(2)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)   17.25 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(2)   1.5 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(2)        3 ; m ! Width of rectangular object
MsgObj_2            4 ; - ! Output: User-defined Message (code) for object
TypeO_2           199 ; - ! Output: User-defined Type (code) for object
V_Obj_2 -0.0002700262288 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2    169.253252 ; m ! Output: X coordinate of object 2
Y_Obj_2 -0.05180416438 ; m ! Output: Y coordinate of object 2
Z_Obj_2 -0.4873347845 ; m ! Output: Z coordinate of object 2
YawO_2    179.5235902 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO2 -0.03754952523 ; deg ! Output: Pitch angle of object 2
RollO_2 -0.006303376714 ; deg ! Output: Roll angle of object 2

OBJECT_NAME(3)      3 ; IUNIT_OBJ, Platoon
IUNIT_OBJ(3)        5 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(3)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)   17.25 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(3)   1.5 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(3)        3 ; m ! Width of rectangular object
MsgObj_3            4 ; - ! Output: User-defined Message (code) for object
TypeO_3           199 ; - ! Output: User-defined Type (code) for object
V_Obj_3 -0.0003042482624 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3   195.9838729 ; m ! Output: X coordinate of object 3
Y_Obj_3 -0.05188180155 ; m ! Output: Y coordinate of object 3
Z_Obj_3 -0.4882556507 ; m ! Output: Z coordinate of object 3
YawO_3    179.5105302 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO3 -0.02128767051 ; deg ! Output: Pitch angle of object 3
RollO_3 -0.00724226485 ; deg ! Output: Roll angle of object 3

OBJECT_NAME(4)      4 ! [D] This object was added during initialization because
                      ! there is at least one ADAS sensor that requires at least
                      ! N_MIN_DETECTIONS objects.
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(4)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(4)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(4)            0 ; m ! [D] Height of detection point; if negative use sensor
                      ! height
LENGTH_OBJ(4)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(4)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(4) 0 ! [D] Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(4)        2 ; m ! [D] Width of rectangular object
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
TypeO_4             0 ; - ! Output: User-defined Type (code) for object
V_Obj_4             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_4             0 ; m ! Output: X coordinate of object 4
Y_Obj_4             0 ; m ! Output: Y coordinate of object 4
Z_Obj_4             0 ; m ! Output: Z coordinate of object 4
YawO_4              0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO4             0 ; deg ! Output: Pitch angle of object 4
RollO_4             0 ; deg ! Output: Roll angle of object 4

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 30 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CC_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CC_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CC_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CC_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 3, left side
CC_FX_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 3, right side
CC_FX_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CC_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CC_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CC_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CC_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 1, left side
CC_FX_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 1, right side
CC_FX_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 2, left side
CC_FX_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 2, right side
CC_FX_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 3, left side
CC_FX_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(5,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 5, axle 3, right side
CC_FX_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(5,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(5,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(6,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 6, axle 1, left side
CC_FX_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(6,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(6,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(6,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 6, axle 1, right side
CC_FX_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(6,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(6,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(6,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 6, axle 2, left side
CC_FX_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(6,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(6,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(6,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 6, axle 2, right side
CC_FX_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(6,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(6,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 30 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CI_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CI_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CI_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CI_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 3, left side
CI_FY_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 3, right side
CI_FY_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CI_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CI_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CI_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CI_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 1, left side
CI_FY_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 1, right side
CI_FY_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 2, left side
CI_FY_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 2, right side
CI_FY_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 3, left side
CI_FY_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(5,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 5, axle 3, right side
CI_FY_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(5,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(5,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(6,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 6, axle 1, left side
CI_FY_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(6,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(6,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(6,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 6, axle 1, right side
CI_FY_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(6,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(6,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(6,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 6, axle 2, left side
CI_FY_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(6,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(6,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(6,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 6, axle 2, right side
CI_FY_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(6,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(6,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 30 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CI_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CI_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CI_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CI_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, left side
CI_MZ_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, right side
CI_MZ_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CI_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CI_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CI_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CI_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 1, left side
CI_MZ_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 1, right side
CI_MZ_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 2, left side
CI_MZ_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 2, right side
CI_MZ_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 3, left side
CI_MZ_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(5,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 5, axle 3, right side
CI_MZ_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(5,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(5,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(6,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 6, axle 1, left side
CI_MZ_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(6,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(6,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(6,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 6, axle 1, right side
CI_MZ_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(6,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(6,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(6,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 6, axle 2, left side
CI_MZ_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(6,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(6,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(6,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 6, axle 2, right side
CI_MZ_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(6,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(6,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 27 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IVEHICLE and IDIFF are used to
! identify the dataset when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, 1st drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(1,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(1,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, inter-axle diff for axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 1st drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, inter-axle diff for axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 3, 1st drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 3, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 3, inter-axle diff for axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

! CLUTCH_TORQUE: Available instant clutch torque. Available clutch torque is a
! function of normalized clutch control (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available clutch torque
! from the calculation can be adjusted with CLUTCH_TORQUE_GAIN and
! CLUTCH_TORQUE_OFFSET. Normalized clutch control used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ and CON_START_CL_TORQ. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 5000
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(1) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(1) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(1) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 5000
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(2) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(2) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(2) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(3) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 5000
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(3) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(3) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(3) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 27 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IDIFF are used to identify the
! dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1,1) 0 ; N-m ! [D] Constant available torque, veh 1, 1st
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(1,2) 0 ; N-m ! [D] Constant available torque, veh 1, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(1,3) 0 ; N-m ! [D] Constant available torque, veh 1,
                                   ! inter-axle diff for axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(1,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,1) 0 ; N-m ! [D] Constant available torque, veh 2, 1st
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,2) 0 ; N-m ! [D] Constant available torque, veh 2, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,3) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! inter-axle diff for axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3,1) 0 ; N-m ! [D] Constant available torque, veh 3, 1st
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(3,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3,2) 0 ; N-m ! [D] Constant available torque, veh 3, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3,3) 0 ; N-m ! [D] Constant available torque, veh 3,
                                   ! inter-axle diff for axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(3,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

! CMP_DAMP: Damper compression. Damper compression can be a nonlinear CARPET
! function of jounce at wheel (other side) and jounce at wheel or a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the
! calculation can be adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel
! used in the calculation can be adjusted with JNC_SCALE_CMP_DAMP and
! JNC_START_CMP_DAMP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_DAMP and JNC2_START_CMP_DAMP. The derivative of this
! function is used internally. This configurable function supports 30 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, left side
CMP_DAMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, right side
CMP_DAMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, left side
CMP_DAMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, right side
CMP_DAMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 3, left side
CMP_DAMP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 3, right side
CMP_DAMP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, left side
CMP_DAMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, right side
CMP_DAMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, left side
CMP_DAMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, right side
CMP_DAMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 1, left side
CMP_DAMP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 1, right side
CMP_DAMP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 2, left side
CMP_DAMP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 2, right side
CMP_DAMP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 3, left side
CMP_DAMP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(5,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 5, axle 3, right side
CMP_DAMP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(5,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(5,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(5,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(6,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 6, axle 1, left side
CMP_DAMP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(6,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(6,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(6,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(6,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 6, axle 1, right side
CMP_DAMP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(6,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(6,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(6,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(6,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 6, axle 2, left side
CMP_DAMP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(6,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(6,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(6,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(6,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 6, axle 2, right side
CMP_DAMP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(6,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(6,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(6,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from
! the calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_JSTOP and JNC2_START_CMP_JSTOP. The derivative of this
! function is used internally. This configurable function supports 30 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, left side
CMP_JSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, right side
CMP_JSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, left side
CMP_JSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, right side
CMP_JSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 3, left side
CMP_JSTOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 3, right side
CMP_JSTOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, left side
CMP_JSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, right side
CMP_JSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, left side
CMP_JSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, right side
CMP_JSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 1, left side
CMP_JSTOP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 1, right side
CMP_JSTOP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 2, left side
CMP_JSTOP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 2, right side
CMP_JSTOP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 3, left side
CMP_JSTOP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(5,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 5, axle 3, right side
CMP_JSTOP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(5,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(5,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(5,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(6,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 6, axle 1, left side
CMP_JSTOP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(6,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(6,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(6,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(6,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 6, axle 1, right side
CMP_JSTOP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(6,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(6,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(6,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(6,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 6, axle 2, left side
CMP_JSTOP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(6,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(6,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(6,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(6,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 6, axle 2, right side
CMP_JSTOP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(6,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(6,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(6,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from
! the calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_RSTOP and JNC2_START_CMP_RSTOP. The derivative of this
! function is used internally. This configurable function supports 30 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, left side
CMP_RSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, right
                               ! side
CMP_RSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, left side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, right
                               ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, left side
CMP_RSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, right
                               ! side
CMP_RSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 3, left side
CMP_RSTOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 3, right
                               ! side
CMP_RSTOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, left side
CMP_RSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, right
                               ! side
CMP_RSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, left side
CMP_RSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, right
                               ! side
CMP_RSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 1, left side
CMP_RSTOP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 1, right
                               ! side
CMP_RSTOP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 2, left side
CMP_RSTOP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 2, right
                               ! side
CMP_RSTOP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 3, left side
CMP_RSTOP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(5,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 5, axle 3, right
                               ! side
CMP_RSTOP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(5,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(5,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(5,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(6,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 6, axle 1, left side
CMP_RSTOP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(6,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(6,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(6,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(6,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 6, axle 1, right
                               ! side
CMP_RSTOP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(6,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(6,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(6,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(6,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 6, axle 2, left side
CMP_RSTOP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(6,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(6,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(6,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(6,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 6, axle 2, right
                               ! side
CMP_RSTOP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(6,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(6,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(6,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement can be a
! nonlinear CARPET function of jounce at wheel (other side) and jounce at wheel or a
! function of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from
! the calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET.
! Jounce at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT
! and JNC_START_CMP_SPR_SEAT. Jounce at wheel (other side) used in the calculation
! can be adjusted with JNC2_SCALE_CMP_SPR_SEAT and JNC2_START_CMP_SPR_SEAT. An
! inverse version of this function is used internally. The derivative of this
! function is used internally. This configurable function supports 30 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(5,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 5, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(5,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(5,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(5,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(6,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 6, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(6,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(6,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(6,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(6,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 6, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(6,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(6,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(6,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(6,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 6, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(6,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(6,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(6,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(6,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 6, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(6,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(6,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(6,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 30 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CS_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CS_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CS_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CS_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 3, left side
CS_FY_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 3, right side
CS_FY_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CS_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CS_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CS_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CS_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 1, left side
CS_FY_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 1, right side
CS_FY_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 2, left side
CS_FY_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 2, right side
CS_FY_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 3, left side
CS_FY_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(5,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 5, axle 3, right side
CS_FY_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(5,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(5,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(6,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 6, axle 1, left side
CS_FY_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(6,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(6,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(6,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 6, axle 1, right side
CS_FY_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(6,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(6,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(6,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 6, axle 2, left side
CS_FY_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(6,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(6,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(6,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 6, axle 2, right side
CS_FY_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(6,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(6,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 30 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CS_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CS_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CS_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CS_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, left side
CS_MZ_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, right side
CS_MZ_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CS_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CS_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CS_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CS_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 1, left side
CS_MZ_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 1, right side
CS_MZ_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 2, left side
CS_MZ_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 2, right side
CS_MZ_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 3, left side
CS_MZ_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(5,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 5, axle 3, right side
CS_MZ_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(5,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(5,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(6,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 6, axle 1, left side
CS_MZ_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(6,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(6,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(6,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 6, axle 1, right side
CS_MZ_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(6,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(6,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(6,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 6, axle 2, left side
CS_MZ_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(6,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(6,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(6,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 6, axle 2, right side
CS_MZ_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(6,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(6,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 30 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CT_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CT_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CT_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CT_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 3, left side
CT_FX_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 3, right side
CT_FX_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CT_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CT_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CT_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CT_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 1, left side
CT_FX_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 1, right side
CT_FX_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 2, left side
CT_FX_OFFSET(5,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 2, right side
CT_FX_OFFSET(5,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 3, left side
CT_FX_OFFSET(5,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(5,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 5, axle 3, right side
CT_FX_OFFSET(5,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(5,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(5,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(6,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 6, axle 1, left side
CT_FX_OFFSET(6,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(6,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(6,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(6,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 6, axle 1, right side
CT_FX_OFFSET(6,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(6,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(6,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(6,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 6, axle 2, left side
CT_FX_OFFSET(6,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(6,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(6,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(6,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 6, axle 2, right side
CT_FX_OFFSET(6,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(6,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(6,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 15 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 3
C_LAT_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 1
C_LAT_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 2
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 1
C_LAT_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 2
C_LAT_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 3
C_LAT_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 1
C_LAT_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 2
C_LAT_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(5,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 5, axle 1
C_LAT_AXLE_OFFSET(5,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(5,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(5,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(5,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 5, axle 2
C_LAT_AXLE_OFFSET(5,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(5,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(5,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(5,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 5, axle 3
C_LAT_AXLE_OFFSET(5,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(5,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(5,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(6,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 6, axle 1
C_LAT_AXLE_OFFSET(6,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(6,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(6,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(6,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 6, axle 2
C_LAT_AXLE_OFFSET(6,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(6,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(6,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 15
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 3
C_LONG_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 1
C_LONG_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 1
C_LONG_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 2
C_LONG_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 3
C_LONG_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 1
C_LONG_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 2
C_LONG_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(5,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 5, axle 1
C_LONG_AXLE_OFFSET(5,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(5,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(5,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(5,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 5, axle 2
C_LONG_AXLE_OFFSET(5,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(5,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(5,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(5,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 5, axle 3
C_LONG_AXLE_OFFSET(5,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(5,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(5,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(6,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 6, axle 1
C_LONG_AXLE_OFFSET(6,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(6,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(6,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(6,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 6, axle 2
C_LONG_AXLE_OFFSET(6,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(6,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(6,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 51 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IGEAR are used to identify the
! dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 46
 0.2, 46
 0.8, 60
 1, 60
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 66
 0.2, 66
 0.8, 95
 1, 95
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 77
 0.2, 77
 0.8, 125
 1, 125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 93
 0.2, 93
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 109
 0.2, 109
 0.8, 268
 1, 268
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 128
 0.2, 128
 0.8, 314
 1, 314
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,7) LINEAR_FLAT ! vehicle 1, gear shift 7<->8
 0, 150
 0.2, 150
 0.8, 370
 1, 370
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,7) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,7) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,7) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,8) LINEAR_FLAT ! vehicle 1, gear shift 8<->9
 0, 176
 0.2, 176
 0.8, 433
 1, 433
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,8) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,8) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,8) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,9) LINEAR_FLAT ! vehicle 1, gear shift 9<->10
 0, 206
 0.2, 206
 0.8, 506
 1, 506
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,9) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,9) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,9) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,10) LINEAR_FLAT ! vehicle 1, gear shift 10<->11
 0, 246
 0.2, 246
 0.8, 593
 1, 593
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,10) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,10) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,10) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,11) LINEAR_FLAT ! vehicle 1, gear shift 11<->12
 0, 288
 0.2, 288
 0.8, 707
 1, 707
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,11) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,11) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,11) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,12) LINEAR_FLAT ! vehicle 1, gear shift 12<->13
 0, 347
 0.2, 347
 0.8, 831
 1, 831
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,12) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,12) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,12) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,13) LINEAR_FLAT ! vehicle 1, gear shift 13<->14
 0, 408
 0.2, 408
 0.8, 1000
 1, 1000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,13) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,13) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,13) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,14) LINEAR_FLAT ! vehicle 1, gear shift 14<->15
 0, 481
 0.2, 481
 0.8, 1174
 1, 1174
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,14) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,14) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,14) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,15) LINEAR_FLAT ! vehicle 1, gear shift 15<->16
 0, 563
 0.2, 563
 0.8, 1385
 1, 1385
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,15) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,15) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,15) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,16) LINEAR_FLAT ! vehicle 1, gear shift 16<->17
 0, 654
 0.2, 654
 0.8, 1620
 1, 1620
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,16) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,16) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,16) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,17) LINEAR_FLAT ! vehicle 1, gear shift 17<->18
 0, 771
 0.2, 771
 0.8, 1884
 1, 1884
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,17) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,17) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(1,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,17) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 46
 0.2, 46
 0.8, 60
 1, 60
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 66
 0.2, 66
 0.8, 95
 1, 95
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 77
 0.2, 77
 0.8, 125
 1, 125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 93
 0.2, 93
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 109
 0.2, 109
 0.8, 268
 1, 268
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,6) LINEAR_FLAT ! vehicle 2, gear shift 6<->7
 0, 128
 0.2, 128
 0.8, 314
 1, 314
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,7) LINEAR_FLAT ! vehicle 2, gear shift 7<->8
 0, 150
 0.2, 150
 0.8, 370
 1, 370
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,7) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,7) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,7) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,8) LINEAR_FLAT ! vehicle 2, gear shift 8<->9
 0, 176
 0.2, 176
 0.8, 433
 1, 433
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,8) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,8) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,8) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,9) LINEAR_FLAT ! vehicle 2, gear shift 9<->10
 0, 206
 0.2, 206
 0.8, 506
 1, 506
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,9) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,9) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,9) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,10) LINEAR_FLAT ! vehicle 2, gear shift 10<->11
 0, 246
 0.2, 246
 0.8, 593
 1, 593
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,10) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,10) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,10) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,11) LINEAR_FLAT ! vehicle 2, gear shift 11<->12
 0, 288
 0.2, 288
 0.8, 707
 1, 707
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,11) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,11) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,11) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,12) LINEAR_FLAT ! vehicle 2, gear shift 12<->13
 0, 347
 0.2, 347
 0.8, 831
 1, 831
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,12) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,12) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,12) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,13) LINEAR_FLAT ! vehicle 2, gear shift 13<->14
 0, 408
 0.2, 408
 0.8, 1000
 1, 1000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,13) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,13) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,13) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,14) LINEAR_FLAT ! vehicle 2, gear shift 14<->15
 0, 481
 0.2, 481
 0.8, 1174
 1, 1174
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,14) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,14) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,14) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,15) LINEAR_FLAT ! vehicle 2, gear shift 15<->16
 0, 563
 0.2, 563
 0.8, 1385
 1, 1385
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,15) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,15) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,15) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,16) LINEAR_FLAT ! vehicle 2, gear shift 16<->17
 0, 654
 0.2, 654
 0.8, 1620
 1, 1620
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,16) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,16) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,16) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,17) LINEAR_FLAT ! vehicle 2, gear shift 17<->18
 0, 771
 0.2, 771
 0.8, 1884
 1, 1884
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,17) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,17) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,17) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 46
 0.2, 46
 0.8, 60
 1, 60
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 66
 0.2, 66
 0.8, 95
 1, 95
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 77
 0.2, 77
 0.8, 125
 1, 125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 93
 0.2, 93
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 109
 0.2, 109
 0.8, 268
 1, 268
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,6) LINEAR_FLAT ! vehicle 3, gear shift 6<->7
 0, 128
 0.2, 128
 0.8, 314
 1, 314
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,7) LINEAR_FLAT ! vehicle 3, gear shift 7<->8
 0, 150
 0.2, 150
 0.8, 370
 1, 370
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,7) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,7) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,7) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,8) LINEAR_FLAT ! vehicle 3, gear shift 8<->9
 0, 176
 0.2, 176
 0.8, 433
 1, 433
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,8) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,8) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,8) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,9) LINEAR_FLAT ! vehicle 3, gear shift 9<->10
 0, 206
 0.2, 206
 0.8, 506
 1, 506
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,9) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,9) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,9) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,10) LINEAR_FLAT ! vehicle 3, gear shift 10<->11
 0, 246
 0.2, 246
 0.8, 593
 1, 593
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,10) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,10) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,10) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,11) LINEAR_FLAT ! vehicle 3, gear shift 11<->12
 0, 288
 0.2, 288
 0.8, 707
 1, 707
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,11) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,11) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,11) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,12) LINEAR_FLAT ! vehicle 3, gear shift 12<->13
 0, 347
 0.2, 347
 0.8, 831
 1, 831
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,12) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,12) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,12) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,13) LINEAR_FLAT ! vehicle 3, gear shift 13<->14
 0, 408
 0.2, 408
 0.8, 1000
 1, 1000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,13) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,13) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,13) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,14) LINEAR_FLAT ! vehicle 3, gear shift 14<->15
 0, 481
 0.2, 481
 0.8, 1174
 1, 1174
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,14) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,14) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,14) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,15) LINEAR_FLAT ! vehicle 3, gear shift 15<->16
 0, 563
 0.2, 563
 0.8, 1385
 1, 1385
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,15) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,15) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,15) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,16) LINEAR_FLAT ! vehicle 3, gear shift 16<->17
 0, 654
 0.2, 654
 0.8, 1620
 1, 1620
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,16) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,16) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,16) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,17) LINEAR_FLAT ! vehicle 3, gear shift 17<->18
 0, 771
 0.2, 771
 0.8, 1884
 1, 1884
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,17) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,17) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(3,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,17) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 30 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, left side
FD_GAIN(1,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, right side
FD_GAIN(1,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, left side
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, right side
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 1, left side
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 1, right side
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 2, left side
FD_GAIN(3,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 2, right side
FD_GAIN(3,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,3,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 3, left side
FD_GAIN(3,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,3,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 3, right side
FD_GAIN(3,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 1, left side
FD_GAIN(4,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 1, right side
FD_GAIN(4,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 2, left side
FD_GAIN(4,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 2, right side
FD_GAIN(4,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 1, left side
FD_GAIN(5,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 1, right side
FD_GAIN(5,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 2, left side
FD_GAIN(5,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 2, right side
FD_GAIN(5,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,3,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 3, left side
FD_GAIN(5,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(5,3,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 5, axle 3, right side
FD_GAIN(5,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(5,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(5,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(5,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(6,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 6, axle 1, left side
FD_GAIN(6,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(6,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(6,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(6,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(6,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 6, axle 1, right side
FD_GAIN(6,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(6,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(6,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(6,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(6,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 6, axle 2, left side
FD_GAIN(6,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(6,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(6,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(6,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(6,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 6, axle 2, right side
FD_GAIN(6,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(6,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(6,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(6,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 30 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(1,3,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, left side
FS_COMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, left side

FS_COMP_COEFFICIENT(1,3,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, right side
FS_COMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, right side

FS_COMP_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

FS_COMP_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, left side
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

FS_COMP_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, right side
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(3,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

FS_COMP_COEFFICIENT(3,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, left side
FS_COMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, left side

FS_COMP_COEFFICIENT(3,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, right side
FS_COMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, right side

FS_COMP_COEFFICIENT(3,3,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 3, left side
FS_COMP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 3, left side

FS_COMP_COEFFICIENT(3,3,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 3, right side
FS_COMP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 3, right side

FS_COMP_COEFFICIENT(4,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, left side
FS_COMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, left side

FS_COMP_COEFFICIENT(4,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, right side
FS_COMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, right side

FS_COMP_COEFFICIENT(4,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, left side
FS_COMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, left side

FS_COMP_COEFFICIENT(4,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, right side
FS_COMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, right side

FS_COMP_COEFFICIENT(5,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 1, left side
FS_COMP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 1, left side

FS_COMP_COEFFICIENT(5,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 1, right side
FS_COMP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 1, right side

FS_COMP_COEFFICIENT(5,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 2, left side
FS_COMP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 2, left side

FS_COMP_COEFFICIENT(5,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 2, right side
FS_COMP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 2, right side

FS_COMP_COEFFICIENT(5,3,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 3, left side
FS_COMP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 3, left side

FS_COMP_COEFFICIENT(5,3,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 5, axle 3, right side
FS_COMP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(5,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(5,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(5,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(5,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(5,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 5, axle 3, right side

FS_COMP_COEFFICIENT(6,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 6, axle 1, left side
FS_COMP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(6,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(6,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(6,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(6,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(6,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 6, axle 1, left side

FS_COMP_COEFFICIENT(6,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 6, axle 1, right side
FS_COMP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(6,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(6,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(6,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(6,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(6,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 6, axle 1, right side

FS_COMP_COEFFICIENT(6,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 6, axle 2, left side
FS_COMP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(6,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(6,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(6,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(6,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(6,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 6, axle 2, left side

FS_COMP_COEFFICIENT(6,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 6, axle 2, right side
FS_COMP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(6,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(6,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(6,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(6,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(6,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 6, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 30 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(1,3,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, left side
FS_EXT_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, left side

FS_EXT_COEFFICIENT(1,3,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, right side
FS_EXT_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, right side

FS_EXT_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

FS_EXT_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, left side
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

FS_EXT_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, right side
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(3,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

FS_EXT_COEFFICIENT(3,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, left side
FS_EXT_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, left side

FS_EXT_COEFFICIENT(3,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, right side
FS_EXT_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, right side

FS_EXT_COEFFICIENT(3,3,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 3, left side
FS_EXT_GAIN(3,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 3, left side

FS_EXT_COEFFICIENT(3,3,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 3, right side
FS_EXT_GAIN(3,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 3, right side

FS_EXT_COEFFICIENT(4,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, left side
FS_EXT_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, left side

FS_EXT_COEFFICIENT(4,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, right side
FS_EXT_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, right side

FS_EXT_COEFFICIENT(4,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, left side
FS_EXT_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, left side

FS_EXT_COEFFICIENT(4,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, right side
FS_EXT_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, right side

FS_EXT_COEFFICIENT(5,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 1, left side
FS_EXT_GAIN(5,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 1, left side

FS_EXT_COEFFICIENT(5,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 1, right side
FS_EXT_GAIN(5,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 1, right side

FS_EXT_COEFFICIENT(5,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 2, left side
FS_EXT_GAIN(5,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 2, left side

FS_EXT_COEFFICIENT(5,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 2, right side
FS_EXT_GAIN(5,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 2, right side

FS_EXT_COEFFICIENT(5,3,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 3, left side
FS_EXT_GAIN(5,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 3, left side

FS_EXT_COEFFICIENT(5,3,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 5, axle 3, right side
FS_EXT_GAIN(5,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(5,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(5,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(5,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(5,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(5,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 5, axle 3, right side

FS_EXT_COEFFICIENT(6,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 6, axle 1, left side
FS_EXT_GAIN(6,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(6,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(6,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(6,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(6,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(6,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 6, axle 1, left side

FS_EXT_COEFFICIENT(6,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 6, axle 1, right side
FS_EXT_GAIN(6,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(6,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(6,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(6,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(6,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(6,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 6, axle 1, right side

FS_EXT_COEFFICIENT(6,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 6, axle 2, left side
FS_EXT_GAIN(6,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(6,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(6,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(6,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(6,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(6,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 6, axle 2, left side

FS_EXT_COEFFICIENT(6,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 6, axle 2, right side
FS_EXT_GAIN(6,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(6,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(6,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(6,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(6,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(6,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 6, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE. This configurable function supports 3 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

FUEL_RATE_CONSTANT(1) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(1)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(1) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(1) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(2) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(2)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(2) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(2) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(3) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(3)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(3) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(3) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFX

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(5) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CFX

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 60 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,1,1,1) 2D_FROM_ZERO ! unit 5, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,1,2,1) 2D_FROM_ZERO ! unit 5, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,2,1,1) 2D_FROM_ZERO ! unit 5, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,2,1,2) 2D_FROM_ZERO ! unit 5, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,2,2,1) 2D_FROM_ZERO ! unit 5, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,2,2,2) 2D_FROM_ZERO ! unit 5, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,3,1,1) 2D_FROM_ZERO ! unit 5, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,3,1,2) 2D_FROM_ZERO ! unit 5, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,3,2,1) 2D_FROM_ZERO ! unit 5, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(5,3,2,2) 2D_FROM_ZERO ! unit 5, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(5,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(5,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(5,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(5,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(5,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(5,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,1,1,1) 2D_FROM_ZERO ! unit 6, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,1,1,2) 2D_FROM_ZERO ! unit 6, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,1,2,1) 2D_FROM_ZERO ! unit 6, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,1,2,2) 2D_FROM_ZERO ! unit 6, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,2,1,1) 2D_FROM_ZERO ! unit 6, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,2,1,2) 2D_FROM_ZERO ! unit 6, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,2,2,1) 2D_FROM_ZERO ! unit 6, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(6,2,2,2) 2D_FROM_ZERO ! unit 6, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(6,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(6,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(6,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(6,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(6,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(6,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(3) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFY

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(5) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CFY

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 60 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,1,1,1) 2D_FROM_ZERO ! unit 5, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,1,2,1) 2D_FROM_ZERO ! unit 5, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,2,1,1) 2D_FROM_ZERO ! unit 5, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,2,1,2) 2D_FROM_ZERO ! unit 5, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,2,2,1) 2D_FROM_ZERO ! unit 5, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,2,2,2) 2D_FROM_ZERO ! unit 5, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,3,1,1) 2D_FROM_ZERO ! unit 5, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,3,1,2) 2D_FROM_ZERO ! unit 5, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,3,2,1) 2D_FROM_ZERO ! unit 5, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(5,3,2,2) 2D_FROM_ZERO ! unit 5, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(5,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(5,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(5,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(5,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(5,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(5,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,1,1,1) 2D_FROM_ZERO ! unit 6, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,1,1,2) 2D_FROM_ZERO ! unit 6, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,1,2,1) 2D_FROM_ZERO ! unit 6, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,1,2,2) 2D_FROM_ZERO ! unit 6, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,2,1,1) 2D_FROM_ZERO ! unit 6, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,2,1,2) 2D_FROM_ZERO ! unit 6, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,2,2,1) 2D_FROM_ZERO ! unit 6, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(6,2,2,2) 2D_FROM_ZERO ! unit 6, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(6,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(6,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(6,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(6,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(6,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(6,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFZ

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(5) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 60 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 1, right,
                                  ! inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, left, outer
FZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, right,
                                  ! inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, right,
                                  ! outer
FZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, left, inner
FZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, left, outer
FZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, right,
                                  ! inner
FZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, right,
                                  ! outer
FZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, outer
FZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, outer
FZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, inner
FZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, outer
FZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, inner
FZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, outer
FZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 1, left, inner
FZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 1, right,
                                  ! inner
FZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 2, left, inner
FZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 2, left, outer
FZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 2, right,
                                  ! inner
FZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 2, right,
                                  ! outer
FZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 3, left, inner
FZ_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 3, left, outer
FZ_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 3, right,
                                  ! inner
FZ_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 3, right,
                                  ! outer
FZ_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, left, inner
FZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, left, outer
FZ_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, right, inner
FZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, right, outer
FZ_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, inner
FZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, outer
FZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, inner
FZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, outer
FZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,1,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 1, left, inner
FZ_TIRE_GAIN(5,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,1,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 1, right,
                                  ! inner
FZ_TIRE_GAIN(5,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,2,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 2, left, inner
FZ_TIRE_GAIN(5,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,2,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 2, left, outer
FZ_TIRE_GAIN(5,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,2,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 2, right,
                                  ! inner
FZ_TIRE_GAIN(5,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,2,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 2, right,
                                  ! outer
FZ_TIRE_GAIN(5,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,3,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 3, left, inner
FZ_TIRE_GAIN(5,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,3,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 3, left, outer
FZ_TIRE_GAIN(5,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,3,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 3, right,
                                  ! inner
FZ_TIRE_GAIN(5,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(5,3,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 5, axle 3, right,
                                  ! outer
FZ_TIRE_GAIN(5,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(5,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(5,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(5,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 1, left, inner
FZ_TIRE_GAIN(6,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 1, left, outer
FZ_TIRE_GAIN(6,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 1, right, inner
FZ_TIRE_GAIN(6,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 1, right, outer
FZ_TIRE_GAIN(6,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 2, left, inner
FZ_TIRE_GAIN(6,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 2, left, outer
FZ_TIRE_GAIN(6,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 2, right, inner
FZ_TIRE_GAIN(6,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(6,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 6, axle 2, right, outer
FZ_TIRE_GAIN(6,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(6,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(6,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(6,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 30 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,3,1) LINEAR ! unit 3, axle 3, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,3,2) LINEAR ! unit 3, axle 3, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,1,1) LINEAR ! unit 5, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,1,2) LINEAR ! unit 5, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,2,1) LINEAR ! unit 5, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,2,2) LINEAR ! unit 5, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,3,1) LINEAR ! unit 5, axle 3, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(5,3,2) LINEAR ! unit 5, axle 3, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(5,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(5,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(5,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(6,1,1) LINEAR ! unit 6, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(6,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(6,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(6,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(6,1,2) LINEAR ! unit 6, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(6,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(6,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(6,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(6,2,1) LINEAR ! unit 6, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(6,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(6,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(6,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(6,2,2) LINEAR ! unit 6, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(6,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(6,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(6,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 30 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,3,1) LINEAR ! unit 3, axle 3, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,3,2) LINEAR ! unit 3, axle 3, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,1,1) LINEAR ! unit 5, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,1,2) LINEAR ! unit 5, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,2,1) LINEAR ! unit 5, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,2,2) LINEAR ! unit 5, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,3,1) LINEAR ! unit 5, axle 3, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(5,3,2) LINEAR ! unit 5, axle 3, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(5,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(5,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(5,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(6,1,1) LINEAR ! unit 6, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(6,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(6,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(6,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(6,1,2) LINEAR ! unit 6, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(6,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(6,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(6,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(6,2,1) LINEAR ! unit 6, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(6,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(6,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(6,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(6,2,2) LINEAR ! unit 6, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(6,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(6,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(6,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 15
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(3,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 3, axle 1
GEAR_ROT_GAIN(3,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(5,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 5, axle 1
GEAR_ROT_GAIN(5,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(5,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR. This configurable function supports 3 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

GEAR_TRANS_CONSTANT(1) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(2) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(3) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 3 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IVEHICLE is used to identify the dataset when reading data.

ISHAFT_KIN_COEFFICIENT(1) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(1)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(1) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(2) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(2)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(2) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(3) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(3)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(3) 0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 60 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, outer
KGAMMA_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, outer
KGAMMA_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, inner
KGAMMA_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, outer
KGAMMA_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, inner
KGAMMA_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, outer
KGAMMA_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, inner
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, outer
KGAMMA_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, inner
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, outer
KGAMMA_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, inner
KGAMMA_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, outer
KGAMMA_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, inner
KGAMMA_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, outer
KGAMMA_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, left, inner
KGAMMA_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, right, inner
KGAMMA_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, inner
KGAMMA_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, outer
KGAMMA_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, inner
KGAMMA_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, outer
KGAMMA_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, left, inner
KGAMMA_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, left, outer
KGAMMA_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, right, inner
KGAMMA_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, right, outer
KGAMMA_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, left, inner
KGAMMA_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, left, outer
KGAMMA_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, right, inner
KGAMMA_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, right, outer
KGAMMA_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, inner
KGAMMA_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, outer
KGAMMA_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, inner
KGAMMA_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, outer
KGAMMA_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 1, left, inner
KGAMMA_GAIN(5,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 1, right, inner
KGAMMA_GAIN(5,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 2, left, inner
KGAMMA_GAIN(5,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 2, left, outer
KGAMMA_GAIN(5,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 2, right, inner
KGAMMA_GAIN(5,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 2, right, outer
KGAMMA_GAIN(5,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 3, left, inner
KGAMMA_GAIN(5,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 3, left, outer
KGAMMA_GAIN(5,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 3, right, inner
KGAMMA_GAIN(5,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(5,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 5, axle 3, right, outer
KGAMMA_GAIN(5,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(5,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(5,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 1, left, inner
KGAMMA_GAIN(6,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 1, left, outer
KGAMMA_GAIN(6,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 1, right, inner
KGAMMA_GAIN(6,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 1, right, outer
KGAMMA_GAIN(6,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 2, left, inner
KGAMMA_GAIN(6,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 2, left, outer
KGAMMA_GAIN(6,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 2, right, inner
KGAMMA_GAIN(6,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(6,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 6, axle 2, right, outer
KGAMMA_GAIN(6,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(6,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(6,2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.6s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! 0.75s Single Preview
LTARG_CONSTANT(2)   0 ; m ! Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(3)         3  ! 0.75s Single Preview
LTARG_CONSTANT(3)   0 ; m ! Constant lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 60
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(3,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(3,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(3,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(3,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(4,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(4,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,1,1,1) 0 ; mm ! Constant tire contact length, unit 5, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(5,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,1,2,1) 0 ; mm ! Constant tire contact length, unit 5, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(5,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,2,1,1) 0 ; mm ! Constant tire contact length, unit 5, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(5,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,2,1,2) 0 ; mm ! Constant tire contact length, unit 5, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(5,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,2,2,1) 0 ; mm ! Constant tire contact length, unit 5, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(5,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,2,2,2) 0 ; mm ! Constant tire contact length, unit 5, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(5,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,3,1,1) 0 ; mm ! Constant tire contact length, unit 5, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(5,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,3,1,2) 0 ; mm ! Constant tire contact length, unit 5, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(5,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,3,2,1) 0 ; mm ! Constant tire contact length, unit 5, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(5,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(5,3,2,2) 0 ; mm ! Constant tire contact length, unit 5, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(5,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,1,1,1) 0 ; mm ! Constant tire contact length, unit 6, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(6,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,1,1,2) 0 ; mm ! Constant tire contact length, unit 6, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(6,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,1,2,1) 0 ; mm ! Constant tire contact length, unit 6, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(6,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,1,2,2) 0 ; mm ! Constant tire contact length, unit 6, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(6,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,2,1,1) 0 ; mm ! Constant tire contact length, unit 6, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(6,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,2,1,2) 0 ; mm ! Constant tire contact length, unit 6, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(6,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,2,2,1) 0 ; mm ! Constant tire contact length, unit 6, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(6,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(6,2,2,2) 0 ; mm ! Constant tire contact length, unit 6, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(6,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 60
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,1,1,1) 0 ; mm ! Constant tire contact width, unit 5, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(5,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,1,2,1) 0 ; mm ! Constant tire contact width, unit 5, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(5,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,2,1,1) 0 ; mm ! Constant tire contact width, unit 5, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(5,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,2,1,2) 0 ; mm ! Constant tire contact width, unit 5, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(5,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,2,2,1) 0 ; mm ! Constant tire contact width, unit 5, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(5,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,2,2,2) 0 ; mm ! Constant tire contact width, unit 5, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(5,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,3,1,1) 0 ; mm ! Constant tire contact width, unit 5, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(5,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,3,1,2) 0 ; mm ! Constant tire contact width, unit 5, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(5,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,3,2,1) 0 ; mm ! Constant tire contact width, unit 5, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(5,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(5,3,2,2) 0 ; mm ! Constant tire contact width, unit 5, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(5,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,1,1,1) 0 ; mm ! Constant tire contact width, unit 6, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(6,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,1,1,2) 0 ; mm ! Constant tire contact width, unit 6, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(6,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,1,2,1) 0 ; mm ! Constant tire contact width, unit 6, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(6,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,1,2,2) 0 ; mm ! Constant tire contact width, unit 6, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(6,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,2,1,1) 0 ; mm ! Constant tire contact width, unit 6, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(6,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,2,1,2) 0 ; mm ! Constant tire contact width, unit 6, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(6,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,2,2,1) 0 ; mm ! Constant tire contact width, unit 6, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(6,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(6,2,2,2) 0 ; mm ! Constant tire contact width, unit 6, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(6,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 60 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,2) LINEAR ! unit 1, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,2) LINEAR ! unit 1, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,1) LINEAR ! unit 1, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,2) LINEAR ! unit 1, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,1) LINEAR ! unit 1, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,2) LINEAR ! unit 1, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,2) LINEAR ! unit 2, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,2) LINEAR ! unit 2, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,1) LINEAR ! unit 2, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,2) LINEAR ! unit 2, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,1) LINEAR ! unit 2, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,2) LINEAR ! unit 2, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,1) LINEAR ! unit 3, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,1) LINEAR ! unit 3, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,1) LINEAR ! unit 3, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,2) LINEAR ! unit 3, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,1) LINEAR ! unit 3, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,2) LINEAR ! unit 3, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,1,1) SPLINE_FLAT ! unit 3, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,1,1) LINEAR ! unit 3, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,1,2) SPLINE_FLAT ! unit 3, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,1,2) LINEAR ! unit 3, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,2,1) SPLINE_FLAT ! unit 3, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,2,1) LINEAR ! unit 3, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,2,2) SPLINE_FLAT ! unit 3, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,2,2) LINEAR ! unit 3, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,1,1) LINEAR ! unit 4, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,1,2) SPLINE_FLAT ! unit 4, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,1,2) LINEAR ! unit 4, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,2,1) LINEAR ! unit 4, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,2,2) SPLINE_FLAT ! unit 4, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,2,2) LINEAR ! unit 4, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,1) LINEAR ! unit 4, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,2) LINEAR ! unit 4, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,1) LINEAR ! unit 4, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,2) LINEAR ! unit 4, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,1,1,1) SPLINE_FLAT ! unit 5, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,1,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,1,1,1) LINEAR ! unit 5, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,1,2,1) SPLINE_FLAT ! unit 5, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,1,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,1,2,1) LINEAR ! unit 5, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,2,1,1) SPLINE_FLAT ! unit 5, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,2,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,2,1,1) LINEAR ! unit 5, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,2,1,2) SPLINE_FLAT ! unit 5, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,2,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,2,1,2) LINEAR ! unit 5, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,2,2,1) SPLINE_FLAT ! unit 5, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,2,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,2,2,1) LINEAR ! unit 5, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,2,2,2) SPLINE_FLAT ! unit 5, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,2,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,2,2,2) LINEAR ! unit 5, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,3,1,1) SPLINE_FLAT ! unit 5, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,3,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,3,1,1) LINEAR ! unit 5, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,3,1,2) SPLINE_FLAT ! unit 5, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,3,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,3,1,2) LINEAR ! unit 5, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,3,2,1) SPLINE_FLAT ! unit 5, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,3,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,3,2,1) LINEAR ! unit 5, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(5,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(5,3,2,2) SPLINE_FLAT ! unit 5, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(5,3,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(5,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(5,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(5,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(5,3,2,2) LINEAR ! unit 5, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(5,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,1,1,1) SPLINE_FLAT ! unit 6, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,1,1,1) LINEAR ! unit 6, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,1,1,2) SPLINE_FLAT ! unit 6, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,1,1,2) LINEAR ! unit 6, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,1,2,1) SPLINE_FLAT ! unit 6, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,1,2,1) LINEAR ! unit 6, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,1,2,2) SPLINE_FLAT ! unit 6, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,1,2,2) LINEAR ! unit 6, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,2,1,1) SPLINE_FLAT ! unit 6, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,2,1,1) LINEAR ! unit 6, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,2,1,2) SPLINE_FLAT ! unit 6, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,2,1,2) LINEAR ! unit 6, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,2,2,1) SPLINE_FLAT ! unit 6, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,2,2,1) LINEAR ! unit 6, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(6,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(6,2,2,2) SPLINE_FLAT ! unit 6, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(6,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(6,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(6,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(6,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(6,2,2,2) LINEAR ! unit 6, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(6,2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 60 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,2) SPLINE ! unit 1, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,2) SPLINE ! unit 1, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,1) SPLINE ! unit 1, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,2) SPLINE ! unit 1, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,1) SPLINE ! unit 1, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,2) SPLINE ! unit 1, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,2) SPLINE ! unit 2, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,2) SPLINE ! unit 2, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,1) SPLINE ! unit 3, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,1) SPLINE ! unit 3, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,1) SPLINE ! unit 3, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,2) SPLINE ! unit 3, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,1) SPLINE ! unit 3, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,2) SPLINE ! unit 3, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,1,1) SPLINE_FLAT ! unit 3, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,1,1) SPLINE ! unit 3, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,1,2) SPLINE_FLAT ! unit 3, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,1,2) SPLINE ! unit 3, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,2,1) SPLINE_FLAT ! unit 3, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,2,1) SPLINE ! unit 3, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,2,2) SPLINE_FLAT ! unit 3, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,2,2) SPLINE ! unit 3, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,1,1) SPLINE ! unit 4, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,1,2) SPLINE_FLAT ! unit 4, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,1,2) SPLINE ! unit 4, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,2,1) SPLINE ! unit 4, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,2,2) SPLINE_FLAT ! unit 4, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,2,2) SPLINE ! unit 4, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,1) SPLINE ! unit 4, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,2) SPLINE ! unit 4, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,1) SPLINE ! unit 4, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,2) SPLINE ! unit 4, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,1,1,1) SPLINE_FLAT ! unit 5, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,1,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,1,1,1) SPLINE ! unit 5, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,1,2,1) SPLINE_FLAT ! unit 5, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,1,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,1,2,1) SPLINE ! unit 5, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,2,1,1) SPLINE_FLAT ! unit 5, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,2,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,2,1,1) SPLINE ! unit 5, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,2,1,2) SPLINE_FLAT ! unit 5, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,2,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,2,1,2) SPLINE ! unit 5, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,2,2,1) SPLINE_FLAT ! unit 5, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,2,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,2,2,1) SPLINE ! unit 5, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,2,2,2) SPLINE_FLAT ! unit 5, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,2,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,2,2,2) SPLINE ! unit 5, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,3,1,1) SPLINE_FLAT ! unit 5, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,3,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,3,1,1) SPLINE ! unit 5, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,3,1,2) SPLINE_FLAT ! unit 5, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,3,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,3,1,2) SPLINE ! unit 5, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,3,2,1) SPLINE_FLAT ! unit 5, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,3,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,3,2,1) SPLINE ! unit 5, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(5,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(5,3,2,2) SPLINE_FLAT ! unit 5, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(5,3,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(5,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(5,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(5,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(5,3,2,2) SPLINE ! unit 5, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(5,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,1,1,1) SPLINE_FLAT ! unit 6, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,1,1,1) SPLINE ! unit 6, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,1,1,2) SPLINE_FLAT ! unit 6, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,1,1,2) SPLINE ! unit 6, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,1,2,1) SPLINE_FLAT ! unit 6, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,1,2,1) SPLINE ! unit 6, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,1,2,2) SPLINE_FLAT ! unit 6, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,1,2,2) SPLINE ! unit 6, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,2,1,1) SPLINE_FLAT ! unit 6, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,2,1,1) SPLINE ! unit 6, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,2,1,2) SPLINE_FLAT ! unit 6, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,2,1,2) SPLINE ! unit 6, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,2,2,1) SPLINE_FLAT ! unit 6, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,2,2,1) SPLINE ! unit 6, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(6,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(6,2,2,2) SPLINE_FLAT ! unit 6, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(6,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(6,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(6,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(6,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(6,2,2,2) SPLINE ! unit 6, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(6,2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.
! This configurable function supports 3 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(1) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN(1)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(1)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(1) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(1) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(1) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(1) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(2) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN(2)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(2)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(2) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(2) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(2) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(2) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(3) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN(3)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(3)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(3) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(3) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(3) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(3) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS. This configurable function supports 3 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

MODE_TRANS_CONSTANT(1) 18 ; - ! Constant transmission mode
MODE_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(2) 18 ; - ! Constant transmission mode
MODE_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(3) 18 ; - ! Constant transmission mode
MODE_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMX

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(5) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 15 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(1,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 3
MX_AUX_GAIN(1,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 3

MX_AUX_COEFFICIENT(2,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

MX_AUX_COEFFICIENT(3,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 1
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 1

MX_AUX_COEFFICIENT(3,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 2
MX_AUX_GAIN(3,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 2

MX_AUX_COEFFICIENT(3,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 3
MX_AUX_GAIN(3,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 3

MX_AUX_COEFFICIENT(4,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 1
MX_AUX_GAIN(4,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 1

MX_AUX_COEFFICIENT(4,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 2
MX_AUX_GAIN(4,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 2

MX_AUX_COEFFICIENT(5,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 5, axle 1
MX_AUX_GAIN(5,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(5,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(5,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(5,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(5,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(5,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(5,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 5, axle 1

MX_AUX_COEFFICIENT(5,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 5, axle 2
MX_AUX_GAIN(5,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(5,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(5,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(5,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(5,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(5,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(5,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 5, axle 2

MX_AUX_COEFFICIENT(5,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 5, axle 3
MX_AUX_GAIN(5,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(5,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(5,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(5,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(5,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(5,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(5,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 5, axle 3

MX_AUX_COEFFICIENT(6,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 6, axle 1
MX_AUX_GAIN(6,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(6,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(6,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(6,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(6,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(6,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(6,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 6, axle 1

MX_AUX_COEFFICIENT(6,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 6, axle 2
MX_AUX_GAIN(6,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(6,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(6,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(6,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(6,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(6,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(6,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 6, axle 2

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(1) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(3) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(5) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(5)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(5)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(5) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMY

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(5) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 30 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,1) SPLINE ! unit 1, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,2) SPLINE ! unit 1, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,3,1) SPLINE ! unit 3, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,3,2) SPLINE ! unit 3, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,1,1) SPLINE ! unit 5, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,1,2) SPLINE ! unit 5, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,2,1) SPLINE ! unit 5, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(5,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,2,2) SPLINE ! unit 5, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(5,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,3,1) SPLINE ! unit 5, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(5,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(5,3,2) SPLINE ! unit 5, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(5,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(5,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(5,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(5,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(6,1,1) SPLINE ! unit 6, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(6,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(6,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(6,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(6,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(6,1,2) SPLINE ! unit 6, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(6,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(6,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(6,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(6,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(6,2,1) SPLINE ! unit 6, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(6,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(6,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(6,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(6,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(6,2,2) SPLINE ! unit 6, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(6,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(6,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(6,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(6,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(1) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(1) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(3) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(3) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(5) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(5)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(5)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(5) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(5) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(3) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMZ

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(5) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(5) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(5) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(5) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(5) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(6) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(6) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 6 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(1) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(1) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(3) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(3) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(5) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(5)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(5)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(5) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(5) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 30 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(3,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 3, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(3,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(3,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(3,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 3, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(3,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(3,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(5,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 5, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(5,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(5,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(5,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(5,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 5,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(5,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 5, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(5,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(5,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(5,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(5,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 5,
                                      ! axle 1, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 60 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,1,1,1) 2D_FROM_ZERO ! unit 5, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,1,2,1) 2D_FROM_ZERO ! unit 5, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,2,1,1) 2D_FROM_ZERO ! unit 5, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,2,1,2) 2D_FROM_ZERO ! unit 5, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,2,2,1) 2D_FROM_ZERO ! unit 5, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,2,2,2) 2D_FROM_ZERO ! unit 5, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,3,1,1) 2D_FROM_ZERO ! unit 5, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,3,1,2) 2D_FROM_ZERO ! unit 5, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,3,2,1) 2D_FROM_ZERO ! unit 5, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(5,3,2,2) 2D_FROM_ZERO ! unit 5, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(5,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(5,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(5,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(5,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(5,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(5,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,1,1,1) 2D_FROM_ZERO ! unit 6, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,1,1,2) 2D_FROM_ZERO ! unit 6, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,1,2,1) 2D_FROM_ZERO ! unit 6, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,1,2,2) 2D_FROM_ZERO ! unit 6, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,2,1,1) 2D_FROM_ZERO ! unit 6, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,2,1,2) 2D_FROM_ZERO ! unit 6, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,2,2,1) 2D_FROM_ZERO ! unit 6, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(6,2,2,2) 2D_FROM_ZERO ! unit 6, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(6,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(6,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(6,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(6,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(6,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(6,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 27 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IDIFF are used to identify the dataset when
! reading data.

M_DIFF_VISC_CONSTANT(1,1) 0 ; N-m ! Constant this torque difference, veh 1, 1st
                            ! drive axle diff
M_DIFF_VISC_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(1,2) 0 ; N-m ! Constant this torque difference, veh 1, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(1,3) 0 ; N-m ! Constant this torque difference, veh 1,
                            ! inter-axle diff for axles 1,2
M_DIFF_VISC_OFFSET(1,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,1) 0 ; N-m ! Constant this torque difference, veh 2, 1st
                            ! drive axle diff
M_DIFF_VISC_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,2) 0 ; N-m ! Constant this torque difference, veh 2, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,3) 0 ; N-m ! Constant this torque difference, veh 2,
                            ! inter-axle diff for axles 1,2
M_DIFF_VISC_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(3,1) 0 ; N-m ! Constant this torque difference, veh 3, 1st
                            ! drive axle diff
M_DIFF_VISC_OFFSET(3,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(3,2) 0 ; N-m ! Constant this torque difference, veh 3, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(3,3) 0 ; N-m ! Constant this torque difference, veh 3,
                            ! inter-axle diff for axles 1,2
M_DIFF_VISC_OFFSET(3,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

M_SW_COEFFICIENT(1) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(1)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(1)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(1) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(1)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_COEFFICIENT(2) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(2)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(2)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(2) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(2)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_COEFFICIENT(3) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(3)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(3)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(3) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(3)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Transmission torque due to compliance twist rate, added to torque
! calculated from the parameter DRIVELINE_ZETA. Compliance damping torque is a
! function of compliance twist angular rate (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Compliance damping
! torque from the calculation can be adjusted with M_TRANS_AV_GAIN and
! M_TRANS_AV_OFFSET. Compliance twist angular rate used in the calculation can be
! adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IVEHICLE is used to identify the dataset when reading data.

M_TRANS_AV_CONSTANT(1) 0 ; N-m ! [D] Constant compliance damping torque
M_TRANS_AV_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get compliance damping
                       ! torque

M_TRANS_AV_CONSTANT(2) 0 ; N-m ! [D] Constant compliance damping torque
M_TRANS_AV_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get compliance damping
                       ! torque

M_TRANS_AV_CONSTANT(3) 0 ; N-m ! [D] Constant compliance damping torque
M_TRANS_AV_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get compliance damping
                       ! torque

! M_TRANS_ROT: Transmission torque due to compliance twist, added to torque
! calculated from the parameter DRIVELINE_FREQ. Compliance torque is a function of
! compliance twist angle (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Compliance torque from the calculation can be
! adjusted with M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used
! in the calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.
! This configurable function supports 3 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

M_TRANS_ROT_CONSTANT(1) 0 ; N-m ! [D] Constant compliance torque
M_TRANS_ROT_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get compliance torque

M_TRANS_ROT_CONSTANT(2) 0 ; N-m ! [D] Constant compliance torque
M_TRANS_ROT_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get compliance torque

M_TRANS_ROT_CONSTANT(3) 0 ; N-m ! [D] Constant compliance torque
M_TRANS_ROT_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get compliance torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON. This configurable function supports 3 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

PBK_CON_CONSTANT(1) 10 ; MPa ! Constant brake pressure
PBK_CON_GAIN(1)     1 ! Gain multiplied with calculated value to get brake pressure
PBK_CON_OFFSET(1)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(2) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(2)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(3) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(3)   0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 30
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,1) MPa ;
PBK_DL_FZ_CONSTANT(1,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,2) MPa ;
PBK_DL_FZ_CONSTANT(1,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,1) MPa ;
PBK_DL_FZ_CONSTANT(1,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,2) MPa ;
PBK_DL_FZ_CONSTANT(1,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(1,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, left
                            ! side
PBK_DL_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,1) MPa ;
PBK_DL_FZ_CONSTANT(1,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, left side

PBK_DL_COEFFICIENT(1,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, right
                            ! side
PBK_DL_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,2) MPa ;
PBK_DL_FZ_CONSTANT(1,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,2) MPa ;
PBK_DL_FZ_CONSTANT(2,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

PBK_DL_COEFFICIENT(2,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, left
                            ! side
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

PBK_DL_COEFFICIENT(2,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, right
                            ! side
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(3,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,1) MPa ;
PBK_DL_FZ_CONSTANT(3,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,2) MPa ;
PBK_DL_FZ_CONSTANT(3,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

PBK_DL_COEFFICIENT(3,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, left
                            ! side
PBK_DL_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,1) MPa ;
PBK_DL_FZ_CONSTANT(3,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, left side

PBK_DL_COEFFICIENT(3,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, right
                            ! side
PBK_DL_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,2) MPa ;
PBK_DL_FZ_CONSTANT(3,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, right side

PBK_DL_COEFFICIENT(3,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 3, left
                            ! side
PBK_DL_GAIN(3,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,3,1) MPa ;
PBK_DL_FZ_CONSTANT(3,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 3, left side

PBK_DL_COEFFICIENT(3,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 3, right
                            ! side
PBK_DL_GAIN(3,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,3,2) MPa ;
PBK_DL_FZ_CONSTANT(3,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 3, right side

PBK_DL_COEFFICIENT(4,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, left
                            ! side
PBK_DL_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,1,1) MPa ;
PBK_DL_FZ_CONSTANT(4,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, left side

PBK_DL_COEFFICIENT(4,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, right
                            ! side
PBK_DL_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,1,2) MPa ;
PBK_DL_FZ_CONSTANT(4,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, right side

PBK_DL_COEFFICIENT(4,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, left
                            ! side
PBK_DL_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,1) MPa ;
PBK_DL_FZ_CONSTANT(4,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, left side

PBK_DL_COEFFICIENT(4,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, right
                            ! side
PBK_DL_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,2) MPa ;
PBK_DL_FZ_CONSTANT(4,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, right side

PBK_DL_COEFFICIENT(5,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 1, left
                            ! side
PBK_DL_GAIN(5,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,1,1) MPa ;
PBK_DL_FZ_CONSTANT(5,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 1, left side

PBK_DL_COEFFICIENT(5,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 1, right
                            ! side
PBK_DL_GAIN(5,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,1,2) MPa ;
PBK_DL_FZ_CONSTANT(5,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 1, right side

PBK_DL_COEFFICIENT(5,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 2, left
                            ! side
PBK_DL_GAIN(5,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,2,1) MPa ;
PBK_DL_FZ_CONSTANT(5,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 2, left side

PBK_DL_COEFFICIENT(5,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 2, right
                            ! side
PBK_DL_GAIN(5,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,2,2) MPa ;
PBK_DL_FZ_CONSTANT(5,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 2, right side

PBK_DL_COEFFICIENT(5,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 3, left
                            ! side
PBK_DL_GAIN(5,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,3,1) MPa ;
PBK_DL_FZ_CONSTANT(5,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 3, left side

PBK_DL_COEFFICIENT(5,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 5, axle 3, right
                            ! side
PBK_DL_GAIN(5,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(5,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(5,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(5,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(5,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(5,3,2) MPa ;
PBK_DL_FZ_CONSTANT(5,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 5, axle 3, right side

PBK_DL_COEFFICIENT(6,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 6, axle 1, left
                            ! side
PBK_DL_GAIN(6,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(6,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(6,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(6,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(6,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(6,1,1) MPa ;
PBK_DL_FZ_CONSTANT(6,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 6, axle 1, left side

PBK_DL_COEFFICIENT(6,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 6, axle 1, right
                            ! side
PBK_DL_GAIN(6,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(6,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(6,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(6,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(6,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(6,1,2) MPa ;
PBK_DL_FZ_CONSTANT(6,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 6, axle 1, right side

PBK_DL_COEFFICIENT(6,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 6, axle 2, left
                            ! side
PBK_DL_GAIN(6,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(6,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(6,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(6,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(6,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(6,2,1) MPa ;
PBK_DL_FZ_CONSTANT(6,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 6, axle 2, left side

PBK_DL_COEFFICIENT(6,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 6, axle 2, right
                            ! side
PBK_DL_GAIN(6,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(6,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(6,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(6,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(6,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(6,2,2) MPa ;
PBK_DL_FZ_CONSTANT(6,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 6, axle 2, right side

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 15 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(3,1) 1 ; - ! Constant gain, unit 3, axle 1
R_STEER_SPEED_GAIN(3,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(5,1) 1 ; - ! Constant gain, unit 5, axle 1
R_STEER_SPEED_GAIN(5,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(2) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(2) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(2) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(3) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(3) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(3) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(2) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(2) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(2) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(2) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(3) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(3) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(3) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(3) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AX_BRAKE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AX_THROTTLE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AY_LEFT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AY_RIGHT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 80 km/h
SPEED_TARGET_CONSTANT(1) 100 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(2)  2  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 80 km/h
SPEED_TARGET_CONSTANT(2) 80 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;
SPEED_TARGET_S_CONSTANT(2) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(3)  3  ! User-defined ID number for this dataset
SPEED_TARGET_CONSTANT(3) -0.4422253933 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(3) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(3) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(3) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(3) km/h ;
SPEED_TARGET_S_CONSTANT(3) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(4)  4  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 80 km/h
SPEED_TARGET_CONSTANT(4) 80 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(4) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(4) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(4) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(4) km/h ;
SPEED_TARGET_S_CONSTANT(4) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(5)  5  ! User-defined ID number for this dataset
SPEED_TARGET_CONSTANT(5) -0.02155581194 ; km/h ! Constant speed component due to
                                        ! time
SPEED_TARGET_GAIN(5) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(5) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(5) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(5) km/h ;
SPEED_TARGET_S_CONSTANT(5) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 30 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(5,1,1) SPLINE ! unit 5, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(5,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(5,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(5,1,2) SPLINE ! unit 5, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(5,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(5,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_AXLE_JNC_STEER of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Steer from the calculation can be adjusted with SUSP_AXLE_ROLL_STEER_GAIN
! and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER. Jounce used in the calculation can
! be adjusted with JNC_SCALE_AXLE_STEER and JNC_START_AXLE_STEER. The derivative of
! this function is used internally. This configurable function supports 15 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 3
SUSP_AXLE_ROLL_STEER_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,3) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 3

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(2,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 2, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(2,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 2, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(3,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(3,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 3, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(3,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(3,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 3, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 3
SUSP_AXLE_ROLL_STEER_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(3,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(3,3) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(3,3) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 3, axle 3

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(4,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(4,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(4,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 4, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(4,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(4,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 4, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(5,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 5, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(5,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(5,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(5,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(5,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(5,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(5,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 5, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(5,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 5, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(5,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(5,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(5,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(5,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(5,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(5,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 5, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(5,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 5, axle 3
SUSP_AXLE_ROLL_STEER_GAIN(5,3) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(5,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(5,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(5,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(5,3) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(5,3) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 5, axle 3

SUSP_AXLE_ROLL_STEER_COEFFICIENT(6,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 6, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(6,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(6,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(6,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(6,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(6,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(6,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 6, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(6,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 6, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(6,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(6,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(6,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(6,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(6,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(6,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 6, axle 2

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of roll and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_AXLE_ROLL of roll
! (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the calculation can be
! adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET. Jounce used in the
! calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_DIVE_AXLE and ROLL_START_SUSP_DIVE_AXLE. The derivative of this
! function is used internally. This configurable function supports 15 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 1
SUSP_DIVE_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 1

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 2
SUSP_DIVE_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 2

SUSP_DIVE_AXLE_CONSTANT(1,3) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 3
SUSP_DIVE_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 3

SUSP_DIVE_AXLE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 2, axle 1
SUSP_DIVE_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 2, axle 1

SUSP_DIVE_AXLE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 2, axle 2
SUSP_DIVE_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(2,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 2, axle 2

SUSP_DIVE_AXLE_CONSTANT(3,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 3, axle 1
SUSP_DIVE_AXLE_GAIN(3,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(3,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(3,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 3, axle 1

SUSP_DIVE_AXLE_CONSTANT(3,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 3, axle 2
SUSP_DIVE_AXLE_GAIN(3,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(3,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(3,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 3, axle 2

SUSP_DIVE_AXLE_CONSTANT(3,3) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 3, axle 3
SUSP_DIVE_AXLE_GAIN(3,3) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(3,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(3,3) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(3,3) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 3, axle 3

SUSP_DIVE_AXLE_CONSTANT(4,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 4, axle 1
SUSP_DIVE_AXLE_GAIN(4,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(4,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(4,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 4, axle 1

SUSP_DIVE_AXLE_CONSTANT(4,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 4, axle 2
SUSP_DIVE_AXLE_GAIN(4,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(4,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(4,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 4, axle 2

SUSP_DIVE_AXLE_CONSTANT(5,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 5, axle 1
SUSP_DIVE_AXLE_GAIN(5,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(5,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(5,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(5,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 5, axle 1

SUSP_DIVE_AXLE_CONSTANT(5,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 5, axle 2
SUSP_DIVE_AXLE_GAIN(5,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(5,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(5,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(5,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 5, axle 2

SUSP_DIVE_AXLE_CONSTANT(5,3) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 5, axle 3
SUSP_DIVE_AXLE_GAIN(5,3) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(5,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(5,3) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(5,3) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 5, axle 3

SUSP_DIVE_AXLE_CONSTANT(6,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 6, axle 1
SUSP_DIVE_AXLE_GAIN(6,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(6,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(6,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(6,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 6, axle 1

SUSP_DIVE_AXLE_CONSTANT(6,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 6, axle 2
SUSP_DIVE_AXLE_GAIN(6,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(6,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(6,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(6,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 6, axle 2

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward can be a nonlinear CARPET function of roll and jounce or a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_X_AXLE_ROLL of roll (CONSTANT, COEFFICIENT, or TABLE). X axle movement forward
! from the calculation can be adjusted with SUSP_X_AXLE_GAIN and SUSP_X_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_X_AXLE and
! JNC_START_SUSP_X_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_X_AXLE and ROLL_START_SUSP_X_AXLE. The derivative of this function
! is used internally. This configurable function supports 15 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 1
SUSP_X_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 1

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 2
SUSP_X_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 2

SUSP_X_AXLE_CONSTANT(1,3) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 3
SUSP_X_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 3

SUSP_X_AXLE_CONSTANT(2,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 2, axle 1
SUSP_X_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 2, axle 1

SUSP_X_AXLE_CONSTANT(2,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 2, axle 2
SUSP_X_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(2,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 2, axle 2

SUSP_X_AXLE_CONSTANT(3,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 3, axle 1
SUSP_X_AXLE_GAIN(3,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(3,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(3,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 3, axle 1

SUSP_X_AXLE_CONSTANT(3,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 3, axle 2
SUSP_X_AXLE_GAIN(3,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(3,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(3,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 3, axle 2

SUSP_X_AXLE_CONSTANT(3,3) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 3, axle 3
SUSP_X_AXLE_GAIN(3,3) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(3,3) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(3,3) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 3, axle 3

SUSP_X_AXLE_CONSTANT(4,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 4, axle 1
SUSP_X_AXLE_GAIN(4,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(4,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(4,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 4, axle 1

SUSP_X_AXLE_CONSTANT(4,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 4, axle 2
SUSP_X_AXLE_GAIN(4,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(4,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(4,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 4, axle 2

SUSP_X_AXLE_CONSTANT(5,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 5, axle 1
SUSP_X_AXLE_GAIN(5,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(5,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(5,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(5,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 5, axle 1

SUSP_X_AXLE_CONSTANT(5,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 5, axle 2
SUSP_X_AXLE_GAIN(5,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(5,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(5,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(5,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 5, axle 2

SUSP_X_AXLE_CONSTANT(5,3) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 5, axle 3
SUSP_X_AXLE_GAIN(5,3) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(5,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(5,3) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(5,3) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 5, axle 3

SUSP_X_AXLE_CONSTANT(6,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 6, axle 1
SUSP_X_AXLE_GAIN(6,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(6,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(6,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(6,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 6, axle 1

SUSP_X_AXLE_CONSTANT(6,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 6, axle 2
SUSP_X_AXLE_GAIN(6,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(6,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(6,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(6,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 6, axle 2

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 15 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,3) SPLINE ! unit 1, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,1) SPLINE ! unit 2, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,1) SPLINE ! unit 3, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,2) SPLINE ! unit 3, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,3) SPLINE ! unit 3, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,1) SPLINE ! unit 4, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,2) SPLINE ! unit 4, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(5,1) SPLINE ! unit 5, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(5,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(5,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(5,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(5,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(5,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(5,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(5,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 5, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(5,2) SPLINE ! unit 5, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(5,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(5,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(5,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(5,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(5,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(5,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(5,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 5, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(5,3) SPLINE ! unit 5, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(5,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(5,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(5,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(5,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(5,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(5,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(5,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 5, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(6,1) SPLINE ! unit 6, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(6,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(6,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(6,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(6,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(6,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(6,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(6,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 6, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(6,2) SPLINE ! unit 6, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(6,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(6,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(6,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(6,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(6,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(6,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(6,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 6, axle 2

! THROTTLE_ENGINE: Normalized open-loop throttle request. Normalized throttle
! request is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Normalized throttle request from the
! calculation can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET.
! Time used in the calculation can be adjusted with TSCALE_THROTTLE and
! TSTART_THROTTLE. This configurable function supports 3 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

THROTTLE_ENGINE_CONSTANT(1) 0 ; - ! [D] Constant normalized throttle request
THROTTLE_ENGINE_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle request

THROTTLE_ENGINE_CONSTANT(2) 0 ; - ! [D] Constant normalized throttle request
THROTTLE_ENGINE_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle request

THROTTLE_ENGINE_CONSTANT(3) 0 ; - ! [D] Constant normalized throttle request
THROTTLE_ENGINE_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle request

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV. This configurable function supports 3 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

TPREV_CONSTANT(1) 0.6 ; s ! Constant preview time
TPREV_GAIN(1)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(1)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(2) 0.75 ; s ! Constant preview time
TPREV_GAIN(2)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(2)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(3) 0.75 ; s ! Constant preview time
TPREV_GAIN(3)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(3)     0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 51 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IGEAR are used to identify the dataset when
! reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 51
 0.2, 51
 0.8, 100
 1, 100
ENDTABLE
UPSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 73
 0.2, 73
 0.8, 150
 1, 150
ENDTABLE
UPSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 86
 0.2, 86
 0.8, 220
 1, 220
ENDTABLE
UPSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 112
 0.2, 112
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 130
 0.2, 130
 0.8, 310
 1, 310
ENDTABLE
UPSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 146
 0.2, 146
 0.8, 349
 1, 349
ENDTABLE
UPSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,7) LINEAR_FLAT ! vehicle 1, gear shift 7<->8
 0, 167
 0.2, 167
 0.8, 411
 1, 411
ENDTABLE
UPSHIFT_TRANS_GAIN(1,7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,8) LINEAR_FLAT ! vehicle 1, gear shift 8<->9
 0, 195
 0.2, 195
 0.8, 481
 1, 481
ENDTABLE
UPSHIFT_TRANS_GAIN(1,8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,9) LINEAR_FLAT ! vehicle 1, gear shift 9<->10
 0, 229
 0.2, 229
 0.8, 563
 1, 563
ENDTABLE
UPSHIFT_TRANS_GAIN(1,9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,10) LINEAR_FLAT ! vehicle 1, gear shift 10<->11
 0, 273
 0.2, 273
 0.8, 659
 1, 659
ENDTABLE
UPSHIFT_TRANS_GAIN(1,10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,11) LINEAR_FLAT ! vehicle 1, gear shift 11<->12
 0, 321
 0.2, 321
 0.8, 786
 1, 786
ENDTABLE
UPSHIFT_TRANS_GAIN(1,11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,12) LINEAR_FLAT ! vehicle 1, gear shift 12<->13
 0, 386
 0.2, 386
 0.8, 923
 1, 923
ENDTABLE
UPSHIFT_TRANS_GAIN(1,12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,13) LINEAR_FLAT ! vehicle 1, gear shift 13<->14
 0, 453
 0.2, 453
 0.8, 1111
 1, 1111
ENDTABLE
UPSHIFT_TRANS_GAIN(1,13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,14) LINEAR_FLAT ! vehicle 1, gear shift 14<->15
 0, 534
 0.2, 534
 0.8, 1304
 1, 1304
ENDTABLE
UPSHIFT_TRANS_GAIN(1,14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,15) LINEAR_FLAT ! vehicle 1, gear shift 15<->16
 0, 625
 0.2, 625
 0.8, 1538
 1, 1538
ENDTABLE
UPSHIFT_TRANS_GAIN(1,15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,16) LINEAR_FLAT ! vehicle 1, gear shift 16<->17
 0, 727
 0.2, 727
 0.8, 1800
 1, 1800
ENDTABLE
UPSHIFT_TRANS_GAIN(1,16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,17) LINEAR_FLAT ! vehicle 1, gear shift 17<->18
 0, 856
 0.2, 856
 0.8, 2093
 1, 2093
ENDTABLE
UPSHIFT_TRANS_GAIN(1,17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(1,17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(1,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 51
 0.2, 51
 0.8, 100
 1, 100
ENDTABLE
UPSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 73
 0.2, 73
 0.8, 150
 1, 150
ENDTABLE
UPSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 86
 0.2, 86
 0.8, 220
 1, 220
ENDTABLE
UPSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 112
 0.2, 112
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 130
 0.2, 130
 0.8, 310
 1, 310
ENDTABLE
UPSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,6) LINEAR_FLAT ! vehicle 2, gear shift 6<->7
 0, 146
 0.2, 146
 0.8, 349
 1, 349
ENDTABLE
UPSHIFT_TRANS_GAIN(2,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,7) LINEAR_FLAT ! vehicle 2, gear shift 7<->8
 0, 167
 0.2, 167
 0.8, 411
 1, 411
ENDTABLE
UPSHIFT_TRANS_GAIN(2,7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,8) LINEAR_FLAT ! vehicle 2, gear shift 8<->9
 0, 195
 0.2, 195
 0.8, 481
 1, 481
ENDTABLE
UPSHIFT_TRANS_GAIN(2,8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,9) LINEAR_FLAT ! vehicle 2, gear shift 9<->10
 0, 229
 0.2, 229
 0.8, 563
 1, 563
ENDTABLE
UPSHIFT_TRANS_GAIN(2,9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,10) LINEAR_FLAT ! vehicle 2, gear shift 10<->11
 0, 273
 0.2, 273
 0.8, 659
 1, 659
ENDTABLE
UPSHIFT_TRANS_GAIN(2,10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,11) LINEAR_FLAT ! vehicle 2, gear shift 11<->12
 0, 321
 0.2, 321
 0.8, 786
 1, 786
ENDTABLE
UPSHIFT_TRANS_GAIN(2,11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,12) LINEAR_FLAT ! vehicle 2, gear shift 12<->13
 0, 386
 0.2, 386
 0.8, 923
 1, 923
ENDTABLE
UPSHIFT_TRANS_GAIN(2,12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,13) LINEAR_FLAT ! vehicle 2, gear shift 13<->14
 0, 453
 0.2, 453
 0.8, 1111
 1, 1111
ENDTABLE
UPSHIFT_TRANS_GAIN(2,13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,14) LINEAR_FLAT ! vehicle 2, gear shift 14<->15
 0, 534
 0.2, 534
 0.8, 1304
 1, 1304
ENDTABLE
UPSHIFT_TRANS_GAIN(2,14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,15) LINEAR_FLAT ! vehicle 2, gear shift 15<->16
 0, 625
 0.2, 625
 0.8, 1538
 1, 1538
ENDTABLE
UPSHIFT_TRANS_GAIN(2,15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,16) LINEAR_FLAT ! vehicle 2, gear shift 16<->17
 0, 727
 0.2, 727
 0.8, 1800
 1, 1800
ENDTABLE
UPSHIFT_TRANS_GAIN(2,16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,17) LINEAR_FLAT ! vehicle 2, gear shift 17<->18
 0, 856
 0.2, 856
 0.8, 2093
 1, 2093
ENDTABLE
UPSHIFT_TRANS_GAIN(2,17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 51
 0.2, 51
 0.8, 100
 1, 100
ENDTABLE
UPSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 73
 0.2, 73
 0.8, 150
 1, 150
ENDTABLE
UPSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 86
 0.2, 86
 0.8, 220
 1, 220
ENDTABLE
UPSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 112
 0.2, 112
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 130
 0.2, 130
 0.8, 310
 1, 310
ENDTABLE
UPSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,6) LINEAR_FLAT ! vehicle 3, gear shift 6<->7
 0, 146
 0.2, 146
 0.8, 349
 1, 349
ENDTABLE
UPSHIFT_TRANS_GAIN(3,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,7) LINEAR_FLAT ! vehicle 3, gear shift 7<->8
 0, 167
 0.2, 167
 0.8, 411
 1, 411
ENDTABLE
UPSHIFT_TRANS_GAIN(3,7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,8) LINEAR_FLAT ! vehicle 3, gear shift 8<->9
 0, 195
 0.2, 195
 0.8, 481
 1, 481
ENDTABLE
UPSHIFT_TRANS_GAIN(3,8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,9) LINEAR_FLAT ! vehicle 3, gear shift 9<->10
 0, 229
 0.2, 229
 0.8, 563
 1, 563
ENDTABLE
UPSHIFT_TRANS_GAIN(3,9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,10) LINEAR_FLAT ! vehicle 3, gear shift 10<->11
 0, 273
 0.2, 273
 0.8, 659
 1, 659
ENDTABLE
UPSHIFT_TRANS_GAIN(3,10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,11) LINEAR_FLAT ! vehicle 3, gear shift 11<->12
 0, 321
 0.2, 321
 0.8, 786
 1, 786
ENDTABLE
UPSHIFT_TRANS_GAIN(3,11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,12) LINEAR_FLAT ! vehicle 3, gear shift 12<->13
 0, 386
 0.2, 386
 0.8, 923
 1, 923
ENDTABLE
UPSHIFT_TRANS_GAIN(3,12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,13) LINEAR_FLAT ! vehicle 3, gear shift 13<->14
 0, 453
 0.2, 453
 0.8, 1111
 1, 1111
ENDTABLE
UPSHIFT_TRANS_GAIN(3,13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,14) LINEAR_FLAT ! vehicle 3, gear shift 14<->15
 0, 534
 0.2, 534
 0.8, 1304
 1, 1304
ENDTABLE
UPSHIFT_TRANS_GAIN(3,14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,15) LINEAR_FLAT ! vehicle 3, gear shift 15<->16
 0, 625
 0.2, 625
 0.8, 1538
 1, 1538
ENDTABLE
UPSHIFT_TRANS_GAIN(3,15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,16) LINEAR_FLAT ! vehicle 3, gear shift 16<->17
 0, 727
 0.2, 727
 0.8, 1800
 1, 1800
ENDTABLE
UPSHIFT_TRANS_GAIN(3,16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,17) LINEAR_FLAT ! vehicle 3, gear shift 17<->18
 0, 856
 0.2, 856
 0.8, 2093
 1, 2093
ENDTABLE
UPSHIFT_TRANS_GAIN(3,17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(3,17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(3,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER PLATOON = 199; - ; Platooning Truck (object type)
DEFINE_PARAMETER KP = 0.4; - ;
DEFINE_PARAMETER KI = 0.00125; - ;
DEFINE_PARAMETER TRAFFIC = 200; - ; Traffic vehicle (object type)

DEFINE_VARIABLE SPACING_TARGET = 10; - ;
DEFINE_VARIABLE INT_TARGET_DELTA_2 = -3.49852; - ;
DEFINE_VARIABLE INT_TARGET_DELTA_3 = 0.79125; - ;

DEFINE_OUTPUT PathID = 1; - ; Current Path ID 
DEFINE_OUTPUT target_delta_2 = -0.296071; - ; target_delta_2 
DEFINE_OUTPUT target_delta_3 = -0.0173452; - ; target_delta_3 

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN PBK_CON_CONSTANT(1) = IF(STATION <= 200, 1e+07, PBK_CON_CONSTANT(1));
EQ_IN KP = IF(DISS1_1 < 3, 0.4, 0.1);
EQ_IN SPEED_TARGET_CONSTANT(3) = VX + KP*TARGET_DELTA_2 + KI*INT_TARGET_DELTA_2;
EQ_IN IMP_PCON_BK_2 = PBK_CON;
EQ_IN KP = IF(DISS1_1 < 3, 0.4, 0.1);
EQ_IN SPEED_TARGET_CONSTANT(5) = VX + KP*TARGET_DELTA_3 + KI*INT_TARGET_DELTA_3;
EQ_IN IMP_PCON_BK_3 = PBK_CON;

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT PATHID = PATH_ID_DM(1);
EQ_OUT TARGET_DELTA_2 = DISS2_1 -SPACING_TARGET;
EQ_OUT TARGET_DELTA_3 = DISS3_2 -SPACING_TARGET;

!------------------------------------------------------------------------------------
! DIFFERENTIAL EQUATIONS FOR NEW STATE VARIABLES (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_DIFFERENTIAL INT_TARGET_DELTA_2 = TARGET_DELTA_2;
EQ_DIFFERENTIAL INT_TARGET_DELTA_3 = TARGET_DELTA_3;

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L10   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L10
SV_ABS_ON_OFF_L11   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L11
SV_ABS_ON_OFF_L12   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L12
SV_ABS_ON_OFF_L13   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L13
SV_ABS_ON_OFF_L14   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L14
SV_ABS_ON_OFF_L15   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L15
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_L3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_L4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_L5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_L6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_L7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_ABS_ON_OFF_L8    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L8
SV_ABS_ON_OFF_L9    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L9
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R10   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L10
SV_ABS_ON_OFF_R11   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L11
SV_ABS_ON_OFF_R12   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L12
SV_ABS_ON_OFF_R13   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L13
SV_ABS_ON_OFF_R14   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L14
SV_ABS_ON_OFF_R15   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L15
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_R4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_R5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_R6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_R7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_ABS_ON_OFF_R8    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L8
SV_ABS_ON_OFF_R9    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L9
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_2   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_3   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_4   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_5   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_6   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 145.3016803 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_2 146.9403195 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_3 171.7537153 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_4 173.3869598 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_5 198.4846296 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_6 200.117391 ; m ! Road path station for tracked aero road point
SV_ART_H1_OLD 0.7529917443 ; deg ! Articulation (2-1-3) for hitch 1
SV_ART_H3_OLD 0.6515193117 ; deg ! Articulation (2-1-3) for hitch 3
SV_ART_H5_OLD 0.6690166099 ; deg ! Articulation (2-1-3) for hitch 5
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission {TC_Lock}, veh #1
SV_AT_LOCKED_2      0 ; - ! Lock state of automatic transmission {TC_Lock}, veh #2
SV_AT_LOCKED_3      0 ; - ! Lock state of automatic transmission {TC_Lock}, veh #3
SV_AVX -0.04347112292 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 1 {AVx}
SV_AVX_2 -0.03000668682 ; deg/s ! ODE: Body-X roll rate of sprung-mass 2 {AVx_2}
SV_AVX_3 -0.008448960272 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 3
                         ! {AVx_3}
SV_AVX_4 -0.0147736611 ; deg/s ! ODE: Body-X roll rate of sprung-mass 4 {AVx_4}
SV_AVX_5 0.002631114906 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 5
                        ! {AVx_5}
SV_AVX_6 -0.004532181826 ; deg/s ! ODE: Body-X roll rate of sprung-mass 6 {AVx_6}
SV_AVX_A1 0.007229289296 ; deg/s ! ODE: Roll rate of axle 1
SV_AVX_A10 0.006191335784 ; deg/s ! ODE: Roll rate of axle 10
SV_AVX_A11 0.004425313338 ; deg/s ! ODE: Roll rate of axle 11
SV_AVX_A12 0.001824527851 ; deg/s ! ODE: Roll rate of axle 12
SV_AVX_A13 0.0004472557168 ; deg/s ! ODE: Roll rate of axle 13
SV_AVX_A14 0.001155675026 ; deg/s ! ODE: Roll rate of axle 14
SV_AVX_A15 -0.0007792992179 ; deg/s ! ODE: Roll rate of axle 15
SV_AVX_A2 0.01095424612 ; deg/s ! ODE: Roll rate of axle 2
SV_AVX_A3 0.02158871469 ; deg/s ! ODE: Roll rate of axle 3
SV_AVX_A4 0.02140758737 ; deg/s ! ODE: Roll rate of axle 4
SV_AVX_A5 0.02627247322 ; deg/s ! ODE: Roll rate of axle 5
SV_AVX_A6 0.008858533857 ; deg/s ! ODE: Roll rate of axle 6
SV_AVX_A7 0.006811214527 ; deg/s ! ODE: Roll rate of axle 7
SV_AVX_A8 0.006065112694 ; deg/s ! ODE: Roll rate of axle 8
SV_AVX_A9 0.007305739765 ; deg/s ! ODE: Roll rate of axle 9
SV_AVY -0.003277254215 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 1 {AVy}
SV_AVY_2 0.00014385745 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass 2 {AVy_2}
SV_AVY_3 -0.002294688464 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 3
                         ! {AVy_3}
SV_AVY_4 0.000590983189 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass 4 {AVy_4}
SV_AVY_5 -0.002368849026 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 5
                         ! {AVy_5}
SV_AVY_6 0.0005668088076 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass 6 {AVy_6}
SV_AVY_L1 -0.004856504011 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L10 0.0007614352836 ; rpm ! ODE: Spin of wheel L10 {AVy_L10}
SV_AVY_L10_OLD 0.0007720189369 ; rpm ! Spin of wheel L10 (previous time step)
SV_AVY_L11 0.000492825141 ; rpm ! ODE: Spin of wheel L11 {AVy_L11}
SV_AVY_L11_OLD 0.0005073861503 ; rpm ! Spin of wheel L11 (previous time step)
SV_AVY_L12 0.0005496223795 ; rpm ! ODE: Spin of wheel L12 {AVy_L12}
SV_AVY_L12_OLD 0.0005576315102 ; rpm ! Spin of wheel L12 (previous time step)
SV_AVY_L13 0.0005828420785 ; rpm ! ODE: Spin of wheel L13 {AVy_L13}
SV_AVY_L13_OLD 0.0005912877086 ; rpm ! Spin of wheel L13 (previous time step)
SV_AVY_L14 0.001031333059 ; rpm ! ODE: Spin of wheel L14 {AVy_L14}
SV_AVY_L14_OLD 0.001039439916 ; rpm ! Spin of wheel L14 (previous time step)
SV_AVY_L15 0.001034899496 ; rpm ! ODE: Spin of wheel L15 {AVy_L15}
SV_AVY_L15_OLD 0.001043010034 ; rpm ! Spin of wheel L15 (previous time step)
SV_AVY_L1_OLD -0.004892980502 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 -0.00320603061 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD -0.00322969324 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_L3 -0.003209859699 ; rpm ! ODE: Spin of wheel L3 {AVy_L3}
SV_AVY_L3_OLD -0.003233443838 ; rpm ! Spin of wheel L3 (previous time step)
SV_AVY_L4 -0.001600063196 ; rpm ! ODE: Spin of wheel L4 {AVy_L4}
SV_AVY_L4_OLD -0.001621388442 ; rpm ! Spin of wheel L4 (previous time step)
SV_AVY_L5 -0.001601356646 ; rpm ! ODE: Spin of wheel L5 {AVy_L5}
SV_AVY_L5_OLD -0.001622522629 ; rpm ! Spin of wheel L5 (previous time step)
SV_AVY_L6 -4.675979089e-05 ; rpm ! ODE: Spin of wheel L6 {AVy_L6}
SV_AVY_L6_OLD -2.808010273e-05 ; rpm ! Spin of wheel L6 (previous time step)
SV_AVY_L7 0.0002303612917 ; rpm ! ODE: Spin of wheel L7 {AVy_L7}
SV_AVY_L7_OLD 0.0002406861606 ; rpm ! Spin of wheel L7 (previous time step)
SV_AVY_L8 0.0002443122304 ; rpm ! ODE: Spin of wheel L8 {AVy_L8}
SV_AVY_L8_OLD 0.0002551249525 ; rpm ! Spin of wheel L8 (previous time step)
SV_AVY_L9 0.0007779801175 ; rpm ! ODE: Spin of wheel L9 {AVy_L9}
SV_AVY_L9_OLD 0.0007886489668 ; rpm ! Spin of wheel L9 (previous time step)
SV_AVY_R1 0.003855525923 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R10 -0.0001232027695 ; rpm ! ODE: Spin of wheel R10 {AVy_R10}
SV_AVY_R10_OLD -0.0001342930385 ; rpm ! Spin of wheel R10 (previous time step)
SV_AVY_R11 -0.001592453736 ; rpm ! ODE: Spin of wheel R11 {AVy_R11}
SV_AVY_R11_OLD -0.001602372123 ; rpm ! Spin of wheel R11 (previous time step)
SV_AVY_R12 -0.0008808683344 ; rpm ! ODE: Spin of wheel R12 {AVy_R12}
SV_AVY_R12_OLD -0.0008886686758 ; rpm ! Spin of wheel R12 (previous time step)
SV_AVY_R13 -0.0008456907402 ; rpm ! ODE: Spin of wheel R13 {AVy_R13}
SV_AVY_R13_OLD -0.0008531083882 ; rpm ! Spin of wheel R13 (previous time step)
SV_AVY_R14 -0.0004214420754 ; rpm ! ODE: Spin of wheel R14 {AVy_R14}
SV_AVY_R14_OLD -0.0004315571586 ; rpm ! Spin of wheel R14 (previous time step)
SV_AVY_R15 -0.0004098928715 ; rpm ! ODE: Spin of wheel R15 {AVy_R15}
SV_AVY_R15_OLD -0.0004198400578 ; rpm ! Spin of wheel R15 (previous time step)
SV_AVY_R1_OLD 0.003884241987 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 0.003261779437 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 0.003286727316 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVY_R3 0.003279330062 ; rpm ! ODE: Spin of wheel R3 {AVy_R3}
SV_AVY_R3_OLD 0.003304395564 ; rpm ! Spin of wheel R3 (previous time step)
SV_AVY_R4 0.001567114311 ; rpm ! ODE: Spin of wheel R4 {AVy_R4}
SV_AVY_R4_OLD 0.00158878081 ; rpm ! Spin of wheel R4 (previous time step)
SV_AVY_R5 0.001516409509 ; rpm ! ODE: Spin of wheel R5 {AVy_R5}
SV_AVY_R5_OLD 0.001537578799 ; rpm ! Spin of wheel R5 (previous time step)
SV_AVY_R6 -0.00112680536 ; rpm ! ODE: Spin of wheel R6 {AVy_R6}
SV_AVY_R6_OLD -0.001140900661 ; rpm ! Spin of wheel R6 (previous time step)
SV_AVY_R7 -0.0005696256495 ; rpm ! ODE: Spin of wheel R7 {AVy_R7}
SV_AVY_R7_OLD -0.0005808256375 ; rpm ! Spin of wheel R7 (previous time step)
SV_AVY_R8 -0.0005533379976 ; rpm ! ODE: Spin of wheel R8 {AVy_R8}
SV_AVY_R8_OLD -0.0005640733248 ; rpm ! Spin of wheel R8 (previous time step)
SV_AVY_R9 -0.0001134849921 ; rpm ! ODE: Spin of wheel R9 {AVy_R9}
SV_AVY_R9_OLD -0.0001248826101 ; rpm ! Spin of wheel R9 (previous time step)
SV_AVZ  0.04792851636 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 1 {AVz}
SV_AVZ_2 0.0173450037 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass 2 {AVz_2}
SV_AVZ_3 -0.004648841126 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 3
                         ! {AVz_3}
SV_AVZ_4 -0.003362198835 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass 4 {AVz_4}
SV_AVZ_5 -0.00993756583 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 5
                        ! {AVz_5}
SV_AVZ_6 -0.006680691004 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass 6 {AVz_6}
SV_AV_CL -0.009268843435 ; rpm ! Clutch relative spin, previous time step, veh #1
SV_AV_CL_2 120.8644148 ; rpm ! Clutch relative spin, previous time step, veh #2
SV_AV_CL_3 124.1901551 ; rpm ! Clutch relative spin, previous time step, veh #3
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate, vehicle #1
SV_AV_COL_CONTROL_2 0 ; deg/s ! ODE: Steering wheel angular rate, vehicle #2
SV_AV_COL_CONTROL_3 0 ; deg/s ! ODE: Steering wheel angular rate, vehicle #3
SV_AV_ENG -5.759783094e-20 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}, veh #1
SV_AV_ENG_2 120.852035 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}, veh #2
SV_AV_ENG_3 124.1886699 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}, veh #3
SV_AV_SHAFT_L_D1 -0.00320603061 ; rpm ! ODE: Diff1 Left (first) output shaft speed
                                ! {AV_DS_L2}, veh #1
SV_AV_SHAFT_L_D1_2 0.0002303612917 ; rpm ! ODE: Diff1 Left (first) output shaft
                                   ! speed {AV_DS_L2_2}, veh #2
SV_AV_SHAFT_L_D1_3 0.0005496223795 ; rpm ! ODE: Diff1 Left (first) output shaft
                                   ! speed {AV_DS_L2_3}, veh #3
SV_AV_SHAFT_L_D2 -0.003209859699 ; rpm ! ODE: Diff2 Left (first) output shaft speed
                                 ! {AV_DS_L3}, veh #1
SV_AV_SHAFT_L_D2_2 0.0002443122304 ; rpm ! ODE: Diff2 Left (first) output shaft
                                   ! speed {AV_DS_L3_2}, veh #2
SV_AV_SHAFT_L_D2_3 0.0005828420785 ; rpm ! ODE: Diff2 Left (first) output shaft
                                   ! speed {AV_DS_L3_3}, veh #3
SV_AV_SHAFT_L_D3 0.0001226474182 ; rpm ! ODE: Diff3 Left (first) output shaft speed
                                 ! , veh #1
SV_AV_SHAFT_L_D3_2 -0.000746381587 ; rpm ! ODE: Diff3 Left (first) output shaft
                                   ! speed , veh #2
SV_AV_SHAFT_L_D3_3 -0.0007287411009 ; rpm ! ODE: Diff3 Left (first) output shaft
                                    ! speed , veh #3
SV_AV_SHAFT_R_D1 0.003261779437 ; rpm ! ODE: Diff1 Right (second) output shaft speed
                                ! {AV_DS_R2}, veh #1
SV_AV_SHAFT_R_D1_2 -0.0005696256495 ; rpm ! ODE: Diff1 Right (second) output shaft
                                    ! speed {AV_DS_R2_2}, veh #2
SV_AV_SHAFT_R_D1_3 -0.0008808683344 ; rpm ! ODE: Diff1 Right (second) output shaft
                                    ! speed {AV_DS_R2_3}, veh #3
SV_AV_SHAFT_R_D2 0.003279330062 ; rpm ! ODE: Diff2 Right (second) output shaft speed
                                ! {AV_DS_R3}, veh #1
SV_AV_SHAFT_R_D2_2 -0.0005533379976 ; rpm ! ODE: Diff2 Right (second) output shaft
                                    ! speed {AV_DS_R3_2}, veh #2
SV_AV_SHAFT_R_D2_3 -0.0008456907402 ; rpm ! ODE: Diff2 Right (second) output shaft
                                    ! speed {AV_DS_R3_3}, veh #3
SV_AV_SHAFT_R_D3 0.0001528347999 ; rpm ! ODE: Diff3 Right (second) output shaft
                                 ! speed , veh #1
SV_AV_SHAFT_R_D3_2 -0.0006798566877 ; rpm ! ODE: Diff3 Right (second) output shaft
                                    ! speed , veh #2
SV_AV_SHAFT_R_D3_3 -0.0005782670556 ; rpm ! ODE: Diff3 Right (second) output shaft
                                    ! speed , veh #3
SV_AV_SW -5.452893677 ; deg/s ! ODE: Steering wheel angular rate, veh. #1 {StrAV_SW}
SV_AV_SW_2 0.483333605 ; deg/s ! ODE: Steering wheel angular rate, veh. #2
                       ! {StrAV_SW_2}
SV_AV_SW_3 1.154401176 ; deg/s ! ODE: Steering wheel angular rate, veh. #3
                       ! {StrAV_SW_3}
SV_AV_TC 0.009338354444 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC}, veh
                        ! #1
SV_AV_TC_2 -0.01245367453 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC},
                          ! veh #2
SV_AV_TC_3 -0.001571981924 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC},
                           ! veh #3
SV_AV_TR_OUT 0.0006484968364 ; rpm ! ODE: Transmission output shaft spin, veh #1
SV_AV_TR_OUT_2 -0.0008648385089 ; rpm ! ODE: Transmission output shaft spin, veh #2
SV_AV_TR_OUT_3 -0.0001091654114 ; rpm ! ODE: Transmission output shaft spin, veh #3
SV_A_CONTROL        0 ; deg ! ODE: Steering wheel angle, vehicle #1
SV_A_CONTROL_2      0 ; deg ! ODE: Steering wheel angle, vehicle #2
SV_A_CONTROL_3      0 ; deg ! ODE: Steering wheel angle, vehicle #3
SV_BETA   90.52692745 ; deg ! Sideslip (ISO)
SV_BETA_2 94.20388737 ; deg ! Sideslip (ISO)
SV_BETA_3 -95.45004851 ; deg ! Sideslip (ISO)
SV_BETA_4 92.73850864 ; deg ! Sideslip (ISO)
SV_BETA_5 -91.28666196 ; deg ! Sideslip (ISO)
SV_BETA_6 97.33382978 ; deg ! Sideslip (ISO)
SV_BETA_RD 90.52692745 ; deg ! Sideslip using road axes
SV_BETA_RD_2 94.20388737 ; deg ! Sideslip using road axes
SV_BETA_RD_3 -95.45004851 ; deg ! Sideslip using road axes
SV_BETA_RD_4 92.73850864 ; deg ! Sideslip using road axes
SV_BETA_RD_5 -91.28666196 ; deg ! Sideslip using road axes
SV_BETA_RD_6 97.33382978 ; deg ! Sideslip using road axes
SV_CL_2ND_DIFF_LOCKED_1 0 ; - ! 2nd Clutch lock state, 1st drive axle diff, prev.
                          ! time step, veh #1
SV_CL_2ND_DIFF_LOCKED_1_2 0 ; - ! 2nd Clutch lock state, 1st drive axle diff, prev.
                            ! time step, veh #2
SV_CL_2ND_DIFF_LOCKED_1_3 0 ; - ! 2nd Clutch lock state, 1st drive axle diff, prev.
                            ! time step, veh #3
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state, 2nd drive axle diff, prev.
                          ! time step, veh #1
SV_CL_2ND_DIFF_LOCKED_2_2 0 ; - ! 2nd Clutch lock state, 2nd drive axle diff, prev.
                            ! time step, veh #2
SV_CL_2ND_DIFF_LOCKED_2_3 0 ; - ! 2nd Clutch lock state, 2nd drive axle diff, prev.
                            ! time step, veh #3
SV_CL_2ND_DIFF_LOCKED_3 0 ; - ! 2nd Clutch lock state, inter-axle diff for axles
                          ! 1,2, prev. time step, veh #1
SV_CL_2ND_DIFF_LOCKED_3_2 0 ; - ! 2nd Clutch lock state, inter-axle diff for axles
                            ! 1,2, prev. time step, veh #2
SV_CL_2ND_DIFF_LOCKED_3_3 0 ; - ! 2nd Clutch lock state, inter-axle diff for axles
                            ! 1,2, prev. time step, veh #3
SV_CL_2ND_DIFF_SLIP_REF_1 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff,
                            ! veh #1
SV_CL_2ND_DIFF_SLIP_REF_1_2 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff,
                              ! veh #2
SV_CL_2ND_DIFF_SLIP_REF_1_3 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff,
                              ! veh #3
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff,
                            ! veh #1
SV_CL_2ND_DIFF_SLIP_REF_2_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff,
                              ! veh #2
SV_CL_2ND_DIFF_SLIP_REF_2_3 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff,
                              ! veh #3
SV_CL_2ND_DIFF_SLIP_REF_3 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                            ! axles 1,2, veh #1
SV_CL_2ND_DIFF_SLIP_REF_3_2 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                              ! axles 1,2, veh #2
SV_CL_2ND_DIFF_SLIP_REF_3_3 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                              ! axles 1,2, veh #3
SV_CL_2ND_DIFF_SPIN_1 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff, veh #1
SV_CL_2ND_DIFF_SPIN_1_2 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff, veh
                          ! #2
SV_CL_2ND_DIFF_SPIN_1_3 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff, veh
                          ! #3
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff, veh #1
SV_CL_2ND_DIFF_SPIN_2_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff, veh
                          ! #2
SV_CL_2ND_DIFF_SPIN_2_3 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff, veh
                          ! #3
SV_CL_2ND_DIFF_SPIN_3 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for axles
                        ! 1,2, veh #1
SV_CL_2ND_DIFF_SPIN_3_2 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for axles
                          ! 1,2, veh #2
SV_CL_2ND_DIFF_SPIN_3_3 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for axles
                          ! 1,2, veh #3
SV_CL_ACCEL_START   0 ; - ! Boolean: low-speed accel mode started prev. time step,
                      ! veh #1
SV_CL_ACCEL_START_2 0 ; - ! Boolean: low-speed accel mode started prev. time step,
                      ! veh #2
SV_CL_ACCEL_START_3 0 ; - ! Boolean: low-speed accel mode started prev. time step,
                      ! veh #3
SV_CL_AUTO_ACCEL    0 ; - ! Boolean: clutch is re-engaging to accelerate from stop,
                      ! veh #1
SV_CL_AUTO_ACCEL_2  0 ; - ! Boolean: clutch is re-engaging to accelerate from stop,
                      ! veh #2
SV_CL_AUTO_ACCEL_3  0 ; - ! Boolean: clutch is re-engaging to accelerate from stop,
                      ! veh #3
SV_CL_AUTO_BRAKE    1 ; - ! Boolean: clutch is disengaging to stop, veh #1
SV_CL_AUTO_BRAKE_2  1 ; - ! Boolean: clutch is disengaging to stop, veh #2
SV_CL_AUTO_BRAKE_3  1 ; - ! Boolean: clutch is disengaging to stop, veh #3
SV_CL_AUTO_INIT     0 ; - ! Initiate closed-loop clutch, set in previous time step:
                      ! -1 -> accel, 0 -> no change, or 1 -> brake, veh #1
SV_CL_AUTO_INIT_2   0 ; - ! Initiate closed-loop clutch, set in previous time step:
                      ! -1 -> accel, 0 -> no change, or 1 -> brake, veh #2
SV_CL_AUTO_INIT_3   0 ; - ! Initiate closed-loop clutch, set in previous time step:
                      ! -1 -> accel, 0 -> no change, or 1 -> brake, veh #3
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: gear shift with clutch is in progress, veh #1
SV_CL_AUTO_SHIFT_2  0 ; - ! Boolean: gear shift with clutch is in progress, veh #2
SV_CL_AUTO_SHIFT_3  0 ; - ! Boolean: gear shift with clutch is in progress, veh #3
SV_CL_BRAKE_STOP    1 ; - ! Boolean: low-speed brake mode started prev. time step,
                      ! veh #1
SV_CL_BRAKE_STOP_2  1 ; - ! Boolean: low-speed brake mode started prev. time step,
                      ! veh #2
SV_CL_BRAKE_STOP_3  1 ; - ! Boolean: low-speed brake mode started prev. time step,
                      ! veh #3
SV_CL_CON           1 ; - ! Transmission clutch control {ClutchTr}, veh #1
SV_CL_CON_2         1 ; - ! Transmission clutch control {ClutchTr}, veh #2
SV_CL_CON_3         1 ; - ! Transmission clutch control {ClutchTr}, veh #3
SV_CL_DIFF_LOCKED_1 0 ; - ! Clutch lock state for 1st drive axle diff, veh #1
SV_CL_DIFF_LOCKED_1_2 0 ; - ! Clutch lock state for 1st drive axle diff, veh #2
SV_CL_DIFF_LOCKED_1_3 0 ; - ! Clutch lock state for 1st drive axle diff, veh #3
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff, veh #1
SV_CL_DIFF_LOCKED_2_2 0 ; - ! Clutch lock state for 2nd drive axle diff, veh #2
SV_CL_DIFF_LOCKED_2_3 0 ; - ! Clutch lock state for 2nd drive axle diff, veh #3
SV_CL_DIFF_LOCKED_3 0 ; - ! Clutch lock state for inter-axle diff for axles 1,2, veh
                      ! #1
SV_CL_DIFF_LOCKED_3_2 0 ; - ! Clutch lock state for inter-axle diff for axles 1,2,
                        ! veh #2
SV_CL_DIFF_LOCKED_3_3 0 ; - ! Clutch lock state for inter-axle diff for axles 1,2,
                        ! veh #3
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Clutch ref. angle for 1st drive axle diff, veh #1
SV_CL_DIFF_SLIP_REF_1_2 0 ; deg ! Clutch ref. angle for 1st drive axle diff, veh #2
SV_CL_DIFF_SLIP_REF_1_3 0 ; deg ! Clutch ref. angle for 1st drive axle diff, veh #3
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff, veh #1
SV_CL_DIFF_SLIP_REF_2_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff, veh #2
SV_CL_DIFF_SLIP_REF_2_3 0 ; deg ! Clutch ref. angle for 2nd drive axle diff, veh #3
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Clutch ref. angle for inter-axle diff for axles 1,2,
                        ! veh #1
SV_CL_DIFF_SLIP_REF_3_2 0 ; deg ! Clutch ref. angle for inter-axle diff for axles
                          ! 1,2, veh #2
SV_CL_DIFF_SLIP_REF_3_3 0 ; deg ! Clutch ref. angle for inter-axle diff for axles
                          ! 1,2, veh #3
SV_CL_DIFF_SPIN_1 -0.006516420556 ; rpm ! Clutch rel. spin, 1st drive axle diff,
                                  ! prev. time step, veh #1
SV_CL_DIFF_SPIN_1_2 0.0008215117981 ; rpm ! Clutch rel. spin, 1st drive axle diff,
                                    ! prev. time step, veh #2
SV_CL_DIFF_SPIN_1_3 0.001446300186 ; rpm ! Clutch rel. spin, 1st drive axle diff,
                                   ! prev. time step, veh #3
SV_CL_DIFF_SPIN_2 -0.006537839402 ; rpm ! Clutch rel. spin, 2nd drive axle diff,
                                  ! prev. time step, veh #1
SV_CL_DIFF_SPIN_2_2 0.0008191982773 ; rpm ! Clutch rel. spin, 2nd drive axle diff,
                                    ! prev. time step, veh #2
SV_CL_DIFF_SPIN_2_3 0.001444396097 ; rpm ! Clutch rel. spin, 2nd drive axle diff,
                                   ! prev. time step, veh #3
SV_CL_DIFF_SPIN_3 -3.061883145e-05 ; rpm ! Clutch rel. spin, inter-axle diff for
                                   ! axles 1,2, prev. time step, veh #1
SV_CL_DIFF_SPIN_3_2 -6.862043029e-05 ; rpm ! Clutch rel. spin, inter-axle diff for
                                     ! axles 1,2, prev. time step, veh #2
SV_CL_DIFF_SPIN_3_3 -0.0001522762694 ; rpm ! Clutch rel. spin, inter-axle diff for
                                     ! axles 1,2, prev. time step, veh #3
SV_CL_LOCKED        0 ; - ! Clutch lockup state {Cl_Stat}, veh #1
SV_CL_LOCKED_2      0 ; - ! Clutch lockup state {Cl_Stat}, veh #2
SV_CL_LOCKED_3      0 ; - ! Clutch lockup state {Cl_Stat}, veh #3
SV_CL_TWIN_LOCKED_LF 0 ; - ! Lock state of LF twin clutch, veh #1
SV_CL_TWIN_LOCKED_LF_2 0 ; - ! Lock state of LF twin clutch, veh #2
SV_CL_TWIN_LOCKED_LF_3 0 ; - ! Lock state of LF twin clutch, veh #3
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch, veh #1
SV_CL_TWIN_LOCKED_LR_2 0 ; - ! Lock state of LR twin clutch, veh #2
SV_CL_TWIN_LOCKED_LR_3 0 ; - ! Lock state of LR twin clutch, veh #3
SV_CL_TWIN_LOCKED_RF 0 ; - ! Lock state of RF twin clutch, veh #1
SV_CL_TWIN_LOCKED_RF_2 0 ; - ! Lock state of RF twin clutch, veh #2
SV_CL_TWIN_LOCKED_RF_3 0 ; - ! Lock state of RF twin clutch, veh #3
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch, veh #1
SV_CL_TWIN_LOCKED_RR_2 0 ; - ! Lock state of RR twin clutch, veh #2
SV_CL_TWIN_LOCKED_RR_3 0 ; - ! Lock state of RR twin clutch, veh #3
SV_CL_TWIN_SPIN_LF  0 ; rpm ! Rel. spin of LF twin clutch, prev. time step, veh #1
SV_CL_TWIN_SPIN_LF_2 0 ; rpm ! Rel. spin of LF twin clutch, prev. time step, veh #2
SV_CL_TWIN_SPIN_LF_3 0 ; rpm ! Rel. spin of LF twin clutch, prev. time step, veh #3
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch, prev. time step, veh #1
SV_CL_TWIN_SPIN_LR_2 0 ; rpm ! Rel. spin of LR twin clutch, prev. time step, veh #2
SV_CL_TWIN_SPIN_LR_3 0 ; rpm ! Rel. spin of LR twin clutch, prev. time step, veh #3
SV_CL_TWIN_SPIN_RF  0 ; rpm ! Rel. spin of RF twin clutch, prev. time step, veh #1
SV_CL_TWIN_SPIN_RF_2 0 ; rpm ! Rel. spin of RF twin clutch, prev. time step, veh #2
SV_CL_TWIN_SPIN_RF_3 0 ; rpm ! Rel. spin of RF twin clutch, prev. time step, veh #3
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch, prev. time step, veh #1
SV_CL_TWIN_SPIN_RR_2 0 ; rpm ! Rel. spin of RR twin clutch, prev. time step, veh #2
SV_CL_TWIN_SPIN_RR_3 0 ; rpm ! Rel. spin of RR twin clutch, prev. time step, veh #3
SV_CMP_S_L1 72.51669012 ; mm ! Compression of ride spring L1
SV_CMP_S_L10 20.0975806 ; mm ! Compression of ride spring L10
SV_CMP_S_L11 83.47671281 ; mm ! Compression of ride spring L11
SV_CMP_S_L12 8.291645117 ; mm ! Compression of ride spring L12
SV_CMP_S_L13 8.327788708 ; mm ! Compression of ride spring L13
SV_CMP_S_L14 19.9147514 ; mm ! Compression of ride spring L14
SV_CMP_S_L15 19.9147514 ; mm ! Compression of ride spring L15
SV_CMP_S_L2 10.44527649 ; mm ! Compression of ride spring L2
SV_CMP_S_L3 10.93678618 ; mm ! Compression of ride spring L3
SV_CMP_S_L4 19.82261309 ; mm ! Compression of ride spring L4
SV_CMP_S_L5 19.82261309 ; mm ! Compression of ride spring L5
SV_CMP_S_L6 82.59513236 ; mm ! Compression of ride spring L6
SV_CMP_S_L7 8.508629992 ; mm ! Compression of ride spring L7
SV_CMP_S_L8 8.582713376 ; mm ! Compression of ride spring L8
SV_CMP_S_L9 20.0975806 ; mm ! Compression of ride spring L9
SV_CMP_S_R1 72.72091047 ; mm ! Compression of ride spring R1
SV_CMP_S_R10 19.98510782 ; mm ! Compression of ride spring R10
SV_CMP_S_R11 83.5183416 ; mm ! Compression of ride spring R11
SV_CMP_S_R12 8.130119124 ; mm ! Compression of ride spring R12
SV_CMP_S_R13 8.1836109 ; mm ! Compression of ride spring R13
SV_CMP_S_R14 19.79225407 ; mm ! Compression of ride spring R14
SV_CMP_S_R15 19.79225407 ; mm ! Compression of ride spring R15
SV_CMP_S_R2 10.53389612 ; mm ! Compression of ride spring R2
SV_CMP_S_R3 11.02518869 ; mm ! Compression of ride spring R3
SV_CMP_S_R4 19.91689635 ; mm ! Compression of ride spring R4
SV_CMP_S_R5 19.91689635 ; mm ! Compression of ride spring R5
SV_CMP_S_R6 82.66433786 ; mm ! Compression of ride spring R6
SV_CMP_S_R7 8.341165109 ; mm ! Compression of ride spring R7
SV_CMP_S_R8 8.430577321 ; mm ! Compression of ride spring R8
SV_CMP_S_R9 19.98510782 ; mm ! Compression of ride spring R9
SV_CONTACT_ID_L10I  1 ; - ! Road surface ID for tire contact {RdID_L10I}
SV_CONTACT_ID_L10O  1 ; - ! Road surface ID for tire contact {RdID_L10O}
SV_CONTACT_ID_L11I  1 ; - ! Road surface ID for tire contact {RdID_L11I}
SV_CONTACT_ID_L11O  1 ; - ! Road surface ID for tire contact {RdID_L11O}
SV_CONTACT_ID_L12I  1 ; - ! Road surface ID for tire contact {RdID_L12I}
SV_CONTACT_ID_L12O  1 ; - ! Road surface ID for tire contact {RdID_L12O}
SV_CONTACT_ID_L13I  1 ; - ! Road surface ID for tire contact {RdID_L13I}
SV_CONTACT_ID_L13O  1 ; - ! Road surface ID for tire contact {RdID_L13O}
SV_CONTACT_ID_L14I  1 ; - ! Road surface ID for tire contact {RdID_L14I}
SV_CONTACT_ID_L14O  1 ; - ! Road surface ID for tire contact {RdID_L14O}
SV_CONTACT_ID_L15I  1 ; - ! Road surface ID for tire contact {RdID_L15I}
SV_CONTACT_ID_L15O  1 ; - ! Road surface ID for tire contact {RdID_L15O}
SV_CONTACT_ID_L1I   1 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O   1 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I   1 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O   1 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_L3I   1 ; - ! Road surface ID for tire contact {RdID_L3I}
SV_CONTACT_ID_L3O   1 ; - ! Road surface ID for tire contact {RdID_L3O}
SV_CONTACT_ID_L4I   1 ; - ! Road surface ID for tire contact {RdID_L4I}
SV_CONTACT_ID_L4O   1 ; - ! Road surface ID for tire contact {RdID_L4O}
SV_CONTACT_ID_L5I   1 ; - ! Road surface ID for tire contact {RdID_L5I}
SV_CONTACT_ID_L5O   1 ; - ! Road surface ID for tire contact {RdID_L5O}
SV_CONTACT_ID_L6I   1 ; - ! Road surface ID for tire contact {RdID_L6I}
SV_CONTACT_ID_L6O   1 ; - ! Road surface ID for tire contact {RdID_L6O}
SV_CONTACT_ID_L7I   1 ; - ! Road surface ID for tire contact {RdID_L7I}
SV_CONTACT_ID_L7O   1 ; - ! Road surface ID for tire contact {RdID_L7O}
SV_CONTACT_ID_L8I   1 ; - ! Road surface ID for tire contact {RdID_L8I}
SV_CONTACT_ID_L8O   1 ; - ! Road surface ID for tire contact {RdID_L8O}
SV_CONTACT_ID_L9I   1 ; - ! Road surface ID for tire contact {RdID_L9I}
SV_CONTACT_ID_L9O   1 ; - ! Road surface ID for tire contact {RdID_L9O}
SV_CONTACT_ID_R10I  1 ; - ! Road surface ID for tire contact {RdID_R10I}
SV_CONTACT_ID_R10O  1 ; - ! Road surface ID for tire contact {RdID_R10O}
SV_CONTACT_ID_R11I  1 ; - ! Road surface ID for tire contact {RdID_R11I}
SV_CONTACT_ID_R11O  1 ; - ! Road surface ID for tire contact {RdID_R11O}
SV_CONTACT_ID_R12I  1 ; - ! Road surface ID for tire contact {RdID_R12I}
SV_CONTACT_ID_R12O  1 ; - ! Road surface ID for tire contact {RdID_R12O}
SV_CONTACT_ID_R13I  1 ; - ! Road surface ID for tire contact {RdID_R13I}
SV_CONTACT_ID_R13O  1 ; - ! Road surface ID for tire contact {RdID_R13O}
SV_CONTACT_ID_R14I  1 ; - ! Road surface ID for tire contact {RdID_R14I}
SV_CONTACT_ID_R14O  1 ; - ! Road surface ID for tire contact {RdID_R14O}
SV_CONTACT_ID_R15I  1 ; - ! Road surface ID for tire contact {RdID_R15I}
SV_CONTACT_ID_R15O  1 ; - ! Road surface ID for tire contact {RdID_R15O}
SV_CONTACT_ID_R1I   1 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O   1 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I   1 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O   1 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_ID_R3I   1 ; - ! Road surface ID for tire contact {RdID_R3I}
SV_CONTACT_ID_R3O   1 ; - ! Road surface ID for tire contact {RdID_R3O}
SV_CONTACT_ID_R4I   1 ; - ! Road surface ID for tire contact {RdID_R4I}
SV_CONTACT_ID_R4O   1 ; - ! Road surface ID for tire contact {RdID_R4O}
SV_CONTACT_ID_R5I   1 ; - ! Road surface ID for tire contact {RdID_R5I}
SV_CONTACT_ID_R5O   1 ; - ! Road surface ID for tire contact {RdID_R5O}
SV_CONTACT_ID_R6I   1 ; - ! Road surface ID for tire contact {RdID_R6I}
SV_CONTACT_ID_R6O   1 ; - ! Road surface ID for tire contact {RdID_R6O}
SV_CONTACT_ID_R7I   1 ; - ! Road surface ID for tire contact {RdID_R7I}
SV_CONTACT_ID_R7O   1 ; - ! Road surface ID for tire contact {RdID_R7O}
SV_CONTACT_ID_R8I   1 ; - ! Road surface ID for tire contact {RdID_R8I}
SV_CONTACT_ID_R8O   1 ; - ! Road surface ID for tire contact {RdID_R8O}
SV_CONTACT_ID_R9I   1 ; - ! Road surface ID for tire contact {RdID_R9I}
SV_CONTACT_ID_R9O   1 ; - ! Road surface ID for tire contact {RdID_R9O}
SV_CONTACT_STA_L10I 183.8904516 ; m ! Road path station for tire contact {S_Rd_L10I}
SV_CONTACT_STA_L10O 183.8907846 ; m ! Road path station for tire contact {S_Rd_L10O}
SV_CONTACT_STA_L11I 195.9740902 ; m ! Road path station for tire contact {S_Rd_L11I}
SV_CONTACT_STA_L11O 354 ; m ! Road path station for tire contact {S_Rd_L11O}
SV_CONTACT_STA_L12I 199.477674 ; m ! Road path station for tire contact {S_Rd_L12I}
SV_CONTACT_STA_L12O 199.4742973 ; m ! Road path station for tire contact {S_Rd_L12O}
SV_CONTACT_STA_L13I 200.7476503 ; m ! Road path station for tire contact {S_Rd_L13I}
SV_CONTACT_STA_L13O 200.7442742 ; m ! Road path station for tire contact {S_Rd_L13O}
SV_CONTACT_STA_L14I 208.920481 ; m ! Road path station for tire contact {S_Rd_L14I}
SV_CONTACT_STA_L14O 208.9214393 ; m ! Road path station for tire contact {S_Rd_L14O}
SV_CONTACT_STA_L15I 210.6204731 ; m ! Road path station for tire contact {S_Rd_L15I}
SV_CONTACT_STA_L15O 210.6214318 ; m ! Road path station for tire contact {S_Rd_L15O}
SV_CONTACT_STA_L1I 142.7919126 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 300 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 146.2967138 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 146.2936696 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_L3I 147.5667164 ; m ! Road path station for tire contact {S_Rd_L3I}
SV_CONTACT_STA_L3O 147.5636783 ; m ! Road path station for tire contact {S_Rd_L3O}
SV_CONTACT_STA_L4I 155.7431128 ; m ! Road path station for tire contact {S_Rd_L4I}
SV_CONTACT_STA_L4O 155.744067 ; m ! Road path station for tire contact {S_Rd_L4O}
SV_CONTACT_STA_L5I 157.4430434 ; m ! Road path station for tire contact {S_Rd_L5I}
SV_CONTACT_STA_L5O 157.4440551 ; m ! Road path station for tire contact {S_Rd_L5O}
SV_CONTACT_STA_L6I 169.2439519 ; m ! Road path station for tire contact {S_Rd_L6I}
SV_CONTACT_STA_L6O 327 ; m ! Road path station for tire contact {S_Rd_L6O}
SV_CONTACT_STA_L7I 172.7472692 ; m ! Road path station for tire contact {S_Rd_L7I}
SV_CONTACT_STA_L7O 172.7441077 ; m ! Road path station for tire contact {S_Rd_L7O}
SV_CONTACT_STA_L8I 174.0172771 ; m ! Road path station for tire contact {S_Rd_L8I}
SV_CONTACT_STA_L8O 174.0141012 ; m ! Road path station for tire contact {S_Rd_L8O}
SV_CONTACT_STA_L9I 182.190459 ; m ! Road path station for tire contact {S_Rd_L9I}
SV_CONTACT_STA_L9O 182.1907919 ; m ! Road path station for tire contact {S_Rd_L9O}
SV_CONTACT_STA_R10I 183.8849721 ; m ! Road path station for tire contact {S_Rd_R10I}
SV_CONTACT_STA_R10O 183.8840623 ; m ! Road path station for tire contact {S_Rd_R10O}
SV_CONTACT_STA_R11I 195.9934112 ; m ! Road path station for tire contact {S_Rd_R11I}
SV_CONTACT_STA_R11O 354 ; m ! Road path station for tire contact {S_Rd_R11O}
SV_CONTACT_STA_R12I 199.4901505 ; m ! Road path station for tire contact {S_Rd_R12I}
SV_CONTACT_STA_R12O 199.4924833 ; m ! Road path station for tire contact {S_Rd_R12O}
SV_CONTACT_STA_R13I 200.7601338 ; m ! Road path station for tire contact {S_Rd_R13I}
SV_CONTACT_STA_R13O 200.7624611 ; m ! Road path station for tire contact {S_Rd_R13O}
SV_CONTACT_STA_R14I 208.9159416 ; m ! Road path station for tire contact {S_Rd_R14I}
SV_CONTACT_STA_R14O 208.9149663 ; m ! Road path station for tire contact {S_Rd_R14O}
SV_CONTACT_STA_R15I 210.615934 ; m ! Road path station for tire contact {S_Rd_R15I}
SV_CONTACT_STA_R15O 210.6149588 ; m ! Road path station for tire contact {S_Rd_R15O}
SV_CONTACT_STA_R1I 142.8148955 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 300 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 146.311122 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 146.3142304 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_CONTACT_STA_R3I 147.581096 ; m ! Road path station for tire contact {S_Rd_R3I}
SV_CONTACT_STA_R3O 147.584209 ; m ! Road path station for tire contact {S_Rd_R3O}
SV_CONTACT_STA_R4I 155.7372817 ; m ! Road path station for tire contact {S_Rd_R4I}
SV_CONTACT_STA_R4O 155.7367457 ; m ! Road path station for tire contact {S_Rd_R4O}
SV_CONTACT_STA_R5I 157.4372706 ; m ! Road path station for tire contact {S_Rd_R5I}
SV_CONTACT_STA_R5O 157.4367373 ; m ! Road path station for tire contact {S_Rd_R5O}
SV_CONTACT_STA_R6I 169.2628738 ; m ! Road path station for tire contact {S_Rd_R6I}
SV_CONTACT_STA_R6O 327 ; m ! Road path station for tire contact {S_Rd_R6O}
SV_CONTACT_STA_R7I 172.759319 ; m ! Road path station for tire contact {S_Rd_R7I}
SV_CONTACT_STA_R7O 172.7615608 ; m ! Road path station for tire contact {S_Rd_R7O}
SV_CONTACT_STA_R8I 174.0293011 ; m ! Road path station for tire contact {S_Rd_R8I}
SV_CONTACT_STA_R8O 174.0315408 ; m ! Road path station for tire contact {S_Rd_R8O}
SV_CONTACT_STA_R9I 182.1849792 ; m ! Road path station for tire contact {S_Rd_R9I}
SV_CONTACT_STA_R9O 182.1840693 ; m ! Road path station for tire contact {S_Rd_R9O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio, veh #1
SV_DRGEAR_CVT_2    -0 ; - ! Derivative of delayed CVT gear ratio, veh #2
SV_DRGEAR_CVT_3    -0 ; - ! Derivative of delayed CVT gear ratio, veh #3
SV_DZDX_GND         0 ; - ! dZ/dX of ground at unit 1 aero ref. pt (saved)
SV_DZDX_GND_2       0 ; - ! dZ/dX of ground at unit 2 aero ref. pt (saved)
SV_DZDX_GND_3       0 ; - ! dZ/dX of ground at unit 3 aero ref. pt (saved)
SV_DZDX_GND_4       0 ; - ! dZ/dX of ground at unit 4 aero ref. pt (saved)
SV_DZDX_GND_5       0 ; - ! dZ/dX of ground at unit 5 aero ref. pt (saved)
SV_DZDX_GND_6       0 ; - ! dZ/dX of ground at unit 6 aero ref. pt (saved)
SV_DZDX_L10I        0 ; - ! Ground X slope under tire L10i (saved)
SV_DZDX_L10O        0 ; - ! Ground X slope under tire L10o (saved)
SV_DZDX_L11I        0 ; - ! Ground X slope under tire L11i (saved)
SV_DZDX_L11O        0 ; - ! Ground X slope under tire L11o (saved)
SV_DZDX_L12I        0 ; - ! Ground X slope under tire L12i (saved)
SV_DZDX_L12O        0 ; - ! Ground X slope under tire L12o (saved)
SV_DZDX_L13I        0 ; - ! Ground X slope under tire L13i (saved)
SV_DZDX_L13O        0 ; - ! Ground X slope under tire L13o (saved)
SV_DZDX_L14I        0 ; - ! Ground X slope under tire L14i (saved)
SV_DZDX_L14O        0 ; - ! Ground X slope under tire L14o (saved)
SV_DZDX_L15I        0 ; - ! Ground X slope under tire L15i (saved)
SV_DZDX_L15O        0 ; - ! Ground X slope under tire L15o (saved)
SV_DZDX_L1I         0 ; - ! Ground X slope under tire L1i (saved)
SV_DZDX_L1O         0 ; - ! Ground X slope under tire L1o (saved)
SV_DZDX_L2I         0 ; - ! Ground X slope under tire L2i (saved)
SV_DZDX_L2O         0 ; - ! Ground X slope under tire L2o (saved)
SV_DZDX_L3I         0 ; - ! Ground X slope under tire L3i (saved)
SV_DZDX_L3O         0 ; - ! Ground X slope under tire L3o (saved)
SV_DZDX_L4I         0 ; - ! Ground X slope under tire L4i (saved)
SV_DZDX_L4O         0 ; - ! Ground X slope under tire L4o (saved)
SV_DZDX_L5I         0 ; - ! Ground X slope under tire L5i (saved)
SV_DZDX_L5O         0 ; - ! Ground X slope under tire L5o (saved)
SV_DZDX_L6I         0 ; - ! Ground X slope under tire L6i (saved)
SV_DZDX_L6O         0 ; - ! Ground X slope under tire L6o (saved)
SV_DZDX_L7I         0 ; - ! Ground X slope under tire L7i (saved)
SV_DZDX_L7O         0 ; - ! Ground X slope under tire L7o (saved)
SV_DZDX_L8I         0 ; - ! Ground X slope under tire L8i (saved)
SV_DZDX_L8O         0 ; - ! Ground X slope under tire L8o (saved)
SV_DZDX_L9I         0 ; - ! Ground X slope under tire L9i (saved)
SV_DZDX_L9O         0 ; - ! Ground X slope under tire L9o (saved)
SV_DZDX_R10I        0 ; - ! Ground X slope under tire R10i (saved)
SV_DZDX_R10O        0 ; - ! Ground X slope under tire R10o (saved)
SV_DZDX_R11I        0 ; - ! Ground X slope under tire R11i (saved)
SV_DZDX_R11O        0 ; - ! Ground X slope under tire R11o (saved)
SV_DZDX_R12I        0 ; - ! Ground X slope under tire R12i (saved)
SV_DZDX_R12O        0 ; - ! Ground X slope under tire R12o (saved)
SV_DZDX_R13I        0 ; - ! Ground X slope under tire R13i (saved)
SV_DZDX_R13O        0 ; - ! Ground X slope under tire R13o (saved)
SV_DZDX_R14I        0 ; - ! Ground X slope under tire R14i (saved)
SV_DZDX_R14O        0 ; - ! Ground X slope under tire R14o (saved)
SV_DZDX_R15I        0 ; - ! Ground X slope under tire R15i (saved)
SV_DZDX_R15O        0 ; - ! Ground X slope under tire R15o (saved)
SV_DZDX_R1I         0 ; - ! Ground X slope under tire R1i (saved)
SV_DZDX_R1O         0 ; - ! Ground X slope under tire R1o (saved)
SV_DZDX_R2I         0 ; - ! Ground X slope under tire R2i (saved)
SV_DZDX_R2O         0 ; - ! Ground X slope under tire R2o (saved)
SV_DZDX_R3I         0 ; - ! Ground X slope under tire R3i (saved)
SV_DZDX_R3O         0 ; - ! Ground X slope under tire R3o (saved)
SV_DZDX_R4I         0 ; - ! Ground X slope under tire R4i (saved)
SV_DZDX_R4O         0 ; - ! Ground X slope under tire R4o (saved)
SV_DZDX_R5I         0 ; - ! Ground X slope under tire R5i (saved)
SV_DZDX_R5O         0 ; - ! Ground X slope under tire R5o (saved)
SV_DZDX_R6I         0 ; - ! Ground X slope under tire R6i (saved)
SV_DZDX_R6O         0 ; - ! Ground X slope under tire R6o (saved)
SV_DZDX_R7I         0 ; - ! Ground X slope under tire R7i (saved)
SV_DZDX_R7O         0 ; - ! Ground X slope under tire R7o (saved)
SV_DZDX_R8I         0 ; - ! Ground X slope under tire R8i (saved)
SV_DZDX_R8O         0 ; - ! Ground X slope under tire R8o (saved)
SV_DZDX_R9I         0 ; - ! Ground X slope under tire R9i (saved)
SV_DZDX_R9O         0 ; - ! Ground X slope under tire R9o (saved)
SV_DZDY_GND         0 ; - ! dZ/dY of ground at unit 1 aero ref. pt (saved)
SV_DZDY_GND_2       0 ; - ! dZ/dY of ground at unit 2 aero ref. pt (saved)
SV_DZDY_GND_3       0 ; - ! dZ/dY of ground at unit 3 aero ref. pt (saved)
SV_DZDY_GND_4       0 ; - ! dZ/dY of ground at unit 4 aero ref. pt (saved)
SV_DZDY_GND_5       0 ; - ! dZ/dY of ground at unit 5 aero ref. pt (saved)
SV_DZDY_GND_6       0 ; - ! dZ/dY of ground at unit 6 aero ref. pt (saved)
SV_DZDY_L10I        0 ; - ! Ground Y slope under tire L10i  (saved)
SV_DZDY_L10O        0 ; - ! Ground Y slope under tire L10o  (saved)
SV_DZDY_L11I        0 ; - ! Ground Y slope under tire L11i  (saved)
SV_DZDY_L11O        0 ; - ! Ground Y slope under tire L11o  (saved)
SV_DZDY_L12I        0 ; - ! Ground Y slope under tire L12i  (saved)
SV_DZDY_L12O        0 ; - ! Ground Y slope under tire L12o  (saved)
SV_DZDY_L13I        0 ; - ! Ground Y slope under tire L13i  (saved)
SV_DZDY_L13O        0 ; - ! Ground Y slope under tire L13o  (saved)
SV_DZDY_L14I        0 ; - ! Ground Y slope under tire L14i  (saved)
SV_DZDY_L14O        0 ; - ! Ground Y slope under tire L14o  (saved)
SV_DZDY_L15I        0 ; - ! Ground Y slope under tire L15i  (saved)
SV_DZDY_L15O        0 ; - ! Ground Y slope under tire L15o  (saved)
SV_DZDY_L1I         0 ; - ! Ground Y slope under tire L1i  (saved)
SV_DZDY_L1O         0 ; - ! Ground Y slope under tire L1o  (saved)
SV_DZDY_L2I         0 ; - ! Ground Y slope under tire L2i  (saved)
SV_DZDY_L2O         0 ; - ! Ground Y slope under tire L2o  (saved)
SV_DZDY_L3I         0 ; - ! Ground Y slope under tire L3i  (saved)
SV_DZDY_L3O         0 ; - ! Ground Y slope under tire L3o  (saved)
SV_DZDY_L4I         0 ; - ! Ground Y slope under tire L4i  (saved)
SV_DZDY_L4O         0 ; - ! Ground Y slope under tire L4o  (saved)
SV_DZDY_L5I         0 ; - ! Ground Y slope under tire L5i  (saved)
SV_DZDY_L5O         0 ; - ! Ground Y slope under tire L5o  (saved)
SV_DZDY_L6I         0 ; - ! Ground Y slope under tire L6i  (saved)
SV_DZDY_L6O         0 ; - ! Ground Y slope under tire L6o  (saved)
SV_DZDY_L7I         0 ; - ! Ground Y slope under tire L7i  (saved)
SV_DZDY_L7O         0 ; - ! Ground Y slope under tire L7o  (saved)
SV_DZDY_L8I         0 ; - ! Ground Y slope under tire L8i  (saved)
SV_DZDY_L8O         0 ; - ! Ground Y slope under tire L8o  (saved)
SV_DZDY_L9I         0 ; - ! Ground Y slope under tire L9i  (saved)
SV_DZDY_L9O         0 ; - ! Ground Y slope under tire L9o  (saved)
SV_DZDY_R10I        0 ; - ! Ground Y slope under tire R10i  (saved)
SV_DZDY_R10O        0 ; - ! Ground Y slope under tire R10o  (saved)
SV_DZDY_R11I        0 ; - ! Ground Y slope under tire R11i  (saved)
SV_DZDY_R11O        0 ; - ! Ground Y slope under tire R11o  (saved)
SV_DZDY_R12I        0 ; - ! Ground Y slope under tire R12i  (saved)
SV_DZDY_R12O        0 ; - ! Ground Y slope under tire R12o  (saved)
SV_DZDY_R13I        0 ; - ! Ground Y slope under tire R13i  (saved)
SV_DZDY_R13O        0 ; - ! Ground Y slope under tire R13o  (saved)
SV_DZDY_R14I        0 ; - ! Ground Y slope under tire R14i  (saved)
SV_DZDY_R14O        0 ; - ! Ground Y slope under tire R14o  (saved)
SV_DZDY_R15I        0 ; - ! Ground Y slope under tire R15i  (saved)
SV_DZDY_R15O        0 ; - ! Ground Y slope under tire R15o  (saved)
SV_DZDY_R1I         0 ; - ! Ground Y slope under tire R1i  (saved)
SV_DZDY_R1O         0 ; - ! Ground Y slope under tire R1o  (saved)
SV_DZDY_R2I         0 ; - ! Ground Y slope under tire R2i  (saved)
SV_DZDY_R2O         0 ; - ! Ground Y slope under tire R2o  (saved)
SV_DZDY_R3I         0 ; - ! Ground Y slope under tire R3i  (saved)
SV_DZDY_R3O         0 ; - ! Ground Y slope under tire R3o  (saved)
SV_DZDY_R4I         0 ; - ! Ground Y slope under tire R4i  (saved)
SV_DZDY_R4O         0 ; - ! Ground Y slope under tire R4o  (saved)
SV_DZDY_R5I         0 ; - ! Ground Y slope under tire R5i  (saved)
SV_DZDY_R5O         0 ; - ! Ground Y slope under tire R5o  (saved)
SV_DZDY_R6I         0 ; - ! Ground Y slope under tire R6i  (saved)
SV_DZDY_R6O         0 ; - ! Ground Y slope under tire R6o  (saved)
SV_DZDY_R7I         0 ; - ! Ground Y slope under tire R7i  (saved)
SV_DZDY_R7O         0 ; - ! Ground Y slope under tire R7o  (saved)
SV_DZDY_R8I         0 ; - ! Ground Y slope under tire R8i  (saved)
SV_DZDY_R8O         0 ; - ! Ground Y slope under tire R8o  (saved)
SV_DZDY_R9I         0 ; - ! Ground Y slope under tire R9i  (saved)
SV_DZDY_R9O         0 ; - ! Ground Y slope under tire R9o  (saved)
SV_D_ALPHA_L10I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L10i
SV_D_ALPHA_L10O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L10o
SV_D_ALPHA_L11I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L11i
SV_D_ALPHA_L11O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L11o
SV_D_ALPHA_L12I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L12i
SV_D_ALPHA_L12O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L12o
SV_D_ALPHA_L13I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L13i
SV_D_ALPHA_L13O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L13o
SV_D_ALPHA_L14I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L14i
SV_D_ALPHA_L14O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L14o
SV_D_ALPHA_L15I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L15i
SV_D_ALPHA_L15O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L15o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_L3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3i
SV_D_ALPHA_L3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3o
SV_D_ALPHA_L4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4i
SV_D_ALPHA_L4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4o
SV_D_ALPHA_L5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5i
SV_D_ALPHA_L5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5o
SV_D_ALPHA_L6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6i
SV_D_ALPHA_L6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6o
SV_D_ALPHA_L7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7i
SV_D_ALPHA_L7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7o
SV_D_ALPHA_L8I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L8i
SV_D_ALPHA_L8O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L8o
SV_D_ALPHA_L9I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L9i
SV_D_ALPHA_L9O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L9o
SV_D_ALPHA_MX_L10I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L10i
SV_D_ALPHA_MX_L10O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L10o
SV_D_ALPHA_MX_L11I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L11i
SV_D_ALPHA_MX_L11O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L11o
SV_D_ALPHA_MX_L12I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L12i
SV_D_ALPHA_MX_L12O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L12o
SV_D_ALPHA_MX_L13I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L13i
SV_D_ALPHA_MX_L13O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L13o
SV_D_ALPHA_MX_L14I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L14i
SV_D_ALPHA_MX_L14O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L14o
SV_D_ALPHA_MX_L15I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L15i
SV_D_ALPHA_MX_L15O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L15o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_L3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3i
SV_D_ALPHA_MX_L3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3o
SV_D_ALPHA_MX_L4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4i
SV_D_ALPHA_MX_L4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4o
SV_D_ALPHA_MX_L5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5i
SV_D_ALPHA_MX_L5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5o
SV_D_ALPHA_MX_L6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6i
SV_D_ALPHA_MX_L6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6o
SV_D_ALPHA_MX_L7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7i
SV_D_ALPHA_MX_L7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7o
SV_D_ALPHA_MX_L8I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L8i
SV_D_ALPHA_MX_L8O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L8o
SV_D_ALPHA_MX_L9I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L9i
SV_D_ALPHA_MX_L9O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L9o
SV_D_ALPHA_MX_R10I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R10i
SV_D_ALPHA_MX_R10O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R10o
SV_D_ALPHA_MX_R11I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R11i
SV_D_ALPHA_MX_R11O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R11o
SV_D_ALPHA_MX_R12I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R12i
SV_D_ALPHA_MX_R12O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R12o
SV_D_ALPHA_MX_R13I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R13i
SV_D_ALPHA_MX_R13O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R13o
SV_D_ALPHA_MX_R14I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R14i
SV_D_ALPHA_MX_R14O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R14o
SV_D_ALPHA_MX_R15I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R15i
SV_D_ALPHA_MX_R15O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R15o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_MX_R3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3i
SV_D_ALPHA_MX_R3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3o
SV_D_ALPHA_MX_R4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4i
SV_D_ALPHA_MX_R4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4o
SV_D_ALPHA_MX_R5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5i
SV_D_ALPHA_MX_R5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5o
SV_D_ALPHA_MX_R6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6i
SV_D_ALPHA_MX_R6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6o
SV_D_ALPHA_MX_R7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7i
SV_D_ALPHA_MX_R7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7o
SV_D_ALPHA_MX_R8I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R8i
SV_D_ALPHA_MX_R8O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R8o
SV_D_ALPHA_MX_R9I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R9i
SV_D_ALPHA_MX_R9O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R9o
SV_D_ALPHA_R10I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R10i
SV_D_ALPHA_R10O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R10o
SV_D_ALPHA_R11I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R11i
SV_D_ALPHA_R11O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R11o
SV_D_ALPHA_R12I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R12i
SV_D_ALPHA_R12O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R12o
SV_D_ALPHA_R13I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R13i
SV_D_ALPHA_R13O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R13o
SV_D_ALPHA_R14I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R14i
SV_D_ALPHA_R14O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R14o
SV_D_ALPHA_R15I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R15i
SV_D_ALPHA_R15O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R15o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_ALPHA_R3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3i
SV_D_ALPHA_R3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3o
SV_D_ALPHA_R4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4i
SV_D_ALPHA_R4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4o
SV_D_ALPHA_R5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5i
SV_D_ALPHA_R5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5o
SV_D_ALPHA_R6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6i
SV_D_ALPHA_R6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6o
SV_D_ALPHA_R7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7i
SV_D_ALPHA_R7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7o
SV_D_ALPHA_R8I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R8i
SV_D_ALPHA_R8O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R8o
SV_D_ALPHA_R9I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R9i
SV_D_ALPHA_R9O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R9o
SV_D_CONI_L10I      0 ; - ! Delta Coni (Mz 0-crossing), tire L10i
SV_D_CONI_L10O      0 ; - ! Delta Coni (Mz 0-crossing), tire L10o
SV_D_CONI_L11I      0 ; - ! Delta Coni (Mz 0-crossing), tire L11i
SV_D_CONI_L11O      0 ; - ! Delta Coni (Mz 0-crossing), tire L11o
SV_D_CONI_L12I      0 ; - ! Delta Coni (Mz 0-crossing), tire L12i
SV_D_CONI_L12O      0 ; - ! Delta Coni (Mz 0-crossing), tire L12o
SV_D_CONI_L13I      0 ; - ! Delta Coni (Mz 0-crossing), tire L13i
SV_D_CONI_L13O      0 ; - ! Delta Coni (Mz 0-crossing), tire L13o
SV_D_CONI_L14I      0 ; - ! Delta Coni (Mz 0-crossing), tire L14i
SV_D_CONI_L14O      0 ; - ! Delta Coni (Mz 0-crossing), tire L14o
SV_D_CONI_L15I      0 ; - ! Delta Coni (Mz 0-crossing), tire L15i
SV_D_CONI_L15O      0 ; - ! Delta Coni (Mz 0-crossing), tire L15o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_L3I       0 ; - ! Delta Coni (Mz 0-crossing), tire L3i
SV_D_CONI_L3O       0 ; - ! Delta Coni (Mz 0-crossing), tire L3o
SV_D_CONI_L4I       0 ; - ! Delta Coni (Mz 0-crossing), tire L4i
SV_D_CONI_L4O       0 ; - ! Delta Coni (Mz 0-crossing), tire L4o
SV_D_CONI_L5I       0 ; - ! Delta Coni (Mz 0-crossing), tire L5i
SV_D_CONI_L5O       0 ; - ! Delta Coni (Mz 0-crossing), tire L5o
SV_D_CONI_L6I       0 ; - ! Delta Coni (Mz 0-crossing), tire L6i
SV_D_CONI_L6O       0 ; - ! Delta Coni (Mz 0-crossing), tire L6o
SV_D_CONI_L7I       0 ; - ! Delta Coni (Mz 0-crossing), tire L7i
SV_D_CONI_L7O       0 ; - ! Delta Coni (Mz 0-crossing), tire L7o
SV_D_CONI_L8I       0 ; - ! Delta Coni (Mz 0-crossing), tire L8i
SV_D_CONI_L8O       0 ; - ! Delta Coni (Mz 0-crossing), tire L8o
SV_D_CONI_L9I       0 ; - ! Delta Coni (Mz 0-crossing), tire L9i
SV_D_CONI_L9O       0 ; - ! Delta Coni (Mz 0-crossing), tire L9o
SV_D_CONI_R10I      0 ; - ! Delta Coni (Mz 0-crossing), tire R10i
SV_D_CONI_R10O      0 ; - ! Delta Coni (Mz 0-crossing), tire R10o
SV_D_CONI_R11I      0 ; - ! Delta Coni (Mz 0-crossing), tire R11i
SV_D_CONI_R11O      0 ; - ! Delta Coni (Mz 0-crossing), tire R11o
SV_D_CONI_R12I      0 ; - ! Delta Coni (Mz 0-crossing), tire R12i
SV_D_CONI_R12O      0 ; - ! Delta Coni (Mz 0-crossing), tire R12o
SV_D_CONI_R13I      0 ; - ! Delta Coni (Mz 0-crossing), tire R13i
SV_D_CONI_R13O      0 ; - ! Delta Coni (Mz 0-crossing), tire R13o
SV_D_CONI_R14I      0 ; - ! Delta Coni (Mz 0-crossing), tire R14i
SV_D_CONI_R14O      0 ; - ! Delta Coni (Mz 0-crossing), tire R14o
SV_D_CONI_R15I      0 ; - ! Delta Coni (Mz 0-crossing), tire R15i
SV_D_CONI_R15O      0 ; - ! Delta Coni (Mz 0-crossing), tire R15o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_CONI_R3I       0 ; - ! Delta Coni (Mz 0-crossing), tire R3i
SV_D_CONI_R3O       0 ; - ! Delta Coni (Mz 0-crossing), tire R3o
SV_D_CONI_R4I       0 ; - ! Delta Coni (Mz 0-crossing), tire R4i
SV_D_CONI_R4O       0 ; - ! Delta Coni (Mz 0-crossing), tire R4o
SV_D_CONI_R5I       0 ; - ! Delta Coni (Mz 0-crossing), tire R5i
SV_D_CONI_R5O       0 ; - ! Delta Coni (Mz 0-crossing), tire R5o
SV_D_CONI_R6I       0 ; - ! Delta Coni (Mz 0-crossing), tire R6i
SV_D_CONI_R6O       0 ; - ! Delta Coni (Mz 0-crossing), tire R6o
SV_D_CONI_R7I       0 ; - ! Delta Coni (Mz 0-crossing), tire R7i
SV_D_CONI_R7O       0 ; - ! Delta Coni (Mz 0-crossing), tire R7o
SV_D_CONI_R8I       0 ; - ! Delta Coni (Mz 0-crossing), tire R8i
SV_D_CONI_R8O       0 ; - ! Delta Coni (Mz 0-crossing), tire R8o
SV_D_CONI_R9I       0 ; - ! Delta Coni (Mz 0-crossing), tire R9i
SV_D_CONI_R9O       0 ; - ! Delta Coni (Mz 0-crossing), tire R9o
SV_D_KAPPA_L10I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L10i
SV_D_KAPPA_L10O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L10o
SV_D_KAPPA_L11I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L11i
SV_D_KAPPA_L11O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L11o
SV_D_KAPPA_L12I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L12i
SV_D_KAPPA_L12O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L12o
SV_D_KAPPA_L13I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L13i
SV_D_KAPPA_L13O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L13o
SV_D_KAPPA_L14I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L14i
SV_D_KAPPA_L14O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L14o
SV_D_KAPPA_L15I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L15i
SV_D_KAPPA_L15O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L15o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_L3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3i
SV_D_KAPPA_L3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3o
SV_D_KAPPA_L4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4i
SV_D_KAPPA_L4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4o
SV_D_KAPPA_L5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5i
SV_D_KAPPA_L5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5o
SV_D_KAPPA_L6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6i
SV_D_KAPPA_L6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6o
SV_D_KAPPA_L7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7i
SV_D_KAPPA_L7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7o
SV_D_KAPPA_L8I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L8i
SV_D_KAPPA_L8O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L8o
SV_D_KAPPA_L9I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L9i
SV_D_KAPPA_L9O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L9o
SV_D_KAPPA_R10I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R10i
SV_D_KAPPA_R10O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R10o
SV_D_KAPPA_R11I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R11i
SV_D_KAPPA_R11O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R11o
SV_D_KAPPA_R12I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R12i
SV_D_KAPPA_R12O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R12o
SV_D_KAPPA_R13I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R13i
SV_D_KAPPA_R13O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R13o
SV_D_KAPPA_R14I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R14i
SV_D_KAPPA_R14O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R14o
SV_D_KAPPA_R15I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R15i
SV_D_KAPPA_R15O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R15o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_D_KAPPA_R3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3i
SV_D_KAPPA_R3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3o
SV_D_KAPPA_R4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4i
SV_D_KAPPA_R4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4o
SV_D_KAPPA_R5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5i
SV_D_KAPPA_R5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5o
SV_D_KAPPA_R6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6i
SV_D_KAPPA_R6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6o
SV_D_KAPPA_R7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7i
SV_D_KAPPA_R7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7o
SV_D_KAPPA_R8I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R8i
SV_D_KAPPA_R8O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R8o
SV_D_KAPPA_R9I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R9i
SV_D_KAPPA_R9O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R9o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control, prev. time step, veh
                      ! #1
SV_ESC_STATE_2      0 ; - ! State of ESC engine torque control, prev. time step, veh
                      ! #2
SV_ESC_STATE_3      0 ; - ! State of ESC engine torque control, prev. time step, veh
                      ! #3
SV_FBK              0 ; N ! ODE: Instant boost force (above input force, vehicle #1
SV_FBK_2            0 ; N ! ODE: Instant boost force (above input force, vehicle #2
SV_FBK_3            0 ; N ! ODE: Instant boost force (above input force, vehicle #3
SV_FBOOST           0 ; N ! ODE: Delayed boost force, veh. #1 {F_boost}
SV_FBOOST_2         0 ; N ! ODE: Delayed boost force, veh. #2 {F_boost_2}
SV_FBOOST_3         0 ; N ! ODE: Delayed boost force, veh. #3 {F_boost_3}
SV_FS_L1  17935.49937 ; N ! Force from ride spring L1
SV_FS_L10 14093.41642 ; N ! Force from ride spring L10
SV_FS_L11 19166.59173 ; N ! Force from ride spring L11
SV_FS_L12 6494.192462 ; N ! Force from ride spring L12
SV_FS_L13 7162.614443 ; N ! Force from ride spring L13
SV_FS_L14 14152.44982 ; N ! Force from ride spring L14
SV_FS_L15 14152.44982 ; N ! Force from ride spring L15
SV_FS_L2  7234.111311 ; N ! Force from ride spring L2
SV_FS_L3  7594.933191 ; N ! Force from ride spring L3
SV_FS_L4  13715.96453 ; N ! Force from ride spring L4
SV_FS_L5  13715.96453 ; N ! Force from ride spring L5
SV_FS_L6   19116.6107 ; N ! Force from ride spring L6
SV_FS_L7  6645.305051 ; N ! Force from ride spring L7
SV_FS_L8  7029.632185 ; N ! Force from ride spring L8
SV_FS_L9  14093.41642 ; N ! Force from ride spring L9
SV_FS_R1  18109.47386 ; N ! Force from ride spring R1
SV_FS_R10 14143.61587 ; N ! Force from ride spring R10
SV_FS_R11 19136.24384 ; N ! Force from ride spring R11
SV_FS_R12 6431.077034 ; N ! Force from ride spring R12
SV_FS_R13 7008.782347 ; N ! Force from ride spring R13
SV_FS_R14 14117.11212 ; N ! Force from ride spring R14
SV_FS_R15 14117.11212 ; N ! Force from ride spring R15
SV_FS_R2  7560.021566 ; N ! Force from ride spring R2
SV_FS_R3  7917.510737 ; N ! Force from ride spring R3
SV_FS_R4     14080.89 ; N ! Force from ride spring R4
SV_FS_R5     14080.89 ; N ! Force from ride spring R5
SV_FS_R6  19041.58482 ; N ! Force from ride spring R6
SV_FS_R7  6624.905518 ; N ! Force from ride spring R7
SV_FS_R8  7016.873533 ; N ! Force from ride spring R8
SV_FS_R9  14143.61587 ; N ! Force from ride spring R9
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}, veh #1
SV_FUEL_2           0 ; kg ! ODE: Mass of fuel consumed {Mfuel}, veh #2
SV_FUEL_3           0 ; kg ! ODE: Mass of fuel consumed {Mfuel}, veh #3
SV_FX_SM_L1 5.35641856 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L10 2227.308942 ; N ! Tire force [sx] component, wheel L10
SV_FX_SM_L11 -3576.019682 ; N ! Tire force [sx] component, wheel L11
SV_FX_SM_L12 -1098.040132 ; N ! Tire force [sx] component, wheel L12
SV_FX_SM_L13 -1163.496497 ; N ! Tire force [sx] component, wheel L13
SV_FX_SM_L14 2366.252924 ; N ! Tire force [sx] component, wheel L14
SV_FX_SM_L15 2397.75786 ; N ! Tire force [sx] component, wheel L15
SV_FX_SM_L2 122.4456274 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_L3 114.3078616 ; N ! Tire force [sx] component, wheel L3
SV_FX_SM_L4 562.2566252 ; N ! Tire force [sx] component, wheel L4
SV_FX_SM_L5 472.3277989 ; N ! Tire force [sx] component, wheel L5
SV_FX_SM_L6 -3476.092851 ; N ! Tire force [sx] component, wheel L6
SV_FX_SM_L7 -1155.451319 ; N ! Tire force [sx] component, wheel L7
SV_FX_SM_L8 -1218.688792 ; N ! Tire force [sx] component, wheel L8
SV_FX_SM_L9 2260.656498 ; N ! Tire force [sx] component, wheel L9
SV_FX_SM_R1 -320.2363512 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R10 2275.064615 ; N ! Tire force [sx] component, wheel R10
SV_FX_SM_R11 -2598.327361 ; N ! Tire force [sx] component, wheel R11
SV_FX_SM_R12 -597.6539611 ; N ! Tire force [sx] component, wheel R12
SV_FX_SM_R13 -584.0176972 ; N ! Tire force [sx] component, wheel R13
SV_FX_SM_R14 2489.769364 ; N ! Tire force [sx] component, wheel R14
SV_FX_SM_R15 2458.231644 ; N ! Tire force [sx] component, wheel R15
SV_FX_SM_R2 -371.0137155 ; N ! Tire force [sx] component, wheel R2
SV_FX_SM_R3 -395.2989125 ; N ! Tire force [sx] component, wheel R3
SV_FX_SM_R4 148.1017375 ; N ! Tire force [sx] component, wheel R4
SV_FX_SM_R5 58.21673961 ; N ! Tire force [sx] component, wheel R5
SV_FX_SM_R6 -2231.207419 ; N ! Tire force [sx] component, wheel R6
SV_FX_SM_R7 -477.1991112 ; N ! Tire force [sx] component, wheel R7
SV_FX_SM_R8 -465.9133125 ; N ! Tire force [sx] component, wheel R8
SV_FX_SM_R9 2376.4227 ; N ! Tire force [sx] component, wheel R9
SV_FY_SM_L1 498.7518615 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L10 -194.5484273 ; N ! Tire force [sy] component, wheel L10
SV_FY_SM_L11 167.977347 ; N ! Tire force [sy] component, wheel L11
SV_FY_SM_L12 408.8740876 ; N ! Tire force [sy] component, wheel L12
SV_FY_SM_L13 -149.3246277 ; N ! Tire force [sy] component, wheel L13
SV_FY_SM_L14 108.1543702 ; N ! Tire force [sy] component, wheel L14
SV_FY_SM_L15 -170.096676 ; N ! Tire force [sy] component, wheel L15
SV_FY_SM_L2 -2272.655017 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_L3 -2335.784882 ; N ! Tire force [sy] component, wheel L3
SV_FY_SM_L4 369.0259413 ; N ! Tire force [sy] component, wheel L4
SV_FY_SM_L5 152.4716459 ; N ! Tire force [sy] component, wheel L5
SV_FY_SM_L6 130.8924323 ; N ! Tire force [sy] component, wheel L6
SV_FY_SM_L7 477.783155 ; N ! Tire force [sy] component, wheel L7
SV_FY_SM_L8 -24.9399703 ; N ! Tire force [sy] component, wheel L8
SV_FY_SM_L9 116.5323384 ; N ! Tire force [sy] component, wheel L9
SV_FY_SM_R1 -691.1691651 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R10 -136.9855032 ; N ! Tire force [sy] component, wheel R10
SV_FY_SM_R11 -644.230756 ; N ! Tire force [sy] component, wheel R11
SV_FY_SM_R12 439.3101749 ; N ! Tire force [sy] component, wheel R12
SV_FY_SM_R13 -140.6013356 ; N ! Tire force [sy] component, wheel R13
SV_FY_SM_R14 118.6935456 ; N ! Tire force [sy] component, wheel R14
SV_FY_SM_R15 -151.8099543 ; N ! Tire force [sy] component, wheel R15
SV_FY_SM_R2 2117.948255 ; N ! Tire force [sy] component, wheel R2
SV_FY_SM_R3 2203.47997 ; N ! Tire force [sy] component, wheel R3
SV_FY_SM_R4 32.78990583 ; N ! Tire force [sy] component, wheel R4
SV_FY_SM_R5 116.9628003 ; N ! Tire force [sy] component, wheel R5
SV_FY_SM_R6 -661.7379729 ; N ! Tire force [sy] component, wheel R6
SV_FY_SM_R7 398.8898462 ; N ! Tire force [sy] component, wheel R7
SV_FY_SM_R8 -110.5457989 ; N ! Tire force [sy] component, wheel R8
SV_FY_SM_R9 145.8295062 ; N ! Tire force [sy] component, wheel R9
SV_FZ_SM_L1 20792.44227 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L10 18198.90213 ; N ! Tire force force [sz] component, wheel L10
SV_FZ_SM_L11 22077.09463 ; N ! Tire force force [sz] component, wheel L11
SV_FZ_SM_L12 11533.53784 ; N ! Tire force force [sz] component, wheel L12
SV_FZ_SM_L13 12033.66474 ; N ! Tire force force [sz] component, wheel L13
SV_FZ_SM_L14 18039.07109 ; N ! Tire force force [sz] component, wheel L14
SV_FZ_SM_L15 18234.81376 ; N ! Tire force force [sz] component, wheel L15
SV_FZ_SM_L2 12596.84941 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_L3 12629.70245 ; N ! Tire force force [sz] component, wheel L3
SV_FZ_SM_L4 17617.57106 ; N ! Tire force force [sz] component, wheel L4
SV_FZ_SM_L5 17667.13246 ; N ! Tire force force [sz] component, wheel L5
SV_FZ_SM_L6 22020.65747 ; N ! Tire force force [sz] component, wheel L6
SV_FZ_SM_L7 11567.19357 ; N ! Tire force force [sz] component, wheel L7
SV_FZ_SM_L8 11992.69058 ; N ! Tire force force [sz] component, wheel L8
SV_FZ_SM_L9 17987.00874 ; N ! Tire force force [sz] component, wheel L9
SV_FZ_SM_R1 20916.65656 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R10 17970.44631 ; N ! Tire force force [sz] component, wheel R10
SV_FZ_SM_R11 21891.22007 ; N ! Tire force force [sz] component, wheel R11
SV_FZ_SM_R12 12102.60397 ; N ! Tire force force [sz] component, wheel R12
SV_FZ_SM_R13 11730.06766 ; N ! Tire force force [sz] component, wheel R13
SV_FZ_SM_R14 18163.90936 ; N ! Tire force force [sz] component, wheel R14
SV_FZ_SM_R15 17967.16348 ; N ! Tire force force [sz] component, wheel R15
SV_FZ_SM_R2 12668.71746 ; N ! Tire force force [sz] component, wheel R2
SV_FZ_SM_R3 12712.53885 ; N ! Tire force force [sz] component, wheel R3
SV_FZ_SM_R4 18112.7504 ; N ! Tire force force [sz] component, wheel R4
SV_FZ_SM_R5 18062.85312 ; N ! Tire force force [sz] component, wheel R5
SV_FZ_SM_R6 21804.36719 ; N ! Tire force force [sz] component, wheel R6
SV_FZ_SM_R7 12203.06334 ; N ! Tire force force [sz] component, wheel R7
SV_FZ_SM_R8 11857.45541 ; N ! Tire force force [sz] component, wheel R8
SV_FZ_SM_R9 18183.40925 ; N ! Tire force force [sz] component, wheel R9
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A10   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A11   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A12   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A13   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A14   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A15   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A3    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A4    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A5    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A6    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A7    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A8    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A9    0 ; N ! Friction force at rack
SV_GEAR             1 ; - ! Automatic transmission gear {Gear_CL}, veh #1
SV_GEAR_2           1 ; - ! Automatic transmission gear {Gear_CL}, veh #2
SV_GEAR_3           1 ; - ! Automatic transmission gear {Gear_CL}, veh #3
SV_GEAR_DELAY       1 ; - ! Delayed transmission gear position {Gear_Del}, veh #1
SV_GEAR_DELAY_2     1 ; - ! Delayed transmission gear position {Gear_Del}, veh #2
SV_GEAR_DELAY_3     1 ; - ! Delayed transmission gear position {Gear_Del}, veh #3
SV_GEAR_MEM         1 ; - ! Gear saved in memory, used for transition, veh #1
SV_GEAR_MEM_2       1 ; - ! Gear saved in memory, used for transition, veh #2
SV_GEAR_MEM_3       1 ; - ! Gear saved in memory, used for transition, veh #3
SV_GEAR_STAT        1 ; - ! Transmission gear status {GearStat}, veh #1
SV_GEAR_STAT_2      1 ; - ! Transmission gear status {GearStat}, veh #2
SV_GEAR_STAT_3      1 ; - ! Transmission gear status {GearStat}, veh #3
SV_IVERR            0 ; m ! ODE: Integral of SC speed error, veh #1 {Vx_IErr}
SV_IVERR_2 -0.8781959058 ; m ! ODE: Integral of SC speed error, veh #2 {Vx_IErr_2}
SV_IVERR_3 -0.05672434312 ; m ! ODE: Integral of SC speed error, veh #3 {Vx_IErr_3}
SV_I_GEAR_SHIFT   0.2 ; kg-m2 ! Transmission gear inertia modulated by shift, veh #1
SV_I_GEAR_SHIFT_2 0.2 ; kg-m2 ! Transmission gear inertia modulated by shift, veh #2
SV_I_GEAR_SHIFT_3 0.2 ; kg-m2 ! Transmission gear inertia modulated by shift, veh #3
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia when automatic shift started,
                        ! veh #1
SV_I_GEAR_SHIFT_START_2 0 ; kg-m2 ! Gear spin inertia when automatic shift started,
                          ! veh #2
SV_I_GEAR_SHIFT_START_3 0 ; kg-m2 ! Gear spin inertia when automatic shift started,
                          ! veh #3
SV_JNCR_A1 -0.0001192749711 ; m/s ! ODE: Jounce rate of axle 1
SV_JNCR_A10 -1.95410877e-05 ; m/s ! ODE: Jounce rate of axle 10
SV_JNCR_A11 -9.483249085e-05 ; m/s ! ODE: Jounce rate of axle 11
SV_JNCR_A12 2.41248469e-06 ; m/s ! ODE: Jounce rate of axle 12
SV_JNCR_A13 5.815350164e-05 ; m/s ! ODE: Jounce rate of axle 13
SV_JNCR_A14 -3.722975065e-06 ; m/s ! ODE: Jounce rate of axle 14
SV_JNCR_A15 -1.927779274e-05 ; m/s ! ODE: Jounce rate of axle 15
SV_JNCR_A2 -2.940963276e-05 ; m/s ! ODE: Jounce rate of axle 2
SV_JNCR_A3 4.853131439e-05 ; m/s ! ODE: Jounce rate of axle 3
SV_JNCR_A4 6.481521767e-07 ; m/s ! ODE: Jounce rate of axle 4
SV_JNCR_A5 -4.616812532e-06 ; m/s ! ODE: Jounce rate of axle 5
SV_JNCR_A6 -7.074029997e-05 ; m/s ! ODE: Jounce rate of axle 6
SV_JNCR_A7 1.186208736e-05 ; m/s ! ODE: Jounce rate of axle 7
SV_JNCR_A8 5.601789654e-05 ; m/s ! ODE: Jounce rate of axle 8
SV_JNCR_A9 -2.877330704e-06 ; m/s ! ODE: Jounce rate of axle 9
SV_JNC_A1 0.001089841823 ; m ! ODE: Jounce of axle 1
SV_JNC_A10 0.008703428142 ; m ! ODE: Jounce of axle 10
SV_JNC_A11 0.01196858094 ; m ! ODE: Jounce of axle 11
SV_JNC_A12 0.005179140869 ; m ! ODE: Jounce of axle 12
SV_JNC_A13 0.005627345473 ; m ! ODE: Jounce of axle 13
SV_JNC_A14 0.007230856064 ; m ! ODE: Jounce of axle 14
SV_JNC_A15 0.008522070697 ; m ! ODE: Jounce of axle 15
SV_JNC_A2 0.00544820355 ; m ! ODE: Jounce of axle 2
SV_JNC_A3 0.01036225385 ; m ! ODE: Jounce of axle 3
SV_JNC_A4 0.007503888179 ; m ! ODE: Jounce of axle 4
SV_JNC_A5 0.008281551982 ; m ! ODE: Jounce of axle 5
SV_JNC_A6 0.01110080112 ; m ! ODE: Jounce of axle 6
SV_JNC_A7 0.00522697555 ; m ! ODE: Jounce of axle 7
SV_JNC_A8 0.006044475413 ; m ! ODE: Jounce of axle 8
SV_JNC_A9 0.007425181817 ; m ! ODE: Jounce of axle 9
SV_LK_WHL_L1        1 ; - ! Lockup state for wheel L1
SV_LK_WHL_L10       1 ; - ! Lockup state for wheel L10
SV_LK_WHL_L11       1 ; - ! Lockup state for wheel L11
SV_LK_WHL_L12       1 ; - ! Lockup state for wheel L12
SV_LK_WHL_L13       1 ; - ! Lockup state for wheel L13
SV_LK_WHL_L14       1 ; - ! Lockup state for wheel L14
SV_LK_WHL_L15       1 ; - ! Lockup state for wheel L15
SV_LK_WHL_L2        1 ; - ! Lockup state for wheel L2
SV_LK_WHL_L3        1 ; - ! Lockup state for wheel L3
SV_LK_WHL_L4        1 ; - ! Lockup state for wheel L4
SV_LK_WHL_L5        1 ; - ! Lockup state for wheel L5
SV_LK_WHL_L6        1 ; - ! Lockup state for wheel L6
SV_LK_WHL_L7        1 ; - ! Lockup state for wheel L7
SV_LK_WHL_L8        1 ; - ! Lockup state for wheel L8
SV_LK_WHL_L9        1 ; - ! Lockup state for wheel L9
SV_LK_WHL_R1        1 ; - ! Lockup state for wheel R1
SV_LK_WHL_R10       1 ; - ! Lockup state for wheel R10
SV_LK_WHL_R11       1 ; - ! Lockup state for wheel R11
SV_LK_WHL_R12       1 ; - ! Lockup state for wheel R12
SV_LK_WHL_R13       1 ; - ! Lockup state for wheel R13
SV_LK_WHL_R14       1 ; - ! Lockup state for wheel R14
SV_LK_WHL_R15       1 ; - ! Lockup state for wheel R15
SV_LK_WHL_R2        1 ; - ! Lockup state for wheel R2
SV_LK_WHL_R3        1 ; - ! Lockup state for wheel R3
SV_LK_WHL_R4        1 ; - ! Lockup state for wheel R4
SV_LK_WHL_R5        1 ; - ! Lockup state for wheel R5
SV_LK_WHL_R6        1 ; - ! Lockup state for wheel R6
SV_LK_WHL_R7        1 ; - ! Lockup state for wheel R7
SV_LK_WHL_R8        1 ; - ! Lockup state for wheel R8
SV_LK_WHL_R9        1 ; - ! Lockup state for wheel R9
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Clutch locked while in neutral in previous time
                           ! step, veh #1
SV_LOCKED_CLUTCH_NEUTRAL_2 0 ; - ! Clutch locked while in neutral in previous time
                             ! step, veh #2
SV_LOCKED_CLUTCH_NEUTRAL_3 0 ; - ! Clutch locked while in neutral in previous time
                             ! step, veh #3
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque, veh. #1 {M_boost}
SV_MBOOST_2         0 ; N-m ! ODE: Delayed boost torque, veh. #2 {M_boost_2}
SV_MBOOST_3         0 ; N-m ! ODE: Delayed boost torque, veh. #3 {M_boost_3}
SV_MX_H1  679.5906195 ; N-m ! Roll moment minus damping, hitch 1
SV_MX_H3  9.456851531 ; N-m ! Roll moment minus damping, hitch 3
SV_MX_H5 -38.57669841 ; N-m ! Roll moment minus damping, hitch 5
SV_MY_BRK_L1 43.10349339 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L10 -1128.992604 ; N-m ! Spin moment, wheel L10
SV_MY_BRK_L11 1927.461191 ; N-m ! Spin moment, wheel L11
SV_MY_BRK_L12 592.6943833 ; N-m ! Spin moment, wheel L12
SV_MY_BRK_L13 627.9941455 ; N-m ! Spin moment, wheel L13
SV_MY_BRK_L14 -1199.977452 ; N-m ! Spin moment, wheel L14
SV_MY_BRK_L15 -1215.971253 ; N-m ! Spin moment, wheel L15
SV_MY_BRK_L2 -37.90798964 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_L3 -33.45485617 ; N-m ! Spin moment, wheel L3
SV_MY_BRK_L4 -281.7564564 ; N-m ! Spin moment, wheel L4
SV_MY_BRK_L5 -235.8785705 ; N-m ! Spin moment, wheel L5
SV_MY_BRK_L6 1877.381517 ; N-m ! Spin moment, wheel L6
SV_MY_BRK_L7 625.5235118 ; N-m ! Spin moment, wheel L7
SV_MY_BRK_L8 659.6883158 ; N-m ! Spin moment, wheel L8
SV_MY_BRK_L9 -1146.080461 ; N-m ! Spin moment, wheel L9
SV_MY_BRK_R1 213.2363366 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R10 -1153.100779 ; N-m ! Spin moment, wheel R10
SV_MY_BRK_R11 1402.56057 ; N-m ! Spin moment, wheel R11
SV_MY_BRK_R12 324.2660425 ; N-m ! Spin moment, wheel R12
SV_MY_BRK_R13 316.8455356 ; N-m ! Spin moment, wheel R13
SV_MY_BRK_R14 -1262.267533 ; N-m ! Spin moment, wheel R14
SV_MY_BRK_R15 -1246.264744 ; N-m ! Spin moment, wheel R15
SV_MY_BRK_R2 224.3027967 ; N-m ! Spin moment, wheel R2
SV_MY_BRK_R3 237.4527438 ; N-m ! Spin moment, wheel R3
SV_MY_BRK_R4 -72.09907606 ; N-m ! Spin moment, wheel R4
SV_MY_BRK_R5 -26.26725871 ; N-m ! Spin moment, wheel R5
SV_MY_BRK_R6 1208.102991 ; N-m ! Spin moment, wheel R6
SV_MY_BRK_R7 261.1677304 ; N-m ! Spin moment, wheel R7
SV_MY_BRK_R8 254.9703369 ; N-m ! Spin moment, wheel R8
SV_MY_BRK_R9 -1204.708227 ; N-m ! Spin moment, wheel R9
SV_MY_H1            0 ; N-m ! Pitch moment minus damping, hitch 1
SV_MY_H3            0 ; N-m ! Pitch moment minus damping, hitch 3
SV_MY_H5            0 ; N-m ! Pitch moment minus damping, hitch 5
SV_MZ_H1            0 ; N-m ! Articulation moment minus damping, hitch 1
SV_MZ_H3            0 ; N-m ! Articulation moment minus damping, hitch 3
SV_MZ_H5            0 ; N-m ! Articulation moment minus damping, hitch 5
SV_MZ_WHEEL_L1 -0.07136423581 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L10 0.07528543343 ; N-m ! Tire Mz, wheel L10
SV_MZ_WHEEL_L11 0.9020688201 ; N-m ! Tire Mz, wheel L11
SV_MZ_WHEEL_L12 -0.09450767021 ; N-m ! Tire Mz, wheel L12
SV_MZ_WHEEL_L13 0.03389864282 ; N-m ! Tire Mz, wheel L13
SV_MZ_WHEEL_L14 -0.04528695254 ; N-m ! Tire Mz, wheel L14
SV_MZ_WHEEL_L15 0.06870803368 ; N-m ! Tire Mz, wheel L15
SV_MZ_WHEEL_L2 4.517097496 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_L3 4.64388721 ; N-m ! Tire Mz, wheel L3
SV_MZ_WHEEL_L4 -0.04993079904 ; N-m ! Tire Mz, wheel L4
SV_MZ_WHEEL_L5 -0.02045611417 ; N-m ! Tire Mz, wheel L5
SV_MZ_WHEEL_L6 0.6082745744 ; N-m ! Tire Mz, wheel L6
SV_MZ_WHEEL_L7 -0.1780846811 ; N-m ! Tire Mz, wheel L7
SV_MZ_WHEEL_L8 0.008656423842 ; N-m ! Tire Mz, wheel L8
SV_MZ_WHEEL_L9 -0.04654523207 ; N-m ! Tire Mz, wheel L9
SV_MZ_WHEEL_R1 1.984602442 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R10 0.0482066082 ; N-m ! Tire Mz, wheel R10
SV_MZ_WHEEL_R11 -3.120644293 ; N-m ! Tire Mz, wheel R11
SV_MZ_WHEEL_R12 -0.07838727354 ; N-m ! Tire Mz, wheel R12
SV_MZ_WHEEL_R13 0.02470253205 ; N-m ! Tire Mz, wheel R13
SV_MZ_WHEEL_R14 -0.04124721845 ; N-m ! Tire Mz, wheel R14
SV_MZ_WHEEL_R15 0.05111298493 ; N-m ! Tire Mz, wheel R15
SV_MZ_WHEEL_R2 -4.765623583 ; N-m ! Tire Mz, wheel R2
SV_MZ_WHEEL_R3 -4.960440632 ; N-m ! Tire Mz, wheel R3
SV_MZ_WHEEL_R4 -0.01019239037 ; N-m ! Tire Mz, wheel R4
SV_MZ_WHEEL_R5 -0.03711228422 ; N-m ! Tire Mz, wheel R5
SV_MZ_WHEEL_R6 -2.777912251 ; N-m ! Tire Mz, wheel R6
SV_MZ_WHEEL_R7 -0.1390601943 ; N-m ! Tire Mz, wheel R7
SV_MZ_WHEEL_R8 0.03793552943 ; N-m ! Tire Mz, wheel R8
SV_MZ_WHEEL_R9 -0.05269306477 ; N-m ! Tire Mz, wheel R9
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff, veh
                      ! #1
SV_M_CL2_CAP_FD_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff,
                        ! veh #2
SV_M_CL2_CAP_FD_DYN_3 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff,
                        ! veh #3
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff, veh
                      ! #1
SV_M_CL2_CAP_RD_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff,
                        ! veh #2
SV_M_CL2_CAP_RD_DYN_3 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff,
                        ! veh #3
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for axles
                      ! 1,2, veh #1
SV_M_CL2_CAP_XC_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for
                        ! axles 1,2, veh #2
SV_M_CL2_CAP_XC_DYN_3 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for
                        ! axles 1,2, veh #3
SV_M_CLUTCH_DEL     0 ; N-m ! ODE: Time delayed clutch torque capacity, veh #1
SV_M_CLUTCH_DEL_2   0 ; N-m ! ODE: Time delayed clutch torque capacity, veh #2
SV_M_CLUTCH_DEL_3   0 ; N-m ! ODE: Time delayed clutch torque capacity, veh #3
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff, veh #1
SV_M_CL_CAP_FD_DYN_2 0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff, veh #2
SV_M_CL_CAP_FD_DYN_3 0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff, veh #3
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff, veh #1
SV_M_CL_CAP_RD_DYN_2 0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff, veh #2
SV_M_CL_CAP_RD_DYN_3 0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff, veh #3
SV_M_CL_CAP_XC_DYN  0 ; N-m ! ODE: Clutch capacity for inter-axle diff for axles
                      ! 1,2, veh #1
SV_M_CL_CAP_XC_DYN_2 0 ; N-m ! ODE: Clutch capacity for inter-axle diff for axles
                       ! 1,2, veh #2
SV_M_CL_CAP_XC_DYN_3 0 ; N-m ! ODE: Clutch capacity for inter-axle diff for axles
                       ! 1,2, veh #3
SV_M_CL_LF_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle
                      ! diff, veh #1
SV_M_CL_LF_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle
                       ! diff, veh #2
SV_M_CL_LF_CAP_DYN_3 0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle
                       ! diff, veh #3
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle
                      ! diff, veh #1
SV_M_CL_LR_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle
                       ! diff, veh #2
SV_M_CL_LR_CAP_DYN_3 0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle
                       ! diff, veh #3
SV_M_CL_L_D3_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                       ! for axles 1,2, veh #1
SV_M_CL_L_D3_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #2
SV_M_CL_L_D3_CAP_DYN_3 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #3
SV_M_CL_RF_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                      ! diff, veh #1
SV_M_CL_RF_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                       ! diff, veh #2
SV_M_CL_RF_CAP_DYN_3 0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                       ! diff, veh #3
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff, veh #1
SV_M_CL_RR_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                       ! diff, veh #2
SV_M_CL_RR_CAP_DYN_3 0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                       ! diff, veh #3
SV_M_CL_R_D3_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                       ! for axles 1,2, veh #1
SV_M_CL_R_D3_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #2
SV_M_CL_R_D3_CAP_DYN_3 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #3
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS, veh #1
SV_M_ENG_ESC_APPLY_2 0 ; N-m ! ODE: Applied engine torque from ESC/TCS, veh #2
SV_M_ENG_ESC_APPLY_3 0 ; N-m ! ODE: Applied engine torque from ESC/TCS, veh #3
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request, veh #1
SV_M_ENG_ESC_ERROR_2 0 ; N-m-s ! ODE: Integral of error from ESC request, veh #2
SV_M_ENG_ESC_ERROR_3 0 ; N-m-s ! ODE: Integral of error from ESC request, veh #3
SV_M_HYS_COL -0.09999838233 ; N-m ! Steering column friction, vehicle #1
SV_M_HYS_COL_2 0.09636413439 ; N-m ! Steering column friction, vehicle #2
SV_M_HYS_COL_3 0.09215778317 ; N-m ! Steering column friction, vehicle #3
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A10   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A11   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A12   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A13   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A14   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A15   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A3    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A4    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A5    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A6    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A7    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A8    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A9    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -198.7772772 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L10         0 ; N-m ! Kingpin moment, wheel L10
SV_M_KP_L11 -53.00593587 ; N-m ! Kingpin moment, wheel L11
SV_M_KP_L12         0 ; N-m ! Kingpin moment, wheel L12
SV_M_KP_L13         0 ; N-m ! Kingpin moment, wheel L13
SV_M_KP_L14         0 ; N-m ! Kingpin moment, wheel L14
SV_M_KP_L15         0 ; N-m ! Kingpin moment, wheel L15
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_L3          0 ; N-m ! Kingpin moment, wheel L3
SV_M_KP_L4          0 ; N-m ! Kingpin moment, wheel L4
SV_M_KP_L5          0 ; N-m ! Kingpin moment, wheel L5
SV_M_KP_L6 -56.34140296 ; N-m ! Kingpin moment, wheel L6
SV_M_KP_L7          0 ; N-m ! Kingpin moment, wheel L7
SV_M_KP_L8          0 ; N-m ! Kingpin moment, wheel L8
SV_M_KP_L9          0 ; N-m ! Kingpin moment, wheel L9
SV_M_KP_R1 206.6799081 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R10         0 ; N-m ! Kingpin moment, wheel R10
SV_M_KP_R11 112.1351022 ; N-m ! Kingpin moment, wheel R11
SV_M_KP_R12         0 ; N-m ! Kingpin moment, wheel R12
SV_M_KP_R13         0 ; N-m ! Kingpin moment, wheel R13
SV_M_KP_R14         0 ; N-m ! Kingpin moment, wheel R14
SV_M_KP_R15         0 ; N-m ! Kingpin moment, wheel R15
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_KP_R3          0 ; N-m ! Kingpin moment, wheel R3
SV_M_KP_R4          0 ; N-m ! Kingpin moment, wheel R4
SV_M_KP_R5          0 ; N-m ! Kingpin moment, wheel R5
SV_M_KP_R6 126.0049342 ; N-m ! Kingpin moment, wheel R6
SV_M_KP_R7          0 ; N-m ! Kingpin moment, wheel R7
SV_M_KP_R8          0 ; N-m ! Kingpin moment, wheel R8
SV_M_KP_R9          0 ; N-m ! Kingpin moment, wheel R9
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L10       0 ; N-m ! Kingpin steer park torque, wheel L10
SV_M_PARK_L11       0 ; N-m ! Kingpin steer park torque, wheel L11
SV_M_PARK_L12       0 ; N-m ! Kingpin steer park torque, wheel L12
SV_M_PARK_L13       0 ; N-m ! Kingpin steer park torque, wheel L13
SV_M_PARK_L14       0 ; N-m ! Kingpin steer park torque, wheel L14
SV_M_PARK_L15       0 ; N-m ! Kingpin steer park torque, wheel L15
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_L3        0 ; N-m ! Kingpin steer park torque, wheel L3
SV_M_PARK_L4        0 ; N-m ! Kingpin steer park torque, wheel L4
SV_M_PARK_L5        0 ; N-m ! Kingpin steer park torque, wheel L5
SV_M_PARK_L6        0 ; N-m ! Kingpin steer park torque, wheel L6
SV_M_PARK_L7        0 ; N-m ! Kingpin steer park torque, wheel L7
SV_M_PARK_L8        0 ; N-m ! Kingpin steer park torque, wheel L8
SV_M_PARK_L9        0 ; N-m ! Kingpin steer park torque, wheel L9
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R10       0 ; N-m ! Kingpin steer park torque, wheel R10
SV_M_PARK_R11       0 ; N-m ! Kingpin steer park torque, wheel R11
SV_M_PARK_R12       0 ; N-m ! Kingpin steer park torque, wheel R12
SV_M_PARK_R13       0 ; N-m ! Kingpin steer park torque, wheel R13
SV_M_PARK_R14       0 ; N-m ! Kingpin steer park torque, wheel R14
SV_M_PARK_R15       0 ; N-m ! Kingpin steer park torque, wheel R15
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_PARK_R3        0 ; N-m ! Kingpin steer park torque, wheel R3
SV_M_PARK_R4        0 ; N-m ! Kingpin steer park torque, wheel R4
SV_M_PARK_R5        0 ; N-m ! Kingpin steer park torque, wheel R5
SV_M_PARK_R6        0 ; N-m ! Kingpin steer park torque, wheel R6
SV_M_PARK_R7        0 ; N-m ! Kingpin steer park torque, wheel R7
SV_M_PARK_R8        0 ; N-m ! Kingpin steer park torque, wheel R8
SV_M_PARK_R9        0 ; N-m ! Kingpin steer park torque, wheel R9
SV_M_TC             0 ; N-m ! Transmission input shaft torque {M_TC}, veh #1
SV_M_TC_2           0 ; N-m ! Transmission input shaft torque {M_TC}, veh #2
SV_M_TC_3           0 ; N-m ! Transmission input shaft torque {M_TC}, veh #3
SV_N_START_CROSS    0 ; - ! Count of start-crossings of vehicle #1 on looped path
                      ! PATH_ID_DM(1)
SV_N_START_CROSS_2  0 ; - ! Count of start-crossings of vehicle #2 on looped path
                      ! PATH_ID_DM(2)
SV_N_START_CROSS_3  0 ; - ! Count of start-crossings of vehicle #3 on looped path
                      ! PATH_ID_DM(3)
SV_PBK_L1          10 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L10 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel L10
SV_PBK_L11 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel L11
SV_PBK_L12 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel L12
SV_PBK_L13 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel L13
SV_PBK_L14 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel L14
SV_PBK_L15 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel L15
SV_PBK_L2          10 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_L3          10 ; MPa ! ODE: Brake actuator pressure for wheel L3
SV_PBK_L4          10 ; MPa ! ODE: Brake actuator pressure for wheel L4
SV_PBK_L5          10 ; MPa ! ODE: Brake actuator pressure for wheel L5
SV_PBK_L6 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel L6
SV_PBK_L7 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel L7
SV_PBK_L8 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel L8
SV_PBK_L9 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel L9
SV_PBK_R1          10 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R10 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel R10
SV_PBK_R11 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel R11
SV_PBK_R12 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel R12
SV_PBK_R13 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel R13
SV_PBK_R14 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel R14
SV_PBK_R15 10.06006511 ; MPa ! ODE: Brake actuator pressure for wheel R15
SV_PBK_R2          10 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PBK_R3          10 ; MPa ! ODE: Brake actuator pressure for wheel R3
SV_PBK_R4          10 ; MPa ! ODE: Brake actuator pressure for wheel R4
SV_PBK_R5          10 ; MPa ! ODE: Brake actuator pressure for wheel R5
SV_PBK_R6 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel R6
SV_PBK_R7 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel R7
SV_PBK_R8 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel R8
SV_PBK_R9 10.98205872 ; MPa ! ODE: Brake actuator pressure for wheel R9
SV_PITCH -0.2223346551 ; deg ! ODE: Pitch of sprung mass, unit 1 {Pitch}
SV_PITCH_3 -0.03754952523 ; deg ! ODE: Pitch of sprung mass, unit 3 {Pitch_3}
SV_PITCH_5 -0.02128767051 ; deg ! ODE: Pitch of sprung mass, unit 5 {Pitch_5}
SV_PITCH_H1_OLD 0.1962920106 ; deg ! Relative pitch (2-1-3) for hitch 1
SV_PITCH_H3_OLD -0.00559710724 ; deg ! Relative pitch (2-1-3) for hitch 3
SV_PITCH_H5_OLD -0.02231632703 ; deg ! Relative pitch (2-1-3) for hitch 5
SV_PITCH_REL_2 0.1961871773 ; deg ! ODE: Relative pitch (3-2-1) for unit 2
SV_PITCH_REL_4 -0.005596429859 ; deg ! ODE: Relative pitch (3-2-1) for unit 4
SV_PITCH_REL_6 -0.02230881785 ; deg ! ODE: Relative pitch (3-2-1) for unit 6
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio, veh #1
SV_RGEAR_CVT_2      0 ; - ! ODE: Delayed CVT gear ratio, veh #2
SV_RGEAR_CVT_3      0 ; - ! ODE: Delayed CVT gear ratio, veh #3
SV_ROLL 0.005913748302 ; deg ! ODE: Roll (Euler) of sprung mass, unit 1 {Roll_E}
SV_ROLL_3 -0.006303376714 ; deg ! ODE: Roll (Euler) of sprung mass, unit 3
                          ! {Roll_E_3}
SV_ROLL_5 -0.00724226485 ; deg ! ODE: Roll (Euler) of sprung mass, unit 5 {Roll_E_5}
SV_ROLL_A1 -0.01314365464 ; deg ! ODE: Roll of axle 1
SV_ROLL_A10 0.003113631434 ; deg ! ODE: Roll of axle 10
SV_ROLL_A11 -0.00267771751 ; deg ! ODE: Roll of axle 11
SV_ROLL_A12 0.01372857956 ; deg ! ODE: Roll of axle 12
SV_ROLL_A13 0.003788108988 ; deg ! ODE: Roll of axle 13
SV_ROLL_A14 0.01009884116 ; deg ! ODE: Roll of axle 14
SV_ROLL_A15 0.003938516738 ; deg ! ODE: Roll of axle 15
SV_ROLL_A2 -0.005128128266 ; deg ! ODE: Roll of axle 2
SV_ROLL_A3 -0.004998389526 ; deg ! ODE: Roll of axle 3
SV_ROLL_A4 -0.004611628667 ; deg ! ODE: Roll of axle 4
SV_ROLL_A5 -0.006168772624 ; deg ! ODE: Roll of axle 5
SV_ROLL_A6 -0.004450831283 ; deg ! ODE: Roll of axle 6
SV_ROLL_A7 0.01355067686 ; deg ! ODE: Roll of axle 7
SV_ROLL_A8 0.004767527473 ; deg ! ODE: Roll of axle 8
SV_ROLL_A9 0.009781519008 ; deg ! ODE: Roll of axle 9
SV_ROLL_H1_OLD 0.006795906195 ; deg ! Relative roll (2-1-3) for hitch 1
SV_ROLL_H3_OLD 9.456851531e-05 ; deg ! Relative roll (2-1-3) for hitch 3
SV_ROLL_H5_OLD -0.0003857669841 ; deg ! Relative roll (2-1-3) for hitch 5
SV_ROLL_REL_2 0.009381873691 ; deg ! ODE: Relative roll (3-2-1) for unit 2
SV_ROLL_REL_4 2.773824093e-05 ; deg ! ODE: Relative roll (3-2-1) for unit 4
SV_ROLL_REL_6 -0.0006499104325 ; deg ! ODE: Relative roll (3-2-1) for unit 6
SV_ROT_L1 34.75319631 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L10 35.75859878 ; rev ! ODE: Rotation of wheel L10
SV_ROT_L11 34.95952879 ; rev ! ODE: Rotation of wheel L11
SV_ROT_L12 32.95307612 ; rev ! ODE: Rotation of wheel L12
SV_ROT_L13 32.74293889 ; rev ! ODE: Rotation of wheel L13
SV_ROT_L14 35.81910805 ; rev ! ODE: Rotation of wheel L14
SV_ROT_L15 35.81976289 ; rev ! ODE: Rotation of wheel L15
SV_ROT_L2  33.3497591 ; rev ! ODE: Rotation of wheel L2
SV_ROT_L3 34.05869407 ; rev ! ODE: Rotation of wheel L3
SV_ROT_L4 35.66474815 ; rev ! ODE: Rotation of wheel L4
SV_ROT_L5 35.68414045 ; rev ! ODE: Rotation of wheel L5
SV_ROT_L6 34.91074623 ; rev ! ODE: Rotation of wheel L6
SV_ROT_L7 33.01028363 ; rev ! ODE: Rotation of wheel L7
SV_ROT_L8 32.69718749 ; rev ! ODE: Rotation of wheel L8
SV_ROT_L9 35.77234542 ; rev ! ODE: Rotation of wheel L9
SV_ROT_LK_L1 34.75319204 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L10 35.75864077 ; rev ! Rotation reference of wheel L10 in "locked" mode
SV_ROT_LK_L11 34.95939142 ; rev ! Rotation reference of wheel L11 in "locked" mode
SV_ROT_LK_L12 32.95305508 ; rev ! Rotation reference of wheel L12 in "locked" mode
SV_ROT_LK_L13 32.74291661 ; rev ! Rotation reference of wheel L13 in "locked" mode
SV_ROT_LK_L14 35.81915272 ; rev ! Rotation reference of wheel L14 in "locked" mode
SV_ROT_LK_L15 35.81980815 ; rev ! Rotation reference of wheel L15 in "locked" mode
SV_ROT_LK_L2 33.34975992 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_L3 34.05869474 ; rev ! Rotation reference of wheel L3 in "locked" mode
SV_ROT_LK_L4 35.66475833 ; rev ! Rotation reference of wheel L4 in "locked" mode
SV_ROT_LK_L5 35.68414893 ; rev ! Rotation reference of wheel L5 in "locked" mode
SV_ROT_LK_L6 34.91061235 ; rev ! Rotation reference of wheel L6 in "locked" mode
SV_ROT_LK_L7 33.01026138 ; rev ! Rotation reference of wheel L7 in "locked" mode
SV_ROT_LK_L8 32.69716402 ; rev ! Rotation reference of wheel L8 in "locked" mode
SV_ROT_LK_L9 35.77238805 ; rev ! Rotation reference of wheel L9 in "locked" mode
SV_ROT_LK_R1 34.81166766 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R10 35.62087146 ; rev ! Rotation reference of wheel R10 in "locked" mode
SV_ROT_LK_R11 35.05158808 ; rev ! Rotation reference of wheel R11 in "locked" mode
SV_ROT_LK_R12 33.25459136 ; rev ! Rotation reference of wheel R12 in "locked" mode
SV_ROT_LK_R13 33.38620416 ; rev ! Rotation reference of wheel R13 in "locked" mode
SV_ROT_LK_R14 35.66010305 ; rev ! Rotation reference of wheel R14 in "locked" mode
SV_ROT_LK_R15 35.66417225 ; rev ! Rotation reference of wheel R15 in "locked" mode
SV_ROT_LK_R2 33.77479999 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_LK_R3 34.26315313 ; rev ! Rotation reference of wheel R3 in "locked" mode
SV_ROT_LK_R4 35.57879352 ; rev ! Rotation reference of wheel R4 in "locked" mode
SV_ROT_LK_R5 35.58526468 ; rev ! Rotation reference of wheel R5 in "locked" mode
SV_ROT_LK_R6 34.97899706 ; rev ! Rotation reference of wheel R6 in "locked" mode
SV_ROT_LK_R7 33.50256003 ; rev ! Rotation reference of wheel R7 in "locked" mode
SV_ROT_LK_R8 33.18170095 ; rev ! Rotation reference of wheel R8 in "locked" mode
SV_ROT_LK_R9 35.61953707 ; rev ! Rotation reference of wheel R9 in "locked" mode
SV_ROT_R1 34.81168177 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R10 35.62082872 ; rev ! ODE: Rotation of wheel R10
SV_ROT_R11 35.05168799 ; rev ! ODE: Rotation of wheel R11
SV_ROT_R12 33.25460307 ; rev ! ODE: Rotation of wheel R12
SV_ROT_R13 33.38621559 ; rev ! ODE: Rotation of wheel R13
SV_ROT_R14 35.66005631 ; rev ! ODE: Rotation of wheel R14
SV_ROT_R15 35.6641261 ; rev ! ODE: Rotation of wheel R15
SV_ROT_R2 33.77480743 ; rev ! ODE: Rotation of wheel R2
SV_ROT_R3 34.26316105 ; rev ! ODE: Rotation of wheel R3
SV_ROT_R4 35.57879058 ; rev ! ODE: Rotation of wheel R4
SV_ROT_R5 35.58526346 ; rev ! ODE: Rotation of wheel R5
SV_ROT_R6 34.97908303 ; rev ! ODE: Rotation of wheel R6
SV_ROT_R7 33.50256943 ; rev ! ODE: Rotation of wheel R7
SV_ROT_R8 33.18171013 ; rev ! ODE: Rotation of wheel R8
SV_ROT_R9 35.61949242 ; rev ! ODE: Rotation of wheel R9
SV_ROT_SHAFT_1 147.6740464 ; rev ! ODE: 1st drive axle diff input shaft rotation
                           ! {Rot_D3f}, veh #1
SV_ROT_SHAFT_1_2 146.3282767 ; rev ! ODE: 1st drive axle diff input shaft rotation
                             ! {Rot_D3f_2}, veh #2
SV_ROT_SHAFT_1_3 145.6568942 ; rev ! ODE: 1st drive axle diff input shaft rotation
                             ! {Rot_D3f_3}, veh #3
SV_ROT_SHAFT_2 150.3080813 ; rev ! ODE: 2nd drive axle diff input shaft rotation
                           ! {Rot_D3r}, veh #1
SV_ROT_SHAFT_2_2 144.9335748 ; rev ! ODE: 2nd drive axle diff input shaft rotation
                             ! {Rot_D3r_2}, veh #2
SV_ROT_SHAFT_2_3 145.4841399 ; rev ! ODE: 2nd drive axle diff input shaft rotation
                             ! {Rot_D3r_3}, veh #3
SV_ROT_SHAFT_3 148.9910638 ; rev ! ODE: Inter-axle diff for axles 1,2 input shaft
                           ! rotation , veh #1
SV_ROT_SHAFT_3_2 145.6309258 ; rev ! ODE: Inter-axle diff for axles 1,2 input shaft
                             ! rotation , veh #2
SV_ROT_SHAFT_3_3 145.570517 ; rev ! ODE: Inter-axle diff for axles 1,2 input shaft
                            ! rotation , veh #3
SV_ROT_SHAFT_L_D1 33.3497591 ; rev ! ODE: Diff1 Left (first) output shaft rotation,
                             ! veh #1
SV_ROT_SHAFT_L_D1_2 33.01028363 ; rev ! ODE: Diff1 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_L_D1_3 32.95307612 ; rev ! ODE: Diff1 Left (first) output shaft
                                ! rotation, veh #3
SV_ROT_SHAFT_L_D2 34.05869407 ; rev ! ODE: Diff2 Left (first) output shaft rotation,
                              ! veh #1
SV_ROT_SHAFT_L_D2_2 32.69718749 ; rev ! ODE: Diff2 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_L_D2_3 32.74293889 ; rev ! ODE: Diff2 Left (first) output shaft
                                ! rotation, veh #3
SV_ROT_SHAFT_L_D3 147.6740464 ; rev ! ODE: Diff3 Left (first) output shaft rotation,
                              ! veh #1
SV_ROT_SHAFT_L_D3_2 146.3282767 ; rev ! ODE: Diff3 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_L_D3_3 145.6568942 ; rev ! ODE: Diff3 Left (first) output shaft
                                ! rotation, veh #3
SV_ROT_SHAFT_R_D1 33.77480743 ; rev ! ODE: Diff1 Right (second) output shaft
                              ! rotation, veh #1
SV_ROT_SHAFT_R_D1_2 33.50256943 ; rev ! ODE: Diff1 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D1_3 33.25460307 ; rev ! ODE: Diff1 Right (second) output shaft
                                ! rotation, veh #3
SV_ROT_SHAFT_R_D2 34.26316105 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation, veh #1
SV_ROT_SHAFT_R_D2_2 33.18171013 ; rev ! ODE: Diff2 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D2_3 33.38621559 ; rev ! ODE: Diff2 Right (second) output shaft
                                ! rotation, veh #3
SV_ROT_SHAFT_R_D3 150.3080813 ; rev ! ODE: Diff3 Right (second) output shaft
                              ! rotation, veh #1
SV_ROT_SHAFT_R_D3_2 144.9335748 ; rev ! ODE: Diff3 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D3_3 145.4841399 ; rev ! ODE: Diff3 Right (second) output shaft
                                ! rotation, veh #3
SV_ROT_TC 170.4421314 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC},
                      ! veh #1
SV_ROT_TC_2 119.5572511 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC},
                        ! veh #2
SV_ROT_TC_3 118.4374207 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC},
                        ! veh #3
SV_ROT_TR_OUT 148.9910627 ; rev ! ODE: Transmission output shaft rotation, veh #1
SV_ROT_TR_OUT_2 145.6309267 ; rev ! ODE: Transmission output shaft rotation, veh #2
SV_ROT_TR_OUT_3 145.5705178 ; rev ! ODE: Transmission output shaft rotation, veh #3
SV_R_GEAR_SHIFT  14.4 ; - ! Transmission gear ratio modulated by gear shift, veh #1
SV_R_GEAR_SHIFT_2 14.4 ; - ! Transmission gear ratio modulated by gear shift, veh #2
SV_R_GEAR_SHIFT_3 14.4 ; - ! Transmission gear ratio modulated by gear shift, veh #3
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio when automatic shift started, veh #1
SV_R_GEAR_SHIFT_START_2 0 ; - ! Gear ratio when automatic shift started, veh #2
SV_R_GEAR_SHIFT_START_3 0 ; - ! Gear ratio when automatic shift started, veh #3
SV_R_GEAR_TOTAL_SC 63.36 ; - ! Driveline total gear ratio for speed controller, veh
                         ! #1
SV_R_GEAR_TOTAL_SC_2 63.36 ; - ! Driveline total gear ratio for speed controller,
                           ! veh #2
SV_R_GEAR_TOTAL_SC_3 63.36 ; - ! Driveline total gear ratio for speed controller,
                           ! veh #3
SV_R_KP_GND_L1 -1.011748567 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L10     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L11 -1.010971269 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L12     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L13     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L14     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L15     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L6 -1.011031029 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L8      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L9      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.012173439 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R10     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R11 -1.011243511 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R12     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R13     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R14     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R15     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R6 -1.011311543 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R8      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R9      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L10I 0.510723679 ; m ! Deflected radius for tire L10i (saved)
SV_R_L10O 0.5107042863 ; m ! Deflected radius for tire L10o (saved)
SV_R_L11I 0.5336475977 ; m ! Deflected radius for tire L11i (saved)
SV_R_L11O 0.5336475977 ; m ! Deflected radius for tire L11o (saved)
SV_R_L12I 0.5457109488 ; m ! Deflected radius for tire L12i (saved)
SV_R_L12O 0.545746031 ; m ! Deflected radius for tire L12o (saved)
SV_R_L13I 0.5455525892 ; m ! Deflected radius for tire L13i (saved)
SV_R_L13O 0.545533892 ; m ! Deflected radius for tire L13o (saved)
SV_R_L14I 0.510790183 ; m ! Deflected radius for tire L14i (saved)
SV_R_L14O 0.5108007892 ; m ! Deflected radius for tire L14o (saved)
SV_R_L15I 0.5107069445 ; m ! Deflected radius for tire L15i (saved)
SV_R_L15O 0.5106842255 ; m ! Deflected radius for tire L15o (saved)
SV_R_L1I 0.5345982533 ; m ! Deflected radius for tire L1i (saved)
SV_R_L1O 0.5345982533 ; m ! Deflected radius for tire L1o (saved)
SV_R_L2I  0.545332277 ; m ! Deflected radius for tire L2i (saved)
SV_R_L2O 0.5453366162 ; m ! Deflected radius for tire L2o (saved)
SV_R_L3I 0.5453197869 ; m ! Deflected radius for tire L3i (saved)
SV_R_L3O 0.5453247991 ; m ! Deflected radius for tire L3o (saved)
SV_R_L4I 0.5109902641 ; m ! Deflected radius for tire L4i (saved)
SV_R_L4O 0.5110322811 ; m ! Deflected radius for tire L4o (saved)
SV_R_L5I 0.5109692416 ; m ! Deflected radius for tire L5i (saved)
SV_R_L5O 0.5110028204 ; m ! Deflected radius for tire L5o (saved)
SV_R_L6I 0.5336901036 ; m ! Deflected radius for tire L6i (saved)
SV_R_L6O 0.5336901036 ; m ! Deflected radius for tire L6o (saved)
SV_R_L7I 0.5456965471 ; m ! Deflected radius for tire L7i (saved)
SV_R_L7O 0.5457357631 ; m ! Deflected radius for tire L7o (saved)
SV_R_L8I 0.5455627102 ; m ! Deflected radius for tire L8i (saved)
SV_R_L8O 0.5455544068 ; m ! Deflected radius for tire L8o (saved)
SV_R_L9I 0.5108137568 ; m ! Deflected radius for tire L9i (saved)
SV_R_L9O 0.5108304377 ; m ! Deflected radius for tire L9o (saved)
SV_R_R10I 0.5108208305 ; m ! Deflected radius for tire R10i (saved)
SV_R_R10O 0.5108402232 ; m ! Deflected radius for tire R10o (saved)
SV_R_R11I 0.5337849374 ; m ! Deflected radius for tire R11i (saved)
SV_R_R11O 0.5337849374 ; m ! Deflected radius for tire R11o (saved)
SV_R_R12I 0.5455351983 ; m ! Deflected radius for tire R12i (saved)
SV_R_R12O 0.5455001161 ; m ! Deflected radius for tire R12o (saved)
SV_R_R13I 0.545646256 ; m ! Deflected radius for tire R13i (saved)
SV_R_R13O 0.5456649532 ; m ! Deflected radius for tire R13o (saved)
SV_R_R14I 0.5107370491 ; m ! Deflected radius for tire R14i (saved)
SV_R_R14O 0.5107264429 ; m ! Deflected radius for tire R14o (saved)
SV_R_R15I 0.5108207596 ; m ! Deflected radius for tire R15i (saved)
SV_R_R15O 0.5108434787 ; m ! Deflected radius for tire R15o (saved)
SV_R_R1I 0.5345072706 ; m ! Deflected radius for tire R1i (saved)
SV_R_R1O 0.5345072706 ; m ! Deflected radius for tire R1o (saved)
SV_R_R2I 0.5453105393 ; m ! Deflected radius for tire R2i (saved)
SV_R_R2O 0.5453062002 ; m ! Deflected radius for tire R2o (saved)
SV_R_R3I 0.5452946774 ; m ! Deflected radius for tire R3i (saved)
SV_R_R3O 0.5452896652 ; m ! Deflected radius for tire R3o (saved)
SV_R_R4I 0.5107797723 ; m ! Deflected radius for tire R4i (saved)
SV_R_R4O 0.5107377553 ; m ! Deflected radius for tire R4o (saved)
SV_R_R5I 0.5108010227 ; m ! Deflected radius for tire R5i (saved)
SV_R_R5O 0.5107674439 ; m ! Deflected radius for tire R5o (saved)
SV_R_R6I 0.5338496497 ; m ! Deflected radius for tire R6i (saved)
SV_R_R6O 0.5338496497 ; m ! Deflected radius for tire R6o (saved)
SV_R_R7I 0.5455000879 ; m ! Deflected radius for tire R7i (saved)
SV_R_R7O  0.545460872 ; m ! Deflected radius for tire R7o (saved)
SV_R_R8I 0.5456043077 ; m ! Deflected radius for tire R8i (saved)
SV_R_R8O 0.5456126111 ; m ! Deflected radius for tire R8o (saved)
SV_R_R9I 0.5107301908 ; m ! Deflected radius for tire R9i (saved)
SV_R_R9O 0.5107135098 ; m ! Deflected radius for tire R9o (saved)
SV_SHIFT_DELAY      0 ; - ! Boolean: shifting delay in T.C. is active, prev. time
                      ! step, veh #1
SV_SHIFT_DELAY_2    0 ; - ! Boolean: shifting delay in T.C. is active, prev. time
                      ! step, veh #2
SV_SHIFT_DELAY_3    0 ; - ! Boolean: shifting delay in T.C. is active, prev. time
                      ! step, veh #3
SV_SLIP_LAT_L10I 0.001012016399 ; - ! ODE: Lagged tan of lateral slip, tire L10i
SV_SLIP_LAT_L10O 0.001059425041 ; - ! ODE: Lagged tan of lateral slip, tire L10o
SV_SLIP_LAT_L11I -0.000610079255 ; - ! ODE: Lagged tan of lateral slip, tire L11i
SV_SLIP_LAT_L11O    0 ; - ! ODE: Lagged tan of lateral slip, tire L11o
SV_SLIP_LAT_L12I -0.003446020155 ; - ! ODE: Lagged tan of lateral slip, tire L12i
SV_SLIP_LAT_L12O -0.003382440174 ; - ! ODE: Lagged tan of lateral slip, tire L12o
SV_SLIP_LAT_L13I 0.001167199353 ; - ! ODE: Lagged tan of lateral slip, tire L13i
SV_SLIP_LAT_L13O 0.001169893732 ; - ! ODE: Lagged tan of lateral slip, tire L13o
SV_SLIP_LAT_L14I -0.0006057732745 ; - ! ODE: Lagged tan of lateral slip, tire L14i
SV_SLIP_LAT_L14O -0.0005935493576 ; - ! ODE: Lagged tan of lateral slip, tire L14o
SV_SLIP_LAT_L15I 0.0008954782132 ; - ! ODE: Lagged tan of lateral slip, tire L15i
SV_SLIP_LAT_L15O 0.0009062805341 ; - ! ODE: Lagged tan of lateral slip, tire L15o
SV_SLIP_LAT_L1I -0.002692545141 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I 0.01493176283 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O 0.02228423087 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_L3I 0.01623225794 ; - ! ODE: Lagged tan of lateral slip, tire L3i
SV_SLIP_LAT_L3O 0.02188251616 ; - ! ODE: Lagged tan of lateral slip, tire L3o
SV_SLIP_LAT_L4I -0.001648501893 ; - ! ODE: Lagged tan of lateral slip, tire L4i
SV_SLIP_LAT_L4O -0.002508617947 ; - ! ODE: Lagged tan of lateral slip, tire L4o
SV_SLIP_LAT_L5I -0.0006141640301 ; - ! ODE: Lagged tan of lateral slip, tire L5i
SV_SLIP_LAT_L5O -0.001056607268 ; - ! ODE: Lagged tan of lateral slip, tire L5o
SV_SLIP_LAT_L6I -0.000442551071 ; - ! ODE: Lagged tan of lateral slip, tire L6i
SV_SLIP_LAT_L6O     0 ; - ! ODE: Lagged tan of lateral slip, tire L6o
SV_SLIP_LAT_L7I -0.003944554412 ; - ! ODE: Lagged tan of lateral slip, tire L7i
SV_SLIP_LAT_L7O -0.004009915278 ; - ! ODE: Lagged tan of lateral slip, tire L7o
SV_SLIP_LAT_L8I 0.0002411633831 ; - ! ODE: Lagged tan of lateral slip, tire L8i
SV_SLIP_LAT_L8O 0.0001351825216 ; - ! ODE: Lagged tan of lateral slip, tire L8o
SV_SLIP_LAT_L9I -0.0006614862513 ; - ! ODE: Lagged tan of lateral slip, tire L9i
SV_SLIP_LAT_L9O -0.0006294093897 ; - ! ODE: Lagged tan of lateral slip, tire L9o
SV_SLIP_LAT_R10I 0.0007609872567 ; - ! ODE: Lagged tan of lateral slip, tire R10i
SV_SLIP_LAT_R10O 0.0007102504332 ; - ! ODE: Lagged tan of lateral slip, tire R10o
SV_SLIP_LAT_R11I 0.003075393304 ; - ! ODE: Lagged tan of lateral slip, tire R11i
SV_SLIP_LAT_R11O    0 ; - ! ODE: Lagged tan of lateral slip, tire R11o
SV_SLIP_LAT_R12I -0.003583163896 ; - ! ODE: Lagged tan of lateral slip, tire R12i
SV_SLIP_LAT_R12O -0.00357690027 ; - ! ODE: Lagged tan of lateral slip, tire R12o
SV_SLIP_LAT_R13I 0.001143541715 ; - ! ODE: Lagged tan of lateral slip, tire R13i
SV_SLIP_LAT_R13O 0.001138002742 ; - ! ODE: Lagged tan of lateral slip, tire R13o
SV_SLIP_LAT_R14I -0.0006497842797 ; - ! ODE: Lagged tan of lateral slip, tire R14i
SV_SLIP_LAT_R14O -0.000654966356 ; - ! ODE: Lagged tan of lateral slip, tire R14o
SV_SLIP_LAT_R15I 0.00082320697 ; - ! ODE: Lagged tan of lateral slip, tire R15i
SV_SLIP_LAT_R15O 0.0008053586755 ; - ! ODE: Lagged tan of lateral slip, tire R15o
SV_SLIP_LAT_R1I 0.003509535323 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I -0.01387859242 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O -0.02026753424 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LAT_R3I -0.01229608831 ; - ! ODE: Lagged tan of lateral slip, tire R3i
SV_SLIP_LAT_R3O -0.0232568373 ; - ! ODE: Lagged tan of lateral slip, tire R3o
SV_SLIP_LAT_R4I 2.359991677e-05 ; - ! ODE: Lagged tan of lateral slip, tire R4i
SV_SLIP_LAT_R4O -0.0003626776479 ; - ! ODE: Lagged tan of lateral slip, tire R4o
SV_SLIP_LAT_R5I -0.0003470497662 ; - ! ODE: Lagged tan of lateral slip, tire R5i
SV_SLIP_LAT_R5O -0.0009528986237 ; - ! ODE: Lagged tan of lateral slip, tire R5o
SV_SLIP_LAT_R6I 0.003164892929 ; - ! ODE: Lagged tan of lateral slip, tire R6i
SV_SLIP_LAT_R6O     0 ; - ! ODE: Lagged tan of lateral slip, tire R6o
SV_SLIP_LAT_R7I -0.003321668736 ; - ! ODE: Lagged tan of lateral slip, tire R7i
SV_SLIP_LAT_R7O -0.003161660178 ; - ! ODE: Lagged tan of lateral slip, tire R7o
SV_SLIP_LAT_R8I 0.0008290158981 ; - ! ODE: Lagged tan of lateral slip, tire R8i
SV_SLIP_LAT_R8O 0.0009456721717 ; - ! ODE: Lagged tan of lateral slip, tire R8o
SV_SLIP_LAT_R9I -0.0007873457335 ; - ! ODE: Lagged tan of lateral slip, tire R9i
SV_SLIP_LAT_R9O -0.0008049257138 ; - ! ODE: Lagged tan of lateral slip, tire R9o
SV_SLIP_LONG_L10I 0.01003633885 ; - ! ODE: Lagged long. slip, tire L10i {KappL_L10i}
SV_SLIP_LONG_L10O 0.009900424048 ; - ! ODE: Lagged long. slip, tire L10o
                                 ! {KappL_L10o}
SV_SLIP_LONG_L11I -0.01407664551 ; - ! ODE: Lagged long. slip, tire L11i
                                 ! {KappL_L11i}
SV_SLIP_LONG_L11O   0 ; - ! ODE: Lagged long. slip, tire L11o {KappL_L11o}
SV_SLIP_LONG_L12I -0.007495693481 ; - ! ODE: Lagged long. slip, tire L12i
                                  ! {KappL_L12i}
SV_SLIP_LONG_L12O -0.00812481677 ; - ! ODE: Lagged long. slip, tire L12o
                                 ! {KappL_L12o}
SV_SLIP_LONG_L13I -0.007536885869 ; - ! ODE: Lagged long. slip, tire L13i
                                  ! {KappL_L13i}
SV_SLIP_LONG_L13O -0.008170697974 ; - ! ODE: Lagged long. slip, tire L13o
                                  ! {KappL_L13o}
SV_SLIP_LONG_L14I 0.01074744074 ; - ! ODE: Lagged long. slip, tire L14i {KappL_L14i}
SV_SLIP_LONG_L14O 0.01060589721 ; - ! ODE: Lagged long. slip, tire L14o {KappL_L14o}
SV_SLIP_LONG_L15I 0.01077982054 ; - ! ODE: Lagged long. slip, tire L15i {KappL_L15i}
SV_SLIP_LONG_L15O 0.01064472133 ; - ! ODE: Lagged long. slip, tire L15o {KappL_L15o}
SV_SLIP_LONG_L1I -0.0003709857308 ; - ! ODE: Lagged long. slip, tire L1i {KappL_L1i}
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o {KappL_L1o}
SV_SLIP_LONG_L2I 9.158526647e-05 ; - ! ODE: Lagged long. slip, tire L2i {KappL_L2i}
SV_SLIP_LONG_L2O 0.0009304990915 ; - ! ODE: Lagged long. slip, tire L2o {KappL_L2o}
SV_SLIP_LONG_L3I 7.613771981e-05 ; - ! ODE: Lagged long. slip, tire L3i {KappL_L3i}
SV_SLIP_LONG_L3O 0.0008304435814 ; - ! ODE: Lagged long. slip, tire L3o {KappL_L3o}
SV_SLIP_LONG_L4I 0.002468540679 ; - ! ODE: Lagged long. slip, tire L4i {KappL_L4i}
SV_SLIP_LONG_L4O 0.002798623135 ; - ! ODE: Lagged long. slip, tire L4o {KappL_L4o}
SV_SLIP_LONG_L5I 0.002001122343 ; - ! ODE: Lagged long. slip, tire L5i {KappL_L5i}
SV_SLIP_LONG_L5O 0.002334183628 ; - ! ODE: Lagged long. slip, tire L5o {KappL_L5o}
SV_SLIP_LONG_L6I -0.01373706285 ; - ! ODE: Lagged long. slip, tire L6i {KappL_L6i}
SV_SLIP_LONG_L6O    0 ; - ! ODE: Lagged long. slip, tire L6o {KappL_L6o}
SV_SLIP_LONG_L7I -0.007811926352 ; - ! ODE: Lagged long. slip, tire L7i {KappL_L7i}
SV_SLIP_LONG_L7O -0.008655346399 ; - ! ODE: Lagged long. slip, tire L7o {KappL_L7o}
SV_SLIP_LONG_L8I -0.007839933335 ; - ! ODE: Lagged long. slip, tire L8i {KappL_L8i}
SV_SLIP_LONG_L8O -0.008686979995 ; - ! ODE: Lagged long. slip, tire L8o {KappL_L8o}
SV_SLIP_LONG_L9I 0.01030029957 ; - ! ODE: Lagged long. slip, tire L9i {KappL_L9i}
SV_SLIP_LONG_L9O 0.01015380556 ; - ! ODE: Lagged long. slip, tire L9o {KappL_L9o}
SV_SLIP_LONG_R10I 0.01024650085 ; - ! ODE: Lagged long. slip, tire R10i {KappL_R10i}
SV_SLIP_LONG_R10O 0.01036020727 ; - ! ODE: Lagged long. slip, tire R10o {KappL_R10o}
SV_SLIP_LONG_R11I -0.01033314049 ; - ! ODE: Lagged long. slip, tire R11i
                                 ! {KappL_R11i}
SV_SLIP_LONG_R11O   0 ; - ! ODE: Lagged long. slip, tire R11o {KappL_R11o}
SV_SLIP_LONG_R12I -0.00445459955 ; - ! ODE: Lagged long. slip, tire R12i
                                 ! {KappL_R12i}
SV_SLIP_LONG_R12O -0.003813935202 ; - ! ODE: Lagged long. slip, tire R12o
                                  ! {KappL_R12o}
SV_SLIP_LONG_R13I -0.004394745506 ; - ! ODE: Lagged long. slip, tire R13i
                                  ! {KappL_R13i}
SV_SLIP_LONG_R13O -0.003742165039 ; - ! ODE: Lagged long. slip, tire R13o
                                  ! {KappL_R13o}
SV_SLIP_LONG_R14I 0.01110200335 ; - ! ODE: Lagged long. slip, tire R14i {KappL_R14i}
SV_SLIP_LONG_R14O 0.01123088137 ; - ! ODE: Lagged long. slip, tire R14o {KappL_R14o}
SV_SLIP_LONG_R15I 0.0110777935 ; - ! ODE: Lagged long. slip, tire R15i {KappL_R15i}
SV_SLIP_LONG_R15O 0.01120192159 ; - ! ODE: Lagged long. slip, tire R15o {KappL_R15o}
SV_SLIP_LONG_R1I -0.001694210555 ; - ! ODE: Lagged long. slip, tire R1i {KappL_R1i}
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o {KappL_R1o}
SV_SLIP_LONG_R2I -0.002821860823 ; - ! ODE: Lagged long. slip, tire R2i {KappL_R2i}
SV_SLIP_LONG_R2O -0.003040322853 ; - ! ODE: Lagged long. slip, tire R2o {KappL_R2o}
SV_SLIP_LONG_R3I -0.002897651486 ; - ! ODE: Lagged long. slip, tire R3i {KappL_R3i}
SV_SLIP_LONG_R3O -0.003292198728 ; - ! ODE: Lagged long. slip, tire R3o {KappL_R3o}
SV_SLIP_LONG_R4I 0.0009248730708 ; - ! ODE: Lagged long. slip, tire R4i {KappL_R4i}
SV_SLIP_LONG_R4O 0.0003469014042 ; - ! ODE: Lagged long. slip, tire R4o {KappL_R4o}
SV_SLIP_LONG_R5I 0.0004745670078 ; - ! ODE: Lagged long. slip, tire R5i {KappL_R5i}
SV_SLIP_LONG_R5O -1.651703055e-05 ; - ! ODE: Lagged long. slip, tire R5o {KappL_R5o}
SV_SLIP_LONG_R6I -0.008945974504 ; - ! ODE: Lagged long. slip, tire R6i {KappL_R6i}
SV_SLIP_LONG_R6O    0 ; - ! ODE: Lagged long. slip, tire R6o {KappL_R6o}
SV_SLIP_LONG_R7I -0.003738336112 ; - ! ODE: Lagged long. slip, tire R7i {KappL_R7i}
SV_SLIP_LONG_R7O -0.002895606769 ; - ! ODE: Lagged long. slip, tire R7o {KappL_R7o}
SV_SLIP_LONG_R8I -0.003668486276 ; - ! ODE: Lagged long. slip, tire R8i {KappL_R8i}
SV_SLIP_LONG_R8O -0.002812641346 ; - ! ODE: Lagged long. slip, tire R8o {KappL_R8o}
SV_SLIP_LONG_R9I 0.01058311954 ; - ! ODE: Lagged long. slip, tire R9i {KappL_R9i}
SV_SLIP_LONG_R9O 0.01070866128 ; - ! ODE: Lagged long. slip, tire R9o {KappL_R9o}
SV_SO_DIST 157.1822319 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SO_DIST_2 157.7453659 ; m ! ODE: Distance used for tire "wandering profiles"
                         ! {Sta_Prof_2}
SV_SO_DIST_3 158.0154934 ; m ! ODE: Distance used for tire "wandering profiles"
                         ! {Sta_Prof_3}
SV_SPEED_DVDS      -0 ; - ! dVdS derivative for speed control, veh #1
SV_SPEED_DVDS_2     0 ; - ! dVdS derivative for speed control, veh #2
SV_SPEED_DVDS_3     0 ; - ! dVdS derivative for speed control, veh #3
SV_SPEED_PREVIEW_SSTART 144 ; m ! Start station in path preview array, veh #1
SV_SPEED_PREVIEW_SSTART_2 0 ; m ! Start station in path preview array, veh #2
SV_SPEED_PREVIEW_SSTART_3 0 ; m ! Start station in path preview array, veh #3
SV_SPEED_PREVIEW_V_TARGET 100 ; km/h ! Initial target speed in preview array, veh #1
SV_SPEED_PREVIEW_V_TARGET_2 0 ; km/h ! Initial target speed in preview array, veh #2
SV_SPEED_PREVIEW_V_TARGET_3 0 ; km/h ! Initial target speed in preview array, veh #3
SV_STATION 142.8019608 ; m ! Station of vehicle #1 on path PATH_ID_DM(1) {Station}
SV_STATION_2 169.2538378 ; m ! Station of vehicle #2 on path PATH_ID_DM(2)
                         ! {Station_2}
SV_STATION_3 195.9847638 ; m ! Station of vehicle #3 on path PATH_ID_DM(3)
                         ! {Station_3}
SV_STA_ROAD 142.8019608 ; m ! Station of vehicle #1 on road CURRENT_ROAD_ID(1)
                        ! {Sta_Road}
SV_STA_ROAD_2 169.2538378 ; m ! Station of vehicle #2 on road CURRENT_ROAD_ID(2)
                          ! {Sta_Road_2}
SV_STA_ROAD_3 195.9847638 ; m ! Station of vehicle #3 on road CURRENT_ROAD_ID(3)
                          ! {Sta_Road_3}
SV_STR_DM -1.130623828 ; deg ! Road-wheel steer from DM, dm. #1
SV_STR_DM_2 -0.9484138814 ; deg ! Road-wheel steer from DM, dm. #2
SV_STR_DM_3 -0.9376974013 ; deg ! Road-wheel steer from DM, dm. #3
SV_STR_DM_OLD -1.130515932 ; deg ! Road-wheel steer from DM (prev. time step), dm.
                           ! #1
SV_STR_DM_OLD_2 -0.9484231329 ; deg ! Road-wheel steer from DM (prev. time step),
                              ! dm. #2
SV_STR_DM_OLD_3 -0.9377201676 ; deg ! Road-wheel steer from DM (prev. time step),
                              ! dm. #3
SV_STR_IN_DGR_A1 -0.09517094843 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A10   0 ; - ! ODE: Steering gear input rate, axle 10
SV_STR_IN_DGR_A11 0.0201481014 ; - ! ODE: Steering gear input rate, axle 11
SV_STR_IN_DGR_A12   0 ; - ! ODE: Steering gear input rate, axle 12
SV_STR_IN_DGR_A13   0 ; - ! ODE: Steering gear input rate, axle 13
SV_STR_IN_DGR_A14   0 ; - ! ODE: Steering gear input rate, axle 14
SV_STR_IN_DGR_A15   0 ; - ! ODE: Steering gear input rate, axle 15
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_DGR_A3    0 ; - ! ODE: Steering gear input rate, axle 3
SV_STR_IN_DGR_A4    0 ; - ! ODE: Steering gear input rate, axle 4
SV_STR_IN_DGR_A5    0 ; - ! ODE: Steering gear input rate, axle 5
SV_STR_IN_DGR_A6 0.008435762793 ; - ! ODE: Steering gear input rate, axle 6
SV_STR_IN_DGR_A7    0 ; - ! ODE: Steering gear input rate, axle 7
SV_STR_IN_DGR_A8    0 ; - ! ODE: Steering gear input rate, axle 8
SV_STR_IN_DGR_A9    0 ; - ! ODE: Steering gear input rate, axle 9
SV_STR_IN_GR_A1 -0.4932954548 ; - ! ODE: Steering gear input position, axle 1
                              ! {A_StrIn1}
SV_STR_IN_GR_A10    0 ; - ! ODE: Steering gear input position, axle 10 {A_StrIn10}
SV_STR_IN_GR_A11 -0.4091699051 ; - ! ODE: Steering gear input position, axle 11
                               ! {A_StrIn11}
SV_STR_IN_GR_A12    0 ; - ! ODE: Steering gear input position, axle 12 {A_StrIn12}
SV_STR_IN_GR_A13    0 ; - ! ODE: Steering gear input position, axle 13 {A_StrIn13}
SV_STR_IN_GR_A14    0 ; - ! ODE: Steering gear input position, axle 14 {A_StrIn14}
SV_STR_IN_GR_A15    0 ; - ! ODE: Steering gear input position, axle 15 {A_StrIn15}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_IN_GR_A3     0 ; - ! ODE: Steering gear input position, axle 3 {A_StrIn3}
SV_STR_IN_GR_A4     0 ; - ! ODE: Steering gear input position, axle 4 {A_StrIn4}
SV_STR_IN_GR_A5     0 ; - ! ODE: Steering gear input position, axle 5 {A_StrIn5}
SV_STR_IN_GR_A6 -0.413840095 ; - ! ODE: Steering gear input position, axle 6
                             ! {A_StrIn6}
SV_STR_IN_GR_A7     0 ; - ! ODE: Steering gear input position, axle 7 {A_StrIn7}
SV_STR_IN_GR_A8     0 ; - ! ODE: Steering gear input position, axle 8 {A_StrIn8}
SV_STR_IN_GR_A9     0 ; - ! ODE: Steering gear input position, axle 9 {A_StrIn9}
SV_STR_KP_L1 -1.127440781 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L10_OLD   0 ; deg ! Kingpin steer angle, wheel L10 (previous time step)
SV_STR_KP_L11 -0.8024671301 ; deg ! Kingpin steer angle, wheel L11
SV_STR_KP_L11_OLD -0.8024856776 ; deg ! Kingpin steer angle, wheel L11 (previous
                                ! time step)
SV_STR_KP_L12_OLD   0 ; deg ! Kingpin steer angle, wheel L12 (previous time step)
SV_STR_KP_L13_OLD   0 ; deg ! Kingpin steer angle, wheel L13 (previous time step)
SV_STR_KP_L14_OLD   0 ; deg ! Kingpin steer angle, wheel L14 (previous time step)
SV_STR_KP_L15_OLD   0 ; deg ! Kingpin steer angle, wheel L15 (previous time step)
SV_STR_KP_L1_OLD -1.127331113 ; deg ! Kingpin steer angle, wheel L1 (previous time
                              ! step)
SV_STR_KP_L2_OLD    0 ; deg ! Kingpin steer angle, wheel L2 (previous time step)
SV_STR_KP_L3_OLD    0 ; deg ! Kingpin steer angle, wheel L3 (previous time step)
SV_STR_KP_L4_OLD    0 ; deg ! Kingpin steer angle, wheel L4 (previous time step)
SV_STR_KP_L5_OLD    0 ; deg ! Kingpin steer angle, wheel L5 (previous time step)
SV_STR_KP_L6 -0.8221856011 ; deg ! Kingpin steer angle, wheel L6
SV_STR_KP_L6_OLD -0.8221906316 ; deg ! Kingpin steer angle, wheel L6 (previous time
                               ! step)
SV_STR_KP_L7_OLD    0 ; deg ! Kingpin steer angle, wheel L7 (previous time step)
SV_STR_KP_L8_OLD    0 ; deg ! Kingpin steer angle, wheel L8 (previous time step)
SV_STR_KP_L9_OLD    0 ; deg ! Kingpin steer angle, wheel L9 (previous time step)
SV_STR_KP_R1 -1.011144718 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R10_OLD   0 ; deg ! Kingpin steer angle, wheel R10 (previous time step)
SV_STR_KP_R11 -0.7406969338 ; deg ! Kingpin steer angle, wheel R11
SV_STR_KP_R11_OLD -0.7407169566 ; deg ! Kingpin steer angle, wheel R11 (previous
                                ! time step)
SV_STR_KP_R12_OLD   0 ; deg ! Kingpin steer angle, wheel R12 (previous time step)
SV_STR_KP_R13_OLD   0 ; deg ! Kingpin steer angle, wheel R13 (previous time step)
SV_STR_KP_R14_OLD   0 ; deg ! Kingpin steer angle, wheel R14 (previous time step)
SV_STR_KP_R15_OLD   0 ; deg ! Kingpin steer angle, wheel R15 (previous time step)
SV_STR_KP_R1_OLD -1.011042216 ; deg ! Kingpin steer angle, wheel R1 (previous time
                              ! step)
SV_STR_KP_R2_OLD    0 ; deg ! Kingpin steer angle, wheel R2 (previous time step)
SV_STR_KP_R3_OLD    0 ; deg ! Kingpin steer angle, wheel R3 (previous time step)
SV_STR_KP_R4_OLD    0 ; deg ! Kingpin steer angle, wheel R4 (previous time step)
SV_STR_KP_R5_OLD    0 ; deg ! Kingpin steer angle, wheel R5 (previous time step)
SV_STR_KP_R6 -0.7521439159 ; deg ! Kingpin steer angle, wheel R6
SV_STR_KP_R6_OLD -0.7521506885 ; deg ! Kingpin steer angle, wheel R6 (previous time
                               ! step)
SV_STR_KP_R7_OLD    0 ; deg ! Kingpin steer angle, wheel R7 (previous time step)
SV_STR_KP_R8_OLD    0 ; deg ! Kingpin steer angle, wheel R8 (previous time step)
SV_STR_KP_R9_OLD    0 ; deg ! Kingpin steer angle, wheel R9 (previous time step)
SV_STR_OUT_GR_A1 -0.01972991477 ; - ! Steering gear output
SV_STR_OUT_GR_A10   0 ; - ! Steering gear output
SV_STR_OUT_GR_A11 -0.01636719917 ; - ! Steering gear output
SV_STR_OUT_GR_A12   0 ; - ! Steering gear output
SV_STR_OUT_GR_A13   0 ; - ! Steering gear output
SV_STR_OUT_GR_A14   0 ; - ! Steering gear output
SV_STR_OUT_GR_A15   0 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_STR_OUT_GR_A3    0 ; - ! Steering gear output
SV_STR_OUT_GR_A4    0 ; - ! Steering gear output
SV_STR_OUT_GR_A5    0 ; - ! Steering gear output
SV_STR_OUT_GR_A6 -0.01655377252 ; - ! Steering gear output
SV_STR_OUT_GR_A7    0 ; - ! Steering gear output
SV_STR_OUT_GR_A8    0 ; - ! Steering gear output
SV_STR_OUT_GR_A9    0 ; - ! Steering gear output
SV_SWA   -28.26374761 ; deg ! ODE: Steering wheel angle, vehicle #1
SV_SWA_2 -23.71129084 ; deg ! ODE: Steering wheel angle, vehicle #2
SV_SWA_3 -23.44370866 ; deg ! ODE: Steering wheel angle, vehicle #3
SV_SWA_DM -28.26102116 ; deg ! Steering wheel angle from DM, vehicle #1
SV_SWA_DM_2 -23.7115325 ; deg ! Steering wheel angle from DM, vehicle #2
SV_SWA_DM_3 -23.44428587 ; deg ! Steering wheel angle from DM, vehicle #3
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control, veh. #1
SV_SWA_OLD -28.26102116 ; deg ! Steering wheel angle (previous time step, veh. #1
SV_SWA_OLD_2 -23.7115325 ; deg ! Steering wheel angle (previous time step, veh. #2
SV_SWA_OLD_3 -23.44428587 ; deg ! Steering wheel angle (previous time step, veh. #3
SV_SWA_OL_2         0 ; deg ! Steering wheel angle from open loop control, veh. #2
SV_SWA_OL_3         0 ; deg ! Steering wheel angle from open loop control, veh. #3
SV_S_RDO_1          0 ; m ! Station of object 1 on road path {S_RdO_1}
SV_S_RDO_2          0 ; m ! Station of object 2 on road path {S_RdO_2}
SV_S_RDO_3          0 ; m ! Station of object 3 on road path {S_RdO_3}
SV_S_RDO_4          0 ; m ! Station of object 4 on road path {S_RdO_4}
SV_THROTTLE 4.617147306e-45 ; - ! ODE: Time delayed engine throttle, veh #1
SV_THROTTLE_2 3.596931719e-60 ; - ! ODE: Time delayed engine throttle, veh #2
SV_THROTTLE_3 3.538791172e-60 ; - ! ODE: Time delayed engine throttle, veh #3
SV_THR_REQ          0 ; - ! Requested Throttle, veh #1
SV_THR_REQ_2        0 ; - ! Requested Throttle, veh #2
SV_THR_REQ_3        0 ; - ! Requested Throttle, veh #3
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: auto throttle, gear shift, prev. time step, veh
                      ! #1
SV_TH_AUTO_SHIFT_2  0 ; - ! Boolean: auto throttle, gear shift, prev. time step, veh
                      ! #2
SV_TH_AUTO_SHIFT_3  0 ; - ! Boolean: auto throttle, gear shift, prev. time step, veh
                      ! #3
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L10         0 ; C ! ODE: Brake rotor L10 temperature {T_Rtr_L10}
SV_TROT_L11         0 ; C ! ODE: Brake rotor L11 temperature {T_Rtr_L11}
SV_TROT_L12         0 ; C ! ODE: Brake rotor L12 temperature {T_Rtr_L12}
SV_TROT_L13         0 ; C ! ODE: Brake rotor L13 temperature {T_Rtr_L13}
SV_TROT_L14         0 ; C ! ODE: Brake rotor L14 temperature {T_Rtr_L14}
SV_TROT_L15         0 ; C ! ODE: Brake rotor L15 temperature {T_Rtr_L15}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_L3          0 ; C ! ODE: Brake rotor L3 temperature {T_Rtr_L3}
SV_TROT_L4          0 ; C ! ODE: Brake rotor L4 temperature {T_Rtr_L4}
SV_TROT_L5          0 ; C ! ODE: Brake rotor L5 temperature {T_Rtr_L5}
SV_TROT_L6          0 ; C ! ODE: Brake rotor L6 temperature {T_Rtr_L6}
SV_TROT_L7          0 ; C ! ODE: Brake rotor L7 temperature {T_Rtr_L7}
SV_TROT_L8          0 ; C ! ODE: Brake rotor L8 temperature {T_Rtr_L8}
SV_TROT_L9          0 ; C ! ODE: Brake rotor L9 temperature {T_Rtr_L9}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R10         0 ; C ! ODE: Brake rotor R10 temperature {T_Rtr_R10}
SV_TROT_R11         0 ; C ! ODE: Brake rotor R11 temperature {T_Rtr_R11}
SV_TROT_R12         0 ; C ! ODE: Brake rotor R12 temperature {T_Rtr_R12}
SV_TROT_R13         0 ; C ! ODE: Brake rotor R13 temperature {T_Rtr_R13}
SV_TROT_R14         0 ; C ! ODE: Brake rotor R14 temperature {T_Rtr_R14}
SV_TROT_R15         0 ; C ! ODE: Brake rotor R15 temperature {T_Rtr_R15}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_TROT_R3          0 ; C ! ODE: Brake rotor R3 temperature {T_Rtr_R3}
SV_TROT_R4          0 ; C ! ODE: Brake rotor R4 temperature {T_Rtr_R4}
SV_TROT_R5          0 ; C ! ODE: Brake rotor R5 temperature {T_Rtr_R5}
SV_TROT_R6          0 ; C ! ODE: Brake rotor R6 temperature {T_Rtr_R6}
SV_TROT_R7          0 ; C ! ODE: Brake rotor R7 temperature {T_Rtr_R7}
SV_TROT_R8          0 ; C ! ODE: Brake rotor R8 temperature {T_Rtr_R8}
SV_TROT_R9          0 ; C ! ODE: Brake rotor R9 temperature {T_Rtr_R9}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time when ESC control status last changed, veh
                                ! #1
SV_T_ESC_STATE_CHANGE_2 -10000000 ; s ! Time when ESC control status last changed,
                                  ! veh #2
SV_T_ESC_STATE_CHANGE_3 -10000000 ; s ! Time when ESC control status last changed,
                                  ! veh #3
SV_T_SHIFT_START 7.7505 ; s ! Time when automatic gear shift started, veh #1
SV_T_SHIFT_START_2 7.312 ; s ! Time when automatic gear shift started, veh #2
SV_T_SHIFT_START_3 7.2 ; s ! Time when automatic gear shift started, veh #3
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L10          0 ; mm3 ! ODE: Brake caliper L10 volume
SV_VBK_L11          0 ; mm3 ! ODE: Brake caliper L11 volume
SV_VBK_L12          0 ; mm3 ! ODE: Brake caliper L12 volume
SV_VBK_L13          0 ; mm3 ! ODE: Brake caliper L13 volume
SV_VBK_L14          0 ; mm3 ! ODE: Brake caliper L14 volume
SV_VBK_L15          0 ; mm3 ! ODE: Brake caliper L15 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_L3           0 ; mm3 ! ODE: Brake caliper L3 volume
SV_VBK_L4           0 ; mm3 ! ODE: Brake caliper L4 volume
SV_VBK_L5           0 ; mm3 ! ODE: Brake caliper L5 volume
SV_VBK_L6           0 ; mm3 ! ODE: Brake caliper L6 volume
SV_VBK_L7           0 ; mm3 ! ODE: Brake caliper L7 volume
SV_VBK_L8           0 ; mm3 ! ODE: Brake caliper L8 volume
SV_VBK_L9           0 ; mm3 ! ODE: Brake caliper L9 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R10          0 ; mm3 ! ODE: Brake caliper R10 volume
SV_VBK_R11          0 ; mm3 ! ODE: Brake caliper R11 volume
SV_VBK_R12          0 ; mm3 ! ODE: Brake caliper R12 volume
SV_VBK_R13          0 ; mm3 ! ODE: Brake caliper R13 volume
SV_VBK_R14          0 ; mm3 ! ODE: Brake caliper R14 volume
SV_VBK_R15          0 ; mm3 ! ODE: Brake caliper R15 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VBK_R3           0 ; mm3 ! ODE: Brake caliper R3 volume
SV_VBK_R4           0 ; mm3 ! ODE: Brake caliper R4 volume
SV_VBK_R5           0 ; mm3 ! ODE: Brake caliper R5 volume
SV_VBK_R6           0 ; mm3 ! ODE: Brake caliper R6 volume
SV_VBK_R7           0 ; mm3 ! ODE: Brake caliper R7 volume
SV_VBK_R8           0 ; mm3 ! ODE: Brake caliper R8 volume
SV_VBK_R9           0 ; mm3 ! ODE: Brake caliper R9 volume
SV_VERR_OLD 100.0006589 ; km/h ! Speed controller error at previous time step, veh
                        ! #1
SV_VERR_OLD_2 -0.4419583415 ; km/h ! Speed controller error at previous time step,
                            ! veh #2
SV_VERR_OLD_3 -0.02125122079 ; km/h ! Speed controller error at previous time step,
                             ! veh #3
SV_VXS -0.0001861278805 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 1
SV_VXS_2 -5.556621352e-05 ; km/h ! ODE: Body X speed of laden sprung-mass CG_2
SV_VXS_3 -0.000114034976 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 3
SV_VXS_4 -8.826798463e-05 ; km/h ! ODE: Body X speed of laden sprung-mass CG_4
SV_VXS_5 -0.0001202287006 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 5
SV_VXS_6 -0.0001209826165 ; km/h ! ODE: Body X speed of laden sprung-mass CG_6
SV_VYS 0.005115681236 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 1
SV_VYS_2 0.0004925699997 ; m/s ! ODE: Body Y speed of laden sprung-mass CG_2
SV_VYS_3 -0.0002548788488 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 3
SV_VYS_4 0.0005786525474 ; m/s ! ODE: Body Y speed of laden sprung-mass CG_4
SV_VYS_5 -0.00120670459 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 5
SV_VYS_6 0.0002346872284 ; m/s ! ODE: Body Y speed of laden sprung-mass CG_6
SV_VZS 0.0001747680663 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 1
SV_VZS_2 -1.937716105e-06 ; m/s ! ODE: Body Z speed of laden sprung-mass CG_2
SV_VZS_3 6.799043851e-05 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 3
SV_VZS_4 2.034837046e-06 ; m/s ! ODE: Body Z speed of laden sprung-mass CG_4
SV_VZS_5 7.763482135e-05 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 5
SV_VZS_6 4.462657062e-06 ; m/s ! ODE: Body Z speed of laden sprung-mass CG_6
SV_XO     142.8018874 ; m ! ODE: Global X coord. of sprung-mass origin, unit 1 {Xo}
SV_XO_3    169.253252 ; m ! ODE: Global X coord. of sprung-mass origin, unit 3
                      ! {Xo_3}
SV_XO_5   195.9838729 ; m ! ODE: Global X coord. of sprung-mass origin, unit 5
                      ! {Xo_5}
SV_X_GND  145.3017586 ; m ! X coord, ground, unit 1 aero ref. pt (saved)
SV_X_GND_2 146.9403208 ; m ! X coord, ground, unit 2 aero ref. pt (saved)
SV_X_GND_3 171.753165 ; m ! X coord, ground, unit 3 aero ref. pt (saved)
SV_X_GND_4 173.3879488 ; m ! X coord, ground, unit 4 aero ref. pt (saved)
SV_X_GND_5 198.4837815 ; m ! X coord, ground, unit 5 aero ref. pt (saved)
SV_X_GND_6 200.118248 ; m ! X coord, ground, unit 6 aero ref. pt (saved)
SV_X_H1 0.004255026662 ; mm ! ODE: X translation for hitch 1
SV_X_H3 0.03222087579 ; mm ! ODE: X translation for hitch 3
SV_X_H5 0.03423900213 ; mm ! ODE: X translation for hitch 5
SV_YAW    179.4624085 ; deg ! ODE: Yaw of sprung mass, unit 1 {Yaw}
SV_YAW_3  179.5235902 ; deg ! ODE: Yaw of sprung mass, unit 3 {Yaw_3}
SV_YAW_5  179.5105302 ; deg ! ODE: Yaw of sprung mass, unit 5 {Yaw_5}
SV_YAW_REL_2 0.7529809009 ; deg ! ODE: Relative yaw (3-2-1) for unit 2
SV_YAW_REL_4 0.6515199681 ; deg ! ODE: Relative yaw (3-2-1) for unit 4
SV_YAW_REL_6 0.6690182946 ; deg ! ODE: Relative yaw (3-2-1) for unit 6
SV_YO  -0.04853799537 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 1 {Yo}
SV_YO_3 -0.05180416438 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 3
                       ! {Yo_3}
SV_YO_5 -0.05188180155 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 5
                       ! {Yo_5}
SV_Y_GND -0.0719929393 ; m ! Y coord, ground, unit 1 aero ref. pt (saved)
SV_Y_GND_2 -0.08750176452 ; m ! Y coord, ground, unit 2 aero ref. pt (saved)
SV_Y_GND_3 -0.07259136821 ; m ! Y coord, ground, unit 3 aero ref. pt (saved)
SV_Y_GND_4 -0.08618346506 ; m ! Y coord, ground, unit 4 aero ref. pt (saved)
SV_Y_GND_5 -0.07323911582 ; m ! Y coord, ground, unit 5 aero ref. pt (saved)
SV_Y_GND_6 -0.0871916242 ; m ! Y coord, ground, unit 6 aero ref. pt (saved)
SV_Y_H1 -0.0001007076483 ; mm ! ODE: Y translation for hitch 1
SV_Y_H3 0.0002361817173 ; mm ! ODE: Y translation for hitch 3
SV_Y_H5 0.0004921305081 ; mm ! ODE: Y translation for hitch 5
SV_ZO   0.02345885181 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 1 {Zo}
SV_ZO_3 0.01266521555 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 3
                      ! {Zo_3}
SV_ZO_5  0.0117443493 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 5
                      ! {Zo_5}
SV_Z_CTC_L10I      -0 ; m ! Center of tire contact L10i {Zgnd_L10i}
SV_Z_CTC_L10O      -0 ; m ! Center of tire contact L10o {Zgnd_L10o}
SV_Z_CTC_L11I      -0 ; m ! Center of tire contact L11i {Zgnd_L11i}
SV_Z_CTC_L11O      -0 ; m ! Center of tire contact L11o {Zgnd_L11o}
SV_Z_CTC_L12I -1.110223025e-16 ; m ! Center of tire contact L12i {Zgnd_L12i}
SV_Z_CTC_L12O      -0 ; m ! Center of tire contact L12o {Zgnd_L12o}
SV_Z_CTC_L13I      -0 ; m ! Center of tire contact L13i {Zgnd_L13i}
SV_Z_CTC_L13O      -0 ; m ! Center of tire contact L13o {Zgnd_L13o}
SV_Z_CTC_L14I      -0 ; m ! Center of tire contact L14i {Zgnd_L14i}
SV_Z_CTC_L14O      -0 ; m ! Center of tire contact L14o {Zgnd_L14o}
SV_Z_CTC_L15I 1.110223025e-16 ; m ! Center of tire contact L15i {Zgnd_L15i}
SV_Z_CTC_L15O      -0 ; m ! Center of tire contact L15o {Zgnd_L15o}
SV_Z_CTC_L1I       -0 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O       -0 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I       -0 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O       -0 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_L3I       -0 ; m ! Center of tire contact L3i {Zgnd_L3i}
SV_Z_CTC_L3O       -0 ; m ! Center of tire contact L3o {Zgnd_L3o}
SV_Z_CTC_L4I 1.110223025e-16 ; m ! Center of tire contact L4i {Zgnd_L4i}
SV_Z_CTC_L4O -1.110223025e-16 ; m ! Center of tire contact L4o {Zgnd_L4o}
SV_Z_CTC_L5I       -0 ; m ! Center of tire contact L5i {Zgnd_L5i}
SV_Z_CTC_L5O       -0 ; m ! Center of tire contact L5o {Zgnd_L5o}
SV_Z_CTC_L6I -1.110223025e-16 ; m ! Center of tire contact L6i {Zgnd_L6i}
SV_Z_CTC_L6O -1.110223025e-16 ; m ! Center of tire contact L6o {Zgnd_L6o}
SV_Z_CTC_L7I       -0 ; m ! Center of tire contact L7i {Zgnd_L7i}
SV_Z_CTC_L7O       -0 ; m ! Center of tire contact L7o {Zgnd_L7o}
SV_Z_CTC_L8I       -0 ; m ! Center of tire contact L8i {Zgnd_L8i}
SV_Z_CTC_L8O       -0 ; m ! Center of tire contact L8o {Zgnd_L8o}
SV_Z_CTC_L9I       -0 ; m ! Center of tire contact L9i {Zgnd_L9i}
SV_Z_CTC_L9O       -0 ; m ! Center of tire contact L9o {Zgnd_L9o}
SV_Z_CTC_R10I 1.110223025e-16 ; m ! Center of tire contact R10i {Zgnd_R10i}
SV_Z_CTC_R10O      -0 ; m ! Center of tire contact R10o {Zgnd_R10o}
SV_Z_CTC_R11I      -0 ; m ! Center of tire contact R11i {Zgnd_R11i}
SV_Z_CTC_R11O      -0 ; m ! Center of tire contact R11o {Zgnd_R11o}
SV_Z_CTC_R12I      -0 ; m ! Center of tire contact R12i {Zgnd_R12i}
SV_Z_CTC_R12O -1.110223025e-16 ; m ! Center of tire contact R12o {Zgnd_R12o}
SV_Z_CTC_R13I      -0 ; m ! Center of tire contact R13i {Zgnd_R13i}
SV_Z_CTC_R13O      -0 ; m ! Center of tire contact R13o {Zgnd_R13o}
SV_Z_CTC_R14I      -0 ; m ! Center of tire contact R14i {Zgnd_R14i}
SV_Z_CTC_R14O 1.110223025e-16 ; m ! Center of tire contact R14o {Zgnd_R14o}
SV_Z_CTC_R15I      -0 ; m ! Center of tire contact R15i {Zgnd_R15i}
SV_Z_CTC_R15O 1.110223025e-16 ; m ! Center of tire contact R15o {Zgnd_R15o}
SV_Z_CTC_R1I 1.110223025e-16 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O 1.110223025e-16 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I       -0 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O       -0 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_CTC_R3I       -0 ; m ! Center of tire contact R3i {Zgnd_R3i}
SV_Z_CTC_R3O       -0 ; m ! Center of tire contact R3o {Zgnd_R3o}
SV_Z_CTC_R4I       -0 ; m ! Center of tire contact R4i {Zgnd_R4i}
SV_Z_CTC_R4O -1.110223025e-16 ; m ! Center of tire contact R4o {Zgnd_R4o}
SV_Z_CTC_R5I       -0 ; m ! Center of tire contact R5i {Zgnd_R5i}
SV_Z_CTC_R5O       -0 ; m ! Center of tire contact R5o {Zgnd_R5o}
SV_Z_CTC_R6I       -0 ; m ! Center of tire contact R6i {Zgnd_R6i}
SV_Z_CTC_R6O       -0 ; m ! Center of tire contact R6o {Zgnd_R6o}
SV_Z_CTC_R7I -1.110223025e-16 ; m ! Center of tire contact R7i {Zgnd_R7i}
SV_Z_CTC_R7O       -0 ; m ! Center of tire contact R7o {Zgnd_R7o}
SV_Z_CTC_R8I       -0 ; m ! Center of tire contact R8i {Zgnd_R8i}
SV_Z_CTC_R8O       -0 ; m ! Center of tire contact R8o {Zgnd_R8o}
SV_Z_CTC_R9I -1.110223025e-16 ; m ! Center of tire contact R9i {Zgnd_R9i}
SV_Z_CTC_R9O       -0 ; m ! Center of tire contact R9o {Zgnd_R9o}
SV_Z_GND            0 ; m ! Z coord, ground, unit 1 aero ref. pt (saved)
SV_Z_GND_2          0 ; m ! Z coord, ground, unit 2 aero ref. pt (saved)
SV_Z_GND_3          0 ; m ! Z coord, ground, unit 3 aero ref. pt (saved)
SV_Z_GND_4          0 ; m ! Z coord, ground, unit 4 aero ref. pt (saved)
SV_Z_GND_5          0 ; m ! Z coord, ground, unit 5 aero ref. pt (saved)
SV_Z_GND_6          0 ; m ! Z coord, ground, unit 6 aero ref. pt (saved)
SV_Z_H1 0.0009140519138 ; mm ! ODE: Z translation for hitch 1
SV_Z_H3 0.006927701018 ; mm ! ODE: Z translation for hitch 3
SV_Z_H5 0.007373062139 ; mm ! ODE: Z translation for hitch 5

! ODE state variables associated with EQ_DIFFERENTIAL statements
INT_TARGET_DELTA_2 -3.498517211  ; - ! ODE: (null)
INT_TARGET_DELTA_3 0.7912501102  ; - ! ODE: (null)

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_PCON_BK_2 ADD 10 ; MPa ! #1. Brake master cylinder pressure, vehicle #2
IMPORT IMP_PCON_BK_3 ADD 10 ; MPa ! #2. Brake master cylinder pressure, vehicle #3


END
