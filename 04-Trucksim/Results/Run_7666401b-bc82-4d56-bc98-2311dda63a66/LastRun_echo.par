PARSFILE
! TruckSim 2022.1
! Revision 180841, June 1, 2022
MODEL_LAYOUT S_SS__SS

DATASET_TITLE Platoon: Intruder Test; Truck 3
CATEGORY Tractor Trailer Platoon, Parallel Solvers
TITLE Platoon: Intruder Test; Truck 3 <Tractor Trailer Platoon, Parallel Solvers>

! Echo: D:\product_dev\Product_Checkouts\trunk\Image\TruckSim\Core\TruckSim_Data\Results\Run_7666401b-bc82-4d56-bc98-2311dda63a66\LastRun_echo.par
! This run was made 09:57 on June 03, 2022.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             25 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           8 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   118 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       6 ! Number of output variables activated for export (read only)
! NOUT_WRITE      140 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_DEFAULT    1 ! [D] Identify values not read? 1 -> yes, show [D], 0 -> no
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      2 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_IO_UPDATE       0 ! Option for exchanging I/O variables with other tools: 1 ->
                      ! use T_DT (half step), 0 -> use TSTEP (full step) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SKIP_TSTART     0 ! [D] Skip calculations at T = TSTART when running under
                      ! external software? 0 -> no, 1 -> skip [L]
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP           0.001 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              60 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! VS CONNECT SERVER PARAMETERS
!------------------------------------------------------------------------------------
VSC_OPT_ENABLE_SERVER 0 ! 0 -> Disable VS Connect server. 1 -> Enable VS Connect
                        ! server.
! VSC_HOST_ADDR       localhost ! I.P. address or host name of interface to use for VS Connect server Node.
VSC_HOST_PORT       0 ! I.P. port for VS Connect server Node. 0 -> Use default.
VSC_MAX_CONNECTIONS 3 ! Maximum VS Connect connections permitted.
! VSC_VEHICLE_NAME    My Vehicle ! VS Connect unique Object Name for this vehicle instance.
VSC_SHUTDOWN_TIMEOUT_MS 1500 ! Approximate time (in milliseconds) allowed for
                             ! processing disconnection.

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    4 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    2 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    5 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 3 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 2 ! Number of axles on unit 2 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL(1) 935.289373 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1675.446994 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -3.674838212e-11 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        7103 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 3753.071647 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 61532.77278 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 60054.92583 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! H_CG_TL(2) 1561.509445 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 7312.492186 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(2) 1.039168751e-10 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        9598 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 22030.5935 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 215522.095 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 213852.3015 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU(1)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)       750 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4770 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT        1100 ; mm ! Height (Z) of front hitch point in SM coordinate system
                      ! [I]
H_CG_SU(2)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      8250 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          4000 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)      6728.8 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)    115648.5 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)    121528.6 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(2) 1769.067669 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 2
! LX_CG_SL(2) 6838.546366 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(2)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 2
! M_SL(2)        7980 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 2
! IXX_SL(2) 19449.78938 ; kg-m2 ! CALC -- Roll inertia for SL, unit 2
! IYY_SL(2) 198992.7745 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 2
! IZZ_SL(2) 199766.1851 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 2
! IXY_SL(2)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 2
! IXZ_SL(2) -8705.846015 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 2
! IYZ_SL(2)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 2

HT_SM(2)       1248.5 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)       10500 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(2)        2440 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)        860 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             1 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     1 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; 40-foot Dry Cargo Container (Empty)
OPT_PL_BODY_ID(1)   2 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(1)      5420 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)       2542 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)          3980 ; kg ! Mass of payload [I]
IXX_PL(1)     7977.38 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)    62623.01 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)    62259.93 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.

OPT_HITCH_TYPE(1)   1 ! Type of hitch: 1 -> generic (5th wheel or ball/pintle), 2 ->
                      ! simple ball or pintle, 3 -> hinged tow bar, 4 ->
                      ! Articulation system [I]
! FZH_L(1) 22799.59745 ; N ! CALC -- Static load, laden vehicle, hitch 1
! FZH_UL(1) 5690.905699 ; N ! CALC -- Static load, unladen vehicle, hitch 1
HITCH_DMP_X(1)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 1
HITCH_DMP_Y(1)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 1
HITCH_DMP_Z(1)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 1
HITCH_FRIC_X(1)     0 ; N-m ! [D] Roll friction, hitch 1
HITCH_FRIC_Y(1)     0 ; N-m ! [D] Pitch friction, hitch 1
HITCH_FRIC_Z(1)     0 ; N-m ! [D] Articulation friction, hitch 1
HITCH_FREQ(1)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 1 [I]
HITCH_ZETA(1)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 1 [I]
H_H(1)           1070 ; mm ! Hitch point height (Z coord.), sprung mass [I]
LX_H(1)          4135 ; mm ! X dist. hitch is behind sprung mass origin [I]
Y_H(1)              0 ; mm ! Y coordinate, hitch point [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)       10 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    5000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        0 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)       0 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)       0 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
OPT_SUSP_Y_AXLE_ROLL(1,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
IA_YY(1,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   15.4 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       578 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.4982698962 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
X_CG_AXLE(1,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 1 [I]
Y_CG_AXLE(1,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
OPT_SUSP_Y_AXLE_ROLL(1,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
IA_YY(1,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     3500 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    603 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      1035 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
X_CG_AXLE(1,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 2 [I]
Y_CG_AXLE(1,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Solid-axle suspension for axle 3 on unit 1
OPT_JNC_DESIGN(1,3) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
OPT_SUSP_Y_AXLE_ROLL(1,3) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,3,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(1,3,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(1,3,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(1,3,2)        0 ; deg ! Static toe for wheel R3 [I]
H_CG_AXLE(1,3)    530 ; mm ! Z coordinate of axle 3 CG [I]
H_WC(1,3,1)       530 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(1,3,2)       530 ; mm ! Reference Z coordinate of wheel center R3 [I]
IA(1,3)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 3 [I]
IA_YY(1,3)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 3 [I]
! ISPIN(1,3,1)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(1,3,2)   30.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(1,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(1,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(1,3,1)          20 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(1,3,2)          20 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(1,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(1,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(1,3,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(1,3,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(1,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(1,3)     4770 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_AXLE(1,3)    603 ; kg ! Unsteered mass for axle 3 [I]
M_US_STR(1,3,1)     0 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(1,3,2)     0 ; kg ! Steered mass for wheel R3 [I]
! M_US(1,3)      1035 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(1,3) 0.4173913043 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
X_CG_AXLE(1,3)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,3)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 3 [I]
Y_CG_AXLE(1,3)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(1,3)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
OPT_SUSP_Y_AXLE_ROLL(2,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(2,1)    530 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(2,1,1)       530 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,1,2)       530 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(2,1)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
IA_YY(2,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 4 [I]
! ISPIN(2,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(2,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(2,1,1)          20 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,1,2)          20 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,1)     8800 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(2,1)    445 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(2,1,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,1,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,1)       809 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,1) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
X_CG_AXLE(2,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(2,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 4 [I]
Y_CG_AXLE(2,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
OPT_SUSP_Y_AXLE_ROLL(2,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(2,2)    530 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(2,2,1)       530 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(2,2,2)       530 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(2,2)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
IA_YY(2,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 5 [I]
! ISPIN(2,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(2,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(2,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(2,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(2,2,1)          20 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(2,2,2)          20 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(2,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(2,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(2,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(2,2)    10500 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    445 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(2,2)       809 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(2,2) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
X_CG_AXLE(2,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(2,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 5 [I]
Y_CG_AXLE(2,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
! CMP_DESIGN(1,1,1) 71.52889875 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 71.52889875 ; mm ! CALC -- Compression at design load, spring R1
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 35764.44937 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 35764.44937 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 17882.22469 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 17882.22469 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 41432.69307 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 41432.69307 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 20716.34654 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,2,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R2
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2) 1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2) 1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)   1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Solid-axle suspension for axle 3 on unit 1
OPT_EXT_SP(1,3,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,3,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,3,1) 2.830062991 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(1,3,2) 2.830062991 ; mm ! CALC -- Compression at design load, spring R3
CMP_OFFSET(1,3,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(1,3,2)   0 ; mm ! Initial compression of external spring R3 [I]
DAUX(1,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
DMP_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L3 [I]
DMP_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R3 [I]
DMP_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L3 [I]
DMP_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R3 [I]
DMP_LEN(1,3,1)      0 ; mm ! [D] Length at design for damper L3 [I]
DMP_LEN(1,3,2)      0 ; mm ! [D] Length at design for damper R3 [I]
SPG_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L3 [I]
SPG_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R3 [I]
SPG_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L3 [I]
SPG_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R3 [I]
SPG_LEN(1,3,1)      0 ; mm ! [D] Length at design for spring L3 [I]
SPG_LEN(1,3,2)      0 ; mm ! [D] Length at design for spring R3 [I]
! FSA_DESIGN(1,3) 3962.088188 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(1,3) 15361.88691 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(1,3,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(1,3,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(1,3,1) 7680.943457 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(1,3,2) 7680.943457 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(1,3) 25511.76966 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(1,3) 14111.97094 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(1,3,1) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(1,3,2) 12755.88483 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(1,3) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_DAMPERS(1,3)   1000 ; mm ! Distance between dampers on axle 3 [I]
Y_DAMPERS(1,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 3 [I]
L_JNC_STOPS(1,3) 1000 ; mm ! Distance between jounce stops on axle 3 [I]
L_REB_STOPS(1,3) 1000 ; mm ! Distance between rebound stops on axle 3 [I]
L_SPRINGS(1,3)   1000 ; mm ! Distance between springs on axle 3 [I]
Y_SPRINGS(1,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 3 [I]
L_SPG_ADJ(1,3,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(1,3,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(1,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(1,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(1,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(1,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,1,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(2,1,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring R4
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R4 [I]
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(2,1,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(2,1,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(2,1,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(2,1,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(2,1) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,1) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,1,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,1,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,1) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,1) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,1,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,1,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(2,1)   1000 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(2,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(2,1) 1000 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(2,1) 1000 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(2,1)   1000 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(2,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,2,1) 11.97703368 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(2,2,2) 11.97703368 ; mm ! CALC -- Compression at design load, spring R5
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R5 [I]
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(2,2) 16767.84715 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(2,2) 27728.73477 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(2,2,1) 13864.36739 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(2,2,2) 13864.36739 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(2,2) 35662.31462 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(2,2) 24701.427 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(2,2,1) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(2,2,2) 17831.15731 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(2,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(2,2)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(2,2) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(2,2) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(2,2)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control).

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
OPT_I_GEAR_IN       0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes [I]
BETA_COL          0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL           0.1 ; N-m ! [D] Steering column friction torque
I_COL            0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN      0.0001 ; kg-m2 ! [D] Steering system inertia
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,3)  1 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE.

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)       310 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(1,3)       310 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(2,1)       310 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(2,2)       310 ; mm ! Dual-tire spacing for axle 5 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 8 -> SIEMENS
                          ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                          ! tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 35000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)   108 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 35000 ; N ! Reference vertical force
IT(1,1,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)   108 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 35000 ; N ! Reference vertical force
IT(1,2,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)   108 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(1,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(1,2,1,2) 35000 ; N ! Reference vertical force
IT(1,2,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(1,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(1,2,1,2)   108 ; kg ! Mass of tire L2o
MU_REF_X(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(1,2,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(1,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 35000 ; N ! Reference vertical force
IT(1,2,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)   108 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(1,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(1,2,2,2) 35000 ; N ! Reference vertical force
IT(1,2,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(1,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(1,2,2,2)   108 ; kg ! Mass of tire R2o
MU_REF_X(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(1,2,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(1,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(1,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(1,3,1,1) 35000 ; N ! Reference vertical force
IT(1,3,1,1)       5.4 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(1,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(1,3,1,1)   108 ; kg ! Mass of tire L3i
MU_REF_X(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(1,3,1,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(1,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,2) 1 ! Internal tire shear-model option, L3o [I]
OPT_TIRE_COMB(1,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L3o [I]
FZ_REF(1,3,1,2) 35000 ; N ! Reference vertical force
IT(1,3,1,2)       5.4 ; kg-m2 ! Spin inertia for tire L3o [I]
IT_XXZZ(1,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L3o [I]
M_TIRE(1,3,1,2)   108 ; kg ! Mass of tire L3o
MU_REF_X(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3o
MU_REF_Y(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3o
R0(1,3,1,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire L3o [I]
RR_C(1,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(1,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(1,3,2,1) 35000 ; N ! Reference vertical force
IT(1,3,2,1)       5.4 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(1,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(1,3,2,1)   108 ; kg ! Mass of tire R3i
MU_REF_X(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(1,3,2,1)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,1)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(1,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,2) 1 ! Internal tire shear-model option, R3o [I]
OPT_TIRE_COMB(1,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R3o [I]
FZ_REF(1,3,2,2) 35000 ; N ! Reference vertical force
IT(1,3,2,2)       5.4 ; kg-m2 ! Spin inertia for tire R3o [I]
IT_XXZZ(1,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R3o [I]
M_TIRE(1,3,2,2)   108 ; kg ! Mass of tire R3o
MU_REF_X(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3o
MU_REF_Y(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3o
R0(1,3,2,2)       550 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,2)      538 ; mm ! Effective rolling radius (Vx/AVy), tire R3o [I]
RR_C(1,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(2,1,1,1) 30000 ; N ! Reference vertical force
IT(2,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(2,1,1,1)    91 ; kg ! Mass of tire L4i
MU_REF_X(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(2,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(2,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(2,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(2,1,1,2) 30000 ; N ! Reference vertical force
IT(2,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(2,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(2,1,1,2)    91 ; kg ! Mass of tire L4o
MU_REF_X(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(2,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(2,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(2,1,2,1) 30000 ; N ! Reference vertical force
IT(2,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(2,1,2,1)    91 ; kg ! Mass of tire R4i
MU_REF_X(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(2,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(2,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(2,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(2,1,2,2) 30000 ; N ! Reference vertical force
IT(2,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(2,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(2,1,2,2)    91 ; kg ! Mass of tire R4o
MU_REF_X(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(2,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(2,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(2,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(2,2,1,1) 30000 ; N ! Reference vertical force
IT(2,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(2,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(2,2,1,1)    91 ; kg ! Mass of tire L5i
MU_REF_X(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(2,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(2,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,2) 1 ! Internal tire shear-model option, L5o [I]
OPT_TIRE_COMB(2,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L5o [I]
FZ_REF(2,2,1,2) 30000 ; N ! Reference vertical force
IT(2,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L5o [I]
IT_XXZZ(2,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L5o [I]
M_TIRE(2,2,1,2)    91 ; kg ! Mass of tire L5o
MU_REF_X(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5o
MU_REF_Y(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5o
R0(2,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5o [I]
RR_C(2,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(2,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(2,2,2,1) 30000 ; N ! Reference vertical force
IT(2,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(2,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(2,2,2,1)    91 ; kg ! Mass of tire R5i
MU_REF_X(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(2,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(2,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,2) 1 ! Internal tire shear-model option, R5o [I]
OPT_TIRE_COMB(2,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R5o [I]
FZ_REF(2,2,2,2) 30000 ; N ! Reference vertical force
IT(2,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R5o [I]
IT_XXZZ(2,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R5o [I]
M_TIRE(2,2,2,2)    91 ; kg ! Mass of tire R5o
MU_REF_X(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5o
MU_REF_Y(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5o
R0(2,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5o [I]
RR_C(2,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure).

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  1 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)      0.3 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  1 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)      0.3 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)      0.3 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)      0.3 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(1,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,1)  2 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(1,3,1)      0.3 ; s ! Time constant for brake actuator L3
TLAG_BK(1,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(1,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,2)  2 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(1,3,2)      0.3 ; s ! Time constant for brake actuator R3
TLAG_BK(1,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  2 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,1,1)      0.3 ; s ! Time constant for brake actuator L4
TLAG_BK(2,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  2 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,1,2)      0.3 ; s ! Time constant for brake actuator R4
TLAG_BK(2,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1)  2 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(2,2,1)      0.3 ; s ! Time constant for brake actuator L5
TLAG_BK(2,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2)  2 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(2,2,2)      0.3 ; s ! Time constant for brake actuator R5
TLAG_BK(2,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R5 [I]

!------------------------------------------------------------------------------------
! TANDEM SUSPENSIONS
!------------------------------------------------------------------------------------
TANDEM_NAME(1,1)    1 ! [D] Tandem in unit 1 that connects axles 2 & 3
CFZ_MY_TAND(1,1)    0 ; 1/m ! Coefficient: Load transfer to front axle of this
                      ! tandem per unit of total wheel-spin torque applied to the
                      ! four wheels of this tandem
R_TAND_TRAIL_STATIC(1,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(1,1)    0.45 ; - ! Ratio: fraction of dynamic suspension load shared by the
                      ! other axle of this tandem; 0 -> no sharing; 1/2 -> full
                      ! sharing [I]

TANDEM_NAME(2,1)    2 ! [D] Tandem in unit 2 that connects axles 4 & 5
CFZ_MY_TAND(2,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(2,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(2,1)     0.5 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle request can be specified
! with the function THROTTLE_ENGINE.

POWERTRAIN_UNIT     1 ! Vehicle unit with powertrain
INSTALL_POWERTRAIN  3 ! Powertrain type: 0 -> Simple, 1 -> front-axle drive, 2 ->
                      ! rear-axle drive, 3 -> 2-axle drive, 4 -> 3-axle drive, 5 ->
                      ! 4-axle drive, 6 -> 5-axle drive [L]
! R_DRIVE_SC(1)     0 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(2)   0.5 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(3)   0.5 ; - ! Drive torque ratio: [this axle]/[total] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! power-split hybrid electric, 2 -> electric, 3 ->
                      ! range-extended electric (series hybrid), 4 -> parallel
                      ! hybrid electric
OPT_THROTTLE_DELAY  0 ! Apply lag to requested throttle using time constants: 0 ->
                      ! no, 1 -> yes
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on engine body
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters and the
! function M_DIFF_VISC.

! NDIFF             3 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                        ! diff [I]
LOCKED_DIFF_K(1)   80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of 1st drive axle diff [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of 1st drive axle diff [I]
R_GEAR_DIFF(1)    4.4 ; - ! Gear ratio of 1st drive axle diff [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft [I]
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle diff
                      ! [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control. When 0 or 2, functions CLUTCH_CON_DIFF and
                      ! CLUTCH_TORQUE_DIFF are used. When 2, CLUTCH_TORQUE_DIFF2 is
                      ! also used. [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 -> yes.
                      ! If 1, then functions CLUTCH_TWIN and M_TWIN are used. [I]

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)    4.4 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

OPT_DIFF_INTERNAL(3) 1 ! Inter-axle diff for drive axles 1,2 model: 1 -> internal, 0
                       ! -> external [I]
OPT_LOCKED_DIFF(3)  0 ! Is the inter-axle diff for drive axles 1,2 locked? 0 -> no,
                      ! 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for drive axles 1,2 [I]
LOCKED_DIFF_DAMP(3) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                        ! for drive axles 1,2 [I]
LOCKED_DIFF_K(3)   80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for drive axles 1,2 [I]
R_EFF_F_DIFF(3)  0.99 ; - ! Forward efficiency of inter-axle diff for drive axles
                      ! 1,2 [I]
R_EFF_R_DIFF(3)  0.99 ; - ! Reverse efficiency of inter-axle diff for drive axles
                      ! 1,2 [I]
R_GEAR_DIFF(3)      1 ; - ! Gear ratio of inter-axle diff for drive axles 1,2 [I]
IDS(3)              0 ; kg-m2 ! [D] Spin inertia of inter-axle diff for drive axles
                      ! 1,2 input shaft [I]
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control for inter-axle diff for drive axles 1,2:
                      ! 0 -> table lookup or external, 1 -> Torsen parameters, 2 ->
                      ! yaw control [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
! Behavior of an internal-combustion engine is specified with the Configurable
! Functions MENGINE and FUEL_RATE, along with the following parameters.

INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
AV_ENG_IDLE       800 ; rpm ! Engine idle speed used for initialization [I]
AV_ENG_LOW_CLUTCH 720 ; rpm ! Engine low speed limit: disengage clutch when stopping
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter
TH_MIN_CL_ACCEL  0.05 ; - ! [D] Minimum throttle for clutch to re-engage to
                      ! accelerate from stop

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters to specify a hyraulic torque converted or a mechanical
! clutch.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch. The torque
                      ! converter options (0 and 2) use functions INV_CAP_TC and
                      ! RM_TC. Option 2 also uses LOCK_AT and UNLOCK_AT. [I]
OPT_CLUTCH_MODE     1 ! Clutch control mode: 0 -> open-loop with function
                      ! CLUTCH_CONTROL, 1 -> closed-loop (based on shifting and
                      ! function CLUTCH_TORQUE) [I]
OPT_CLUTCH_DELAY    1 ! Apply lag to requested clutch torque using time constants: 0
                      ! -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE  0.1 ; s ! Time constant for clutch torque (engage)
T_CL_START          0 ; s ! Time elapsed after shift starts when clutch control
                      ! starts [I]
T_CL_DISENGAGE    0.1 ; s ! Time elapsed when clutch is fully disengaged [I]
T_CL_PRESS_TOTAL  0.3 ; s ! Time elapsed when clutch starts re-engaging [I]
T_CL_HALF_HOLD    0.1 ; s ! Time holding the clutch at half pressure [I]
T_CL_RE_ENGAGE    0.5 ; s ! Time elapsed when clutch is fully re-engaged [I]
! T_CL_HALF_TOTAL 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_GEAR_LAG        0.1 ; s ! Time elapsed after shift starts when shift is complete
T_TH_START          0 ; s ! Time elapsed after shift starts when throttle control
                      ! starts [I]
T_TH_ZERO         0.1 ; s ! Time elapsed when throttle drops to zero [I]
T_TH_ZERO_TOTAL   0.3 ; s ! Time elapsed when throttle starts to return [I]
T_TH_RETURNED     0.4 ; s ! Time elapsed when throttle has returned to pre-shift
                      ! level [I]
! T_TH_ZERO_HOLD  0.2 ; s ! CALC -- Time spent holding zero throttle [I]
! T_TH_RETURN     0.1 ; s ! CALC -- Time spent returning to original throttle [I]
VLOW_CLUTCH         5 ; km/h ! Disengage the clutch when effective wheel speeds are
                      ! below this limit when braking or resting [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and Configurable
! Functions noted below. Transmission controller mode can be specified with the
! open-loop function MODE_TRANS and transmission gear can be specified with the
! open-loop function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model.
                       ! Option 1 uses functions DOWNSHIFT_TRANS and UPSHIFT_TRANS.
                       ! Option 2 uses functions R_GEAR_CVT, R_EFF_CVT_F, and
                       ! R_EFF_CVT_R. [I]
LIMIT_DOWNSHIFT     1 ! [D] Limit to number of gears covered in a downshift
LIMIT_UPSHIFT       1 ! [D] Limit to number of gears covered in an upshift
NGEARS             18 ! Number of forward gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, but not including
                      ! the engine. Does not include effect of nonlinear function
                      ! M_TRANS_ROT. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline. Does not include
                      ! effect of nonlinear function M_TRANS_AV. [I]
ITC_OUTPUT_SHAFT  0.5 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -12.85 ; - ! Reverse-gear ratio of trans (should be negative)

ITR(1)            0.2 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)     14.4 ; - ! 1st-gear ratio of transmission

ITR(2)            0.2 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)    12.29 ; - ! 2nd-gear ratio of transmission

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     8.56 ; - ! 3rd-gear ratio of transmission

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)      7.3 ; - ! 4th-gear ratio of transmission

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)     6.05 ; - ! 5th-gear ratio of transmission

ITR(6)            0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.92 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.92 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)     5.16 ; - ! 6th-gear ratio of transmission

ITR(7)            0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia
R_EFF_TR_F(7)    0.92 ; - ! 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)    0.92 ; - ! 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)     4.38 ; - ! 7th-gear ratio of transmission

ITR(8)            0.2 ; kg-m2 ! 8th-gear trans output shaft spin inertia
R_EFF_TR_F(8)    0.92 ; - ! 8th-gear forward efficiency of transmission
R_EFF_TR_R(8)    0.92 ; - ! 8th-gear reverse efficiency of transmission
R_GEAR_TR(8)     3.74 ; - ! 8th-gear ratio of transmission

ITR(9)            0.2 ; kg-m2 ! 9th-gear trans output shaft spin inertia
R_EFF_TR_F(9)    0.92 ; - ! 9th-gear forward efficiency of transmission
R_EFF_TR_R(9)    0.92 ; - ! 9th-gear reverse efficiency of transmission
R_GEAR_TR(9)      3.2 ; - ! 9th-gear ratio of transmission

ITR(10)           0.2 ; kg-m2 ! 10th-gear trans output shaft spin inertia
R_EFF_TR_F(10)   0.92 ; - ! 10th-gear forward efficiency of transmission
R_EFF_TR_R(10)   0.92 ; - ! 10th-gear reverse efficiency of transmission
R_GEAR_TR(10)    2.73 ; - ! 10th-gear ratio of transmission

ITR(11)           0.2 ; kg-m2 ! 11th-gear trans output shaft spin inertia
R_EFF_TR_F(11)   0.92 ; - ! 11th-gear forward efficiency of transmission
R_EFF_TR_R(11)   0.92 ; - ! 11th-gear reverse efficiency of transmission
R_GEAR_TR(11)    2.29 ; - ! 11th-gear ratio of transmission

ITR(12)           0.2 ; kg-m2 ! 12th-gear trans output shaft spin inertia
R_EFF_TR_F(12)   0.92 ; - ! 12th-gear forward efficiency of transmission
R_EFF_TR_R(12)   0.92 ; - ! 12th-gear reverse efficiency of transmission
R_GEAR_TR(12)    1.95 ; - ! 12th-gear ratio of transmission

ITR(13)           0.2 ; kg-m2 ! 13th-gear trans output shaft spin inertia
R_EFF_TR_F(13)   0.92 ; - ! 13th-gear forward efficiency of transmission
R_EFF_TR_R(13)   0.92 ; - ! 13th-gear reverse efficiency of transmission
R_GEAR_TR(13)    1.62 ; - ! 13th-gear ratio of transmission

ITR(14)           0.2 ; kg-m2 ! 14th-gear trans output shaft spin inertia
R_EFF_TR_F(14)   0.92 ; - ! 14th-gear forward efficiency of transmission
R_EFF_TR_R(14)   0.92 ; - ! 14th-gear reverse efficiency of transmission
R_GEAR_TR(14)    1.38 ; - ! 14th-gear ratio of transmission

ITR(15)           0.2 ; kg-m2 ! 15th-gear trans output shaft spin inertia
R_EFF_TR_F(15)   0.92 ; - ! 15th-gear forward efficiency of transmission
R_EFF_TR_R(15)   0.92 ; - ! 15th-gear reverse efficiency of transmission
R_GEAR_TR(15)    1.17 ; - ! 15th-gear ratio of transmission

ITR(16)           0.2 ; kg-m2 ! 16th-gear trans output shaft spin inertia
R_EFF_TR_F(16)   0.92 ; - ! 16th-gear forward efficiency of transmission
R_EFF_TR_R(16)   0.92 ; - ! 16th-gear reverse efficiency of transmission
R_GEAR_TR(16)       1 ; - ! 16th-gear ratio of transmission

ITR(17)           0.2 ; kg-m2 ! 17th-gear trans output shaft spin inertia
R_EFF_TR_F(17)   0.92 ; - ! 17th-gear forward efficiency of transmission
R_EFF_TR_R(17)   0.92 ; - ! 17th-gear reverse efficiency of transmission
R_GEAR_TR(17)    0.86 ; - ! 17th-gear ratio of transmission

ITR(18)           0.2 ; kg-m2 ! 18th-gear trans output shaft spin inertia
R_EFF_TR_F(18)   0.92 ; - ! 18th-gear forward efficiency of transmission
R_EFF_TR_R(18)   0.92 ; - ! 18th-gear reverse efficiency of transmission
R_GEAR_TR(18)    0.73 ; - ! 18th-gear ratio of transmission

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

OPT_SL_METHOD       1 ! [D] Use curvature in iteration for S-L from X-Y? 1 -> yes, 0
                      ! -> no
TOL_SL_METHOD       1 ; mm ! [D] Stop iteration if X-Y from S-L solution is no
                      ! further from requested X-Y than this
! NPATH             6 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        6 ! VS Command to install reference paths

PATH_ID(1)       1100 ; Interior Loop; Left Lane
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1) 89.99050466 ; deg ! Heading at the start of this path
! X_PATH_START(1) 78.571999 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1) 115 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 16912.84505 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 78.571999 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 115 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) 89.99050466 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES    6 ! No. of XY spline tables (see the SPLINE TABLES section)

PATH_ID(2)       2100 ; Outer Loop; Left Lane
OPT_PATH_START(2)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
! HEADING_START(2) -90.426037 ; deg ! Heading at the start of this path
! X_PATH_START(2) 649.428399 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(2) 1815.0012 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        1 ! Number of segments in this path
SEGMENT_TYPE(2,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(2,1)  2 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(2,1) 17095.95116 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 649.428399 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 1815.0012 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) -90.426037 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1010 ; Interior Loop; Middle Lane
OPT_PATH_START(3)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! Station at the start of this path
! HEADING_START(3) 89.99053523 ; deg ! Heading at the start of this path
! X_PATH_START(3) 82.229599 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(3) 114.9999 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        1 ! Number of segments in this path
SEGMENT_TYPE(3,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(3,1)  3 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(3,1) 16889.86508 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 82.229599 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 114.9999 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 89.99053523 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1001 ; Interior Loop; Right Lane
OPT_PATH_START(4)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)      0 ; m ! Station at the start of this path
! HEADING_START(4) 89.99055957 ; deg ! Heading at the start of this path
! X_PATH_START(4) 85.887199 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(4) 115 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        1 ! Number of segments in this path
SEGMENT_TYPE(4,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(4,1)  4 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(4,1) 16866.88507 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) 85.887199 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 115 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1) 89.99055957 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       2010 ; Outer Loop; Middle Lane
OPT_PATH_START(5)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)      0 ; m ! Station at the start of this path
! HEADING_START(5) -90.42605909 ; deg ! Heading at the start of this path
! X_PATH_START(5) 645.770799 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(5) 1815.0013 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        1 ! Number of segments in this path
SEGMENT_TYPE(5,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(5,1)  5 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(5,1) 17118.93113 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) 645.770799 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) 1815.0013 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1) -90.42605909 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)       2001 ; Outer Loop; Right Lane
OPT_PATH_START(6)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)      0 ; m ! Station at the start of this path
! HEADING_START(6) -90.42578526 ; deg ! Heading at the start of this path
! X_PATH_START(6) 642.113199 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(6) 1815.0012 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        1 ! Number of segments in this path
SEGMENT_TYPE(6,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(6,1)  6 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(6,1) 17141.9111 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 642.113199 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) 1815.0012 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1) -90.42578526 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! A VS Terrain surface defines elevation Z, friction MU, and rolling resistance
! RR_SURF as functions of global X and Y coordinates. The terrain data is contained
! in a single vsterrain file loaded with the command VS_TERRAIN_FILE.

! CURRENT_ROAD_ID   1 ! ROAD_ID during initialization [I]

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             2 ! Number of LTARG datasets that are used in this run

PATH_ID_DM       1010 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0) [I]
OPT_INIT_PATH       1 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_INIT_STA_ROAD   1 ! [D] Find vehicle road station "Sta_Road" automatically when
                      ! the reference path for CURRENT_ROAD_ID is not PATH_ID_DM? 1
                      ! -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART           1346 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]
SSTOP            6000 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore calculated Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
OPT_DM_AUX          0 ! [D] Activate auxiliary path follower? 0 -> no, 1 -> yes [I]

! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      2 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           1 ! Braking and SC: 0 -> turn controller off while brakes are
                      ! applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018         0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC         2 ! SPEED_TARGET_ID for speed controller [I]
BK_PERF_SC          1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC     10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP          0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3         0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI          0.5 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,3)   2 ! ABS control option, unit 1, axle 3
ABS_SLIP_ON(1,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           1 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      1 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; Platooning Sensor (Yellow)
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 0 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 25 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)      1000 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      2900 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT           2 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 2 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; Platoon: Tractor Trailer Detect
IUNIT_OBJ(1)        0 ! [D] Attach object to sprung mass of this vehicle unit, or 0
                      ! -> don't attach to a sprung mass [I]
PATH_ID_OBJ(1)      0 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
ROAD_ID_OBJ(1)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(1)   1 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
H_OBJ(1)           -1 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)   17.25 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(1)   1.5 ; m ! Distance from reference point to front of rectangular
                      ! object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)        3 ; m ! Width of rectangular object
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
TypeO_1           199 ; - ! Output: User-defined Type (code) for object
V_Obj_1             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1             0 ; m ! Output: X coordinate of object 1
Y_Obj_1             0 ; m ! Output: Y coordinate of object 1
Z_Obj_1             0 ; m ! Output: Z coordinate of object 1
YawO_1              0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO1             0 ; deg ! Output: Pitch angle of object 1
RollO_1             0 ; deg ! Output: Roll angle of object 1

OBJECT_NAME(2)      2 ; Platoon Intruder
IUNIT_OBJ(2)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(2)   1100 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(2)  2000 ! LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(2)    2 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(2)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(2)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(2) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(2)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(2)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(2)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(2)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(2)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(2)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)          0.8 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)       5 ; m ! Length of rectangular or segment object
L_WB_OBJ(2)         3 ; m ! Wheelbase used for offtracking
LX_FRONT_OBJ(2)     1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(2) 1 ! Material type for reflectiveness map (< 1 for no map)
WIDTH_OBJ(2)     1.85 ; m ! Width of rectangular object
HeadO_2             0 ; deg ! Output: Heading of object relative to path
LatO_2              0 ; m ! Output: Lateral offset, object 2
MsgObj_2            0 ; - ! Output: User-defined Message (code) for object
S_Obj_2          1370 ; m ! Output and possibly ODE SV: Station of object
TypeO_2           200 ; - ! Output: User-defined Type (code) for object
V_Obj_2          75.6 ; km/h ! Output and possibly ODE SV: Speed of object
YawO_2    70.41689984 ; deg ! Output and possibly ODE SV: Yaw angle of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CC_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CC_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CI_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CI_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CI_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CI_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, 1st
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! inter-axle diff for drive axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available instant clutch torque. Available clutch torque is a
! function of normalized clutch control (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available clutch torque
! from the calculation can be adjusted with CLUTCH_TORQUE_GAIN and
! CLUTCH_TORQUE_OFFSET. Normalized clutch control used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 5000
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, 1st drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, inter-axle
                                 ! diff for drive axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression can be a nonlinear CARPET
! function of jounce at wheel (other side) and jounce at wheel or a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the
! calculation can be adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel
! used in the calculation can be adjusted with JNC_SCALE_CMP_DAMP and
! JNC_START_CMP_DAMP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_DAMP and JNC2_START_CMP_DAMP. The derivative of this
! function is used internally. This configurable function supports 10 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, left side
CMP_DAMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, right side
CMP_DAMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from
! the calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_JSTOP and JNC2_START_CMP_JSTOP. The derivative of this
! function is used internally. This configurable function supports 10 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, left side
CMP_JSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, right side
CMP_JSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from
! the calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_RSTOP and JNC2_START_CMP_RSTOP. The derivative of this
! function is used internally. This configurable function supports 10 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, left side
CMP_RSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, right
                               ! side
CMP_RSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement can be a
! nonlinear CARPET function of jounce at wheel (other side) and jounce at wheel or a
! function of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from
! the calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET.
! Jounce at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT
! and JNC_START_CMP_SPR_SEAT. Jounce at wheel (other side) used in the calculation
! can be adjusted with JNC2_SCALE_CMP_SPR_SEAT and JNC2_START_CMP_SPR_SEAT. An
! inverse version of this function is used internally. The derivative of this
! function is used internally. This configurable function supports 10 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CS_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CS_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 10 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CS_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CS_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CT_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CT_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 5 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 3
C_LAT_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 1
C_LAT_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 2
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 5
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 3
C_LONG_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 1
C_LONG_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 46
 0.2, 46
 0.8, 60
 1, 60
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 66
 0.2, 66
 0.8, 95
 1, 95
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 77
 0.2, 77
 0.8, 125
 1, 125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 93
 0.2, 93
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 109
 0.2, 109
 0.8, 268
 1, 268
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 128
 0.2, 128
 0.8, 314
 1, 314
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(7) LINEAR_FLAT ! shifting between gears 7 and 8
 0, 150
 0.2, 150
 0.8, 370
 1, 370
ENDTABLE
DOWNSHIFT_TRANS_GAIN(7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(8) LINEAR_FLAT ! shifting between gears 8 and 9
 0, 176
 0.2, 176
 0.8, 433
 1, 433
ENDTABLE
DOWNSHIFT_TRANS_GAIN(8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(9) LINEAR_FLAT ! shifting between gears 9 and 10
 0, 206
 0.2, 206
 0.8, 506
 1, 506
ENDTABLE
DOWNSHIFT_TRANS_GAIN(9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(10) LINEAR_FLAT ! shifting between gears 10 and 11
 0, 246
 0.2, 246
 0.8, 593
 1, 593
ENDTABLE
DOWNSHIFT_TRANS_GAIN(10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(11) LINEAR_FLAT ! shifting between gears 11 and 12
 0, 288
 0.2, 288
 0.8, 707
 1, 707
ENDTABLE
DOWNSHIFT_TRANS_GAIN(11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(12) LINEAR_FLAT ! shifting between gears 12 and 13
 0, 347
 0.2, 347
 0.8, 831
 1, 831
ENDTABLE
DOWNSHIFT_TRANS_GAIN(12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(13) LINEAR_FLAT ! shifting between gears 13 and 14
 0, 408
 0.2, 408
 0.8, 1000
 1, 1000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(14) LINEAR_FLAT ! shifting between gears 14 and 15
 0, 481
 0.2, 481
 0.8, 1174
 1, 1174
ENDTABLE
DOWNSHIFT_TRANS_GAIN(14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(15) LINEAR_FLAT ! shifting between gears 15 and 16
 0, 563
 0.2, 563
 0.8, 1385
 1, 1385
ENDTABLE
DOWNSHIFT_TRANS_GAIN(15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(16) LINEAR_FLAT ! shifting between gears 16 and 17
 0, 654
 0.2, 654
 0.8, 1620
 1, 1620
ENDTABLE
DOWNSHIFT_TRANS_GAIN(16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(17) LINEAR_FLAT ! shifting between gears 17 and 18
 0, 771
 0.2, 771
 0.8, 1884
 1, 1884
ENDTABLE
DOWNSHIFT_TRANS_GAIN(17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 10 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, left side
FD_GAIN(1,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, right side
FD_GAIN(1,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, left side
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, right side
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 10 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(1,3,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, left side
FS_COMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, left side

FS_COMP_COEFFICIENT(1,3,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, right side
FS_COMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, right side

FS_COMP_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

FS_COMP_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, left side
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

FS_COMP_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, right side
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 10 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(1,3,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, left side
FS_EXT_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, left side

FS_EXT_COEFFICIENT(1,3,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, right side
FS_EXT_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, right side

FS_EXT_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

FS_EXT_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, left side
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

FS_EXT_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, right side
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 20 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 0.025, 2656.1, 5122.4, 9485.9, 13090.6, 16126.1
 0.05, 4756, 9172.4, 16985.9, 23440.5, 28876
 0.075, 6140.8, 11843, 21931.5, 30265.4, 37283.5
 0.1, 6952.5, 13408.4, 24830.3, 34265.8, 42211.6
 0.125, 7389.9, 14252, 26392.6, 36421.8, 44867.4
 0.15, 7602.3, 14661.7, 27151.2, 37468.7, 46157.1
 0.175, 7682.5, 14816.3, 27437.5, 37863.8, 46643.8
 0.2, 7684.8, 14820.7, 27445.8, 37875.2, 46657.8
 0.225, 7640.9, 14736, 27288.9, 37658.6, 46391.1
 0.25, 7569.4, 14598, 27033.4, 37306.1, 45956.8
 0.3, 7384.3, 14241.2, 26372.5, 36394.1, 44833.3
 0.35, 7177.9, 13843.1, 25635.4, 35376.9, 43580.2
 0.4, 6969.9, 13441.9, 24892.5, 34351.6, 42317.2
 0.45, 6768.6, 13053.7, 24173.6, 33359.6, 41095.1
 0.5, 6577.6, 12685.3, 23491.3, 32418, 39935.3
 0.55, 6398, 12339, 22850, 31533, 38845
 0.6, 6230, 12015.1, 22250.1, 30705.2, 37825.2
 0.65, 6073.3, 11712.7, 21690.3, 29932.6, 36873.4
 0.7, 5927.1, 11430.8, 21168.2, 29212.1, 35985.9
 0.75, 5790.7, 11167.9, 20681.2, 28540.1, 35158.1
 0.8, 5663.5, 10922.4, 20226.7, 27912.9, 34385.5
 0.85, 5544.6, 10693.2, 19802.2, 27327, 33663.7
 0.9, 5433.4, 10478.7, 19405, 26778.9, 32988.5
 0.95, 5329.2, 10277.8, 19033, 26265.5, 32356
 1, 5329.2, 10277.8, 19033, 26265.5, 32356
ENDTABLE
FX_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 20 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 1462.8, 2821, 5224.2, 7209.3, 8881.1
 2, 2844.9, 5486.5, 10160.2, 14021.1, 17272.4
 4, 5121.2, 9876.6, 18290, 25240.2, 31093
 6, 6587, 12703.6, 23525.1, 32464.7, 39992.7
 8, 7348.7, 14172.5, 26245.3, 36218.5, 44617
 10, 7646, 14745.8, 27307, 37683.7, 46422
 12, 7684.6, 14820.3, 27445, 37874.1, 46656.4
 15, 7526.4, 14515.2, 26880.1, 37094.5, 45696.1
 20, 7120.4, 13732.2, 25430, 35093.4, 43231
 25, 6748.7, 13015.3, 24102.4, 33261.3, 40974.1
 30, 6449.8, 12438.9, 23035, 31788.3, 39159.5
 35, 6213.5, 11983.3, 22191.2, 30623.9, 37725.1
 40, 6025.1, 11619.8, 21518.1, 29695, 36580.8
 45, 5872.4, 11325.4, 20973, 28942.7, 35654
 50, 5746.8, 11083.2, 20524.4, 28323.7, 34891.5
 60, 5553.2, 10709.8, 19832.9, 27369.5, 33716
 70, 5411.5, 10436.5, 19326.8, 26671, 32855.6
 80, 5303.6, 10228.3, 18941.3, 26139, 32200.2
 89, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
 90, 5226.4, 10079.5, 18665.7, 25758.7, 31731.7
ENDTABLE
FY_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 20 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 1, right,
                                  ! inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, left, outer
FZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, right,
                                  ! inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 2, right,
                                  ! outer
FZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, left, inner
FZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, left, outer
FZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,1) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, right,
                                  ! inner
FZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,2) 1350 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 1, axle 3, right,
                                  ! outer
FZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, outer
FZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, outer
FZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, inner
FZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, outer
FZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, inner
FZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, outer
FZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 10 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 5
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INTRUDER_SPD: User-defined table. Table output can be a nonlinear CARPET function
! of the column variable and the row variable or a function of the row variable
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Table output from the calculation can be adjusted with
! INTRUDER_SPD_GAIN and INTRUDER_SPD_OFFSET. The row variable used in the calculation
! can be adjusted with XROW_SCALE_INTRUDER_SPD and XROW_START_INTRUDER_SPD. The
! column variable used in the calculation can be adjusted with
! XCOL_SCALE_INTRUDER_SPD and XCOL_START_INTRUDER_SPD.
DEFINE_TABLE INTRUDER_SPD 1 ;

! 1D table: col 1 = the row variable (-), col 2 = table output (-)
INTRUDER_SPD_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 10, 21
 15, 19.8
 30, 19.8
 32, 22
ENDTABLE
INTRUDER_SPD_GAIN   1 ! Gain multiplied with calculated value to get table output
INTRUDER_SPD_OFFSET 0 ; - ! Offset added (after gain) to get table output
XROW_START_INTRUDER_SPD 0 ; - ! Offset subtracted from the row variable
XROW_SCALE_INTRUDER_SPD 1 ! Scale factor divided into (the row variable -
                          ! XROW_START_INTRUDER_SPD)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 20 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, outer
KGAMMA_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, outer
KGAMMA_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, inner
KGAMMA_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, outer
KGAMMA_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, inner
KGAMMA_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, outer
KGAMMA_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, inner
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, outer
KGAMMA_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, inner
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, outer
KGAMMA_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, inner
KGAMMA_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, outer
KGAMMA_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, inner
KGAMMA_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, outer
KGAMMA_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.6s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)      2000  ! Platoon Intruder

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 1600, 0
 1680, -3.8
 1700, -3.8
 1750, -3.8
 1920, -3.8
 1950, -3.8
 1970, -3.8
 1978, -3.8
 2065, -7.6
ENDTABLE
LTARG_GAIN(2)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(2)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(2)     1 ! Scale factor divided into (station - SSTART_LTARG)

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 20
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 20
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 20 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,2) LINEAR ! unit 1, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,2) LINEAR ! unit 1, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,1) LINEAR ! unit 1, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,2) LINEAR ! unit 1, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,1) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,1) LINEAR ! unit 1, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,2) 0.1076 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,2) LINEAR ! unit 1, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,2) LINEAR ! unit 2, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,2) LINEAR ! unit 2, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,1) LINEAR ! unit 2, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,2) LINEAR ! unit 2, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,1) LINEAR ! unit 2, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,2) LINEAR ! unit 2, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 20 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,2) SPLINE ! unit 1, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,2) SPLINE ! unit 1, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,1) SPLINE ! unit 1, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,2) SPLINE ! unit 1, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,1) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,1) SPLINE ! unit 1, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,1) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,2) 1.076 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,2) SPLINE ! unit 1, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,2) 35000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,2) SPLINE ! unit 2, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,2) SPLINE ! unit 2, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 18 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 5 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(1,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 3
MX_AUX_GAIN(1,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 3

MX_AUX_COEFFICIENT(2,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(1) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,1) SPLINE ! unit 1, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,2) SPLINE ! unit 1, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(1) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(1) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(1) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(1) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 10 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 20 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 8583.75, 17167.5, 34335, 51502.5, 68670
 1, 41.45259664, 101.7478871, 274.7642553, 511.1020779, 814.8605471
 2, 75.56674022, 185.4200305, 499.4775598, 929.643269, 1484.224024
 4, 117.8431556, 288.9005817, 773.5134023, 1441.715995, 2309.797714
 6, 128.1798472, 313.8595313, 833.3294941, 1556.244177, 2505.266684
 8, 116.9045047, 285.7413445, 749.4184645, 1403.581788, 2275.442706
 10, 94.48054115, 230.2852358, 592.1735973, 1114.30109, 1826.975482
 12, 67.66696658, 164.0953276, 406.6573068, 772.1208354, 1292.949974
 15, 26.18083853, 61.76696374, 121.3438081, 245.2509665, 468.2342996
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(1) 0 ; N-m ! Constant this torque difference, 1st drive axle
                          ! diff
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(3) 0 ; N-m ! Constant this torque difference, inter-axle diff
                          ! for drive axles 1,2
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Transmission torque due to compliance twist rate, added to torque
! calculated from the parameter DRIVELINE_ZETA. Compliance damping torque is a
! function of compliance twist angular rate (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Compliance damping
! torque from the calculation can be adjusted with M_TRANS_AV_GAIN and
! M_TRANS_AV_OFFSET. Compliance twist angular rate used in the calculation can be
! adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant compliance damping torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get compliance damping
                      ! torque

! M_TRANS_ROT: Transmission torque due to compliance twist, added to torque
! calculated from the parameter DRIVELINE_FREQ. Compliance torque is a function of
! compliance twist angle (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Compliance torque from the calculation can be
! adjusted with M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used
! in the calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant compliance torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get compliance torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 10
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,1) MPa ;
PBK_DL_FZ_CONSTANT(1,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,2) MPa ;
PBK_DL_FZ_CONSTANT(1,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,1) MPa ;
PBK_DL_FZ_CONSTANT(1,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,2) MPa ;
PBK_DL_FZ_CONSTANT(1,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(1,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, left
                            ! side
PBK_DL_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,1) MPa ;
PBK_DL_FZ_CONSTANT(1,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, left side

PBK_DL_COEFFICIENT(1,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, right
                            ! side
PBK_DL_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,2) MPa ;
PBK_DL_FZ_CONSTANT(1,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,2) MPa ;
PBK_DL_FZ_CONSTANT(2,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

PBK_DL_COEFFICIENT(2,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, left
                            ! side
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

PBK_DL_COEFFICIENT(2,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, right
                            ! side
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 5 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 80 km/h
SPEED_TARGET_CONSTANT(1) 80 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(2)  2  ! User-defined ID number for this dataset
SPEED_TARGET_CONSTANT(2) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;
SPEED_TARGET_S_CONSTANT(2) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 10 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_AXLE_JNC_STEER of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Steer from the calculation can be adjusted with SUSP_AXLE_ROLL_STEER_GAIN
! and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER. Jounce used in the calculation can
! be adjusted with JNC_SCALE_AXLE_STEER and JNC_START_AXLE_STEER. The derivative of
! this function is used internally. This configurable function supports 5 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 3
SUSP_AXLE_ROLL_STEER_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,3) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 3

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(2,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 2, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(2,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 2, axle 2

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of roll and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_AXLE_ROLL of roll
! (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the calculation can be
! adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET. Jounce used in the
! calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_DIVE_AXLE and ROLL_START_SUSP_DIVE_AXLE. The derivative of this
! function is used internally. This configurable function supports 5 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 1
SUSP_DIVE_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 1

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 2
SUSP_DIVE_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 2

SUSP_DIVE_AXLE_CONSTANT(1,3) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 3
SUSP_DIVE_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 3

SUSP_DIVE_AXLE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 2, axle 1
SUSP_DIVE_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 2, axle 1

SUSP_DIVE_AXLE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 2, axle 2
SUSP_DIVE_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(2,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 2, axle 2

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward can be a nonlinear CARPET function of roll and jounce or a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_X_AXLE_ROLL of roll (CONSTANT, COEFFICIENT, or TABLE). X axle movement forward
! from the calculation can be adjusted with SUSP_X_AXLE_GAIN and SUSP_X_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_X_AXLE and
! JNC_START_SUSP_X_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_X_AXLE and ROLL_START_SUSP_X_AXLE. The derivative of this function
! is used internally. This configurable function supports 5 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 1
SUSP_X_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 1

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 2
SUSP_X_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 2

SUSP_X_AXLE_CONSTANT(1,3) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 3
SUSP_X_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 3

SUSP_X_AXLE_CONSTANT(2,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 2, axle 1
SUSP_X_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 2, axle 1

SUSP_X_AXLE_CONSTANT(2,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 2, axle 2
SUSP_X_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(2,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 2, axle 2

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 5 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,3) SPLINE ! unit 1, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,1) SPLINE ! unit 2, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! THROTTLE_ENGINE: Normalized open-loop throttle request. Normalized throttle
! request is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Normalized throttle request from the
! calculation can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET.
! Time used in the calculation can be adjusted with TSCALE_THROTTLE and
! TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle request
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! request

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.6 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 51
 0.2, 51
 0.8, 100
 1, 100
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 73
 0.2, 73
 0.8, 150
 1, 150
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 86
 0.2, 86
 0.8, 220
 1, 220
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 112
 0.2, 112
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 130
 0.2, 130
 0.8, 310
 1, 310
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 146
 0.2, 146
 0.8, 349
 1, 349
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(7) LINEAR_FLAT ! shifting between gears 7 and 8
 0, 167
 0.2, 167
 0.8, 411
 1, 411
ENDTABLE
UPSHIFT_TRANS_GAIN(7) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(7) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(7) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(8) LINEAR_FLAT ! shifting between gears 8 and 9
 0, 195
 0.2, 195
 0.8, 481
 1, 481
ENDTABLE
UPSHIFT_TRANS_GAIN(8) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(8) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(8) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(9) LINEAR_FLAT ! shifting between gears 9 and 10
 0, 229
 0.2, 229
 0.8, 563
 1, 563
ENDTABLE
UPSHIFT_TRANS_GAIN(9) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(9) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(9) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(10) LINEAR_FLAT ! shifting between gears 10 and 11
 0, 273
 0.2, 273
 0.8, 659
 1, 659
ENDTABLE
UPSHIFT_TRANS_GAIN(10) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(10) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(10) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(11) LINEAR_FLAT ! shifting between gears 11 and 12
 0, 321
 0.2, 321
 0.8, 786
 1, 786
ENDTABLE
UPSHIFT_TRANS_GAIN(11) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(11) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(11) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(12) LINEAR_FLAT ! shifting between gears 12 and 13
 0, 386
 0.2, 386
 0.8, 923
 1, 923
ENDTABLE
UPSHIFT_TRANS_GAIN(12) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(12) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(12) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(13) LINEAR_FLAT ! shifting between gears 13 and 14
 0, 453
 0.2, 453
 0.8, 1111
 1, 1111
ENDTABLE
UPSHIFT_TRANS_GAIN(13) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(13) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(13) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(14) LINEAR_FLAT ! shifting between gears 14 and 15
 0, 534
 0.2, 534
 0.8, 1304
 1, 1304
ENDTABLE
UPSHIFT_TRANS_GAIN(14) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(14) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(14) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(15) LINEAR_FLAT ! shifting between gears 15 and 16
 0, 625
 0.2, 625
 0.8, 1538
 1, 1538
ENDTABLE
UPSHIFT_TRANS_GAIN(15) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(15) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(15) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(16) LINEAR_FLAT ! shifting between gears 16 and 17
 0, 727
 0.2, 727
 0.8, 1800
 1, 1800
ENDTABLE
UPSHIFT_TRANS_GAIN(16) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(16) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(16) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(17) LINEAR_FLAT ! shifting between gears 17 and 18
 0, 856
 0.2, 856
 0.8, 2093
 1, 2093
ENDTABLE
UPSHIFT_TRANS_GAIN(17) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(17) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(17) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 6 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; Interior Loop; Left Lane Segment 1
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 78.572, 115, 0
 78.7244, 135.1999, 20.2
 79.1812, 155.3954, 40.401
 79.9425, 175.5814, 60.601
 81.0082, 195.7537, 80.802
 82.3779, 215.9077, 101.002
 84.0514, 236.0387, 121.203
 86.0283, 256.1422, 141.403
 88.3081, 276.2136, 161.604
 90.8902, 296.2483, 181.804
 93.7742, 316.2419, 202.005
 96.9593, 336.1897, 222.205
 100.4448, 356.0873, 242.406
 104.2301, 375.9299, 262.606
 108.314, 395.7131, 282.807
 112.6958, 415.4326, 303.007
 117.3745, 435.0838, 323.207
 122.349, 454.6623, 343.408
 127.6181, 474.1634, 363.608
 133.1807, 493.5828, 383.809
 139.0355, 512.9163, 404.009
 145.1811, 532.1591, 424.21
 151.6163, 551.3072, 444.41
 158.3393, 570.3561, 464.611
 165.349, 589.3014, 484.811
 172.6434, 608.1388, 505.012
 180.2211, 626.8641, 525.212
 188.0803, 645.473, 545.413
 196.2192, 663.9613, 565.613
 204.6359, 682.3248, 585.814
 213.3287, 700.5592, 606.014
 222.2953, 718.6606, 626.214
 231.534, 736.6246, 646.415
 241.0424, 754.4473, 666.615
 250.8185, 772.1246, 686.816
 260.8601, 789.6525, 707.016
 271.1648, 807.0269, 727.217
 281.7303, 824.244, 747.417
 292.5543, 841.2998, 767.618
 303.6342, 858.1904, 787.818
 314.9675, 874.9121, 808.019
 326.5517, 891.461, 828.219
 338.3841, 907.8333, 848.42
 350.4621, 924.0254, 868.62
 362.7829, 940.0334, 888.821
 375.344, 955.8539, 909.021
 388.1784, 972.0185, 929.661
 400.7672, 988.3748, 950.301
 413.1079, 1004.9191, 970.941
 425.1978, 1021.6476, 991.581
 437.034, 1038.5565, 1012.221
 448.6139, 1055.642, 1032.861
 459.9349, 1072.9001, 1053.501
 470.9943, 1090.327, 1074.141
 481.7897, 1107.9187, 1094.781
 492.3186, 1125.6711, 1115.421
 502.5786, 1143.5803, 1136.061
 512.5674, 1161.6422, 1156.701
 522.2827, 1179.8526, 1177.341
 531.7223, 1198.2075, 1197.981
 540.8841, 1216.7027, 1218.621
 549.7659, 1235.3338, 1239.261
 558.3658, 1254.0968, 1259.901
 566.6817, 1272.9873, 1280.54
 574.7119, 1292.001, 1301.18
 582.4545, 1311.1338, 1321.82
 589.9076, 1330.3811, 1342.46
 597.0697, 1349.7385, 1363.1
 603.939, 1369.2016, 1383.74
 610.5142, 1388.7664, 1404.38
 616.7935, 1408.4281, 1425.02
 622.7757, 1428.182, 1445.66
 628.4593, 1448.0239, 1466.3
 633.843, 1467.9493, 1486.94
 638.9257, 1487.9537, 1507.58
 643.7062, 1508.0325, 1528.22
 648.1833, 1528.1809, 1548.86
 652.3561, 1548.3946, 1569.5
 656.2237, 1568.6689, 1590.139
 659.7851, 1588.9994, 1610.78
 663.0395, 1609.3812, 1631.42
 665.9862, 1629.8097, 1652.059
 668.6246, 1650.2803, 1672.699
 670.9539, 1670.7883, 1693.339
 672.9737, 1691.3292, 1713.979
 674.6836, 1711.8982, 1734.619
 676.0831, 1732.4907, 1755.259
 677.172, 1753.1019, 1775.899
 677.9499, 1773.727, 1796.539
 678.4167, 1794.3618, 1817.179
 678.5723, 1815.0012, 1837.819
 678.7039, 1832.9607, 1855.779
 679.0982, 1850.9183, 1873.741
 679.7555, 1868.87, 1891.705
 680.6752, 1886.8117, 1909.67
 681.8571, 1904.7397, 1927.637
 683.301, 1922.6506, 1945.606
 685.0065, 1940.5399, 1963.576
 686.973, 1958.4034, 1981.548
 689.2001, 1976.2381, 1999.521
 691.6871, 1994.0395, 2017.495
 694.434, 2011.8048, 2035.472
 697.4391, 2029.5285, 2053.448
 700.7025, 2047.208, 2071.426
 704.2232, 2064.8391, 2089.406
 708.0004, 2082.4181, 2107.386
 712.033, 2099.9411, 2125.367
 716.3201, 2117.4042, 2143.348
 720.8612, 2134.8037, 2161.331
 725.6547, 2152.136, 2179.314
 730.6996, 2169.3973, 2197.297
 735.9949, 2186.5837, 2215.281
 741.5394, 2203.6916, 2233.265
 747.3319, 2220.7175, 2251.249
 753.3715, 2237.6578, 2269.234
 759.656, 2254.5085, 2287.218
 766.1848, 2271.2662, 2305.203
 772.9561, 2287.9272, 2323.187
 779.9685, 2304.4879, 2341.171
 787.2202, 2320.9449, 2359.155
 794.7099, 2337.2945, 2377.139
 802.4358, 2353.5334, 2395.122
 810.3963, 2369.6579, 2413.104
 818.5896, 2385.6645, 2431.086
 827.0139, 2401.5497, 2449.067
 835.6675, 2417.3104, 2467.047
 844.548, 2432.943, 2485.026
 853.6542, 2448.4439, 2503.004
 862.9836, 2463.8102, 2520.98
 872.5344, 2479.0383, 2538.956
 882.3045, 2494.1252, 2556.93
 892.2914, 2509.0669, 2574.902
 902.4936, 2523.8613, 2592.873
 912.9084, 2538.5043, 2610.842
 923.5337, 2552.9933, 2628.809
 934.3671, 2567.3249, 2646.775
 945.4063, 2581.4961, 2664.738
 956.6491, 2595.5038, 2682.7
 968.093, 2609.3453, 2700.659
 979.7367, 2623.0184, 2718.618
 991.5781, 2636.521, 2736.578
 1003.6144, 2649.8496, 2754.537
 1015.8434, 2663.002, 2772.496
 1028.2625, 2675.975, 2790.455
 1040.8688, 2688.7662, 2808.414
 1053.6599, 2701.3727, 2826.374
 1066.6328, 2713.7917, 2844.333
 1079.7852, 2726.0207, 2862.292
 1093.114, 2738.0571, 2880.251
 1106.6164, 2749.8984, 2898.21
 1120.2897, 2761.5421, 2916.17
 1134.1309, 2772.9858, 2934.129
 1148.1369, 2784.2268, 2952.088
 1162.3051, 2795.2631, 2970.047
 1176.6322, 2806.092, 2988.006
 1191.1154, 2816.7116, 3005.966
 1205.7514, 2827.1192, 3023.925
 1220.5371, 2837.3128, 3041.884
 1235.4697, 2847.2905, 3059.843
 1250.5458, 2857.0499, 3077.803
 1265.7622, 2866.589, 3095.762
 1281.1158, 2875.9057, 3113.721
 1296.6031, 2884.9982, 3131.68
 1312.2212, 2893.8645, 3149.639
 1327.9664, 2902.5027, 3167.598
 1343.8358, 2910.9109, 3185.558
 1359.8257, 2919.0876, 3203.517
 1375.9328, 2927.0306, 3221.476
 1392.1537, 2934.7387, 3239.435
 1408.485, 2942.21, 3257.395
 1424.9232, 2949.443, 3275.354
 1441.465, 2956.4361, 3293.313
 1458.1067, 2963.1878, 3311.272
 1474.8447, 2969.6969, 3329.231
 1491.6758, 2975.9619, 3347.19
 1508.5961, 2981.9814, 3365.15
 1525.6022, 2987.7542, 3383.109
 1542.6905, 2993.2791, 3401.068
 1559.8573, 2998.5548, 3419.027
 1577.0991, 3003.5803, 3436.986
 1594.4121, 3008.3545, 3454.946
 1611.7927, 3012.8765, 3472.905
 1629.2372, 3017.1451, 3490.864
 1646.7419, 3021.1596, 3508.823
 1664.3034, 3024.9191, 3526.783
 1681.9174, 3028.4227, 3544.742
 1699.5806, 3031.6699, 3562.701
 1717.2892, 3034.6598, 3580.66
 1735.0393, 3037.3918, 3598.619
 1752.8274, 3039.8653, 3616.578
 1770.6495, 3042.0799, 3634.538
 1788.502, 3044.0351, 3652.497
 1806.381, 3045.7304, 3670.456
 1824.2827, 3047.1655, 3688.415
 1842.2035, 3048.3401, 3706.374
 1860.1394, 3049.2539, 3724.334
 1878.0868, 3049.9068, 3742.293
 1896.0418, 3050.2986, 3760.252
 1914.0005, 3050.4292, 3778.211
 1931.96, 3050.2977, 3796.171
 1949.9176, 3049.9034, 3814.133
 1967.8693, 3049.2461, 3832.097
 1985.811, 3048.3264, 3850.062
 2003.739, 3047.1445, 3868.029
 2021.6499, 3045.7006, 3885.998
 2039.5392, 3043.9951, 3903.969
 2057.4027, 3042.0286, 3921.94
 2075.2374, 3039.8015, 3939.913
 2093.0388, 3037.3145, 3957.888
 2110.8041, 3034.5676, 3975.864
 2128.5278, 3031.5625, 3993.841
 2146.2073, 3028.2991, 4011.819
 2163.8384, 3024.7784, 4029.798
 2181.4174, 3021.0012, 4047.778
 2198.9404, 3016.9686, 4065.759
 2216.4035, 3012.6815, 4083.741
 2233.803, 3008.1404, 4101.723
 2251.1353, 3003.3469, 4119.706
 2268.3966, 2998.302, 4137.69
 2285.583, 2993.0067, 4155.673
 2302.6909, 2987.4622, 4173.657
 2319.7168, 2981.6697, 4191.641
 2336.6571, 2975.6301, 4209.626
 2353.5078, 2969.3456, 4227.611
 2370.2655, 2962.8168, 4245.595
 2386.9265, 2956.0455, 4263.58
 2403.4872, 2949.0331, 4281.564
 2419.9442, 2941.7814, 4299.548
 2436.2938, 2934.2917, 4317.531
 2452.5327, 2926.5658, 4335.514
 2468.6572, 2918.6053, 4353.497
 2484.6638, 2910.412, 4371.478
 2500.549, 2901.9877, 4389.459
 2516.3097, 2893.3341, 4407.439
 2531.9423, 2884.4536, 4425.418
 2547.4432, 2875.3474, 4443.396
 2562.8095, 2866.018, 4461.373
 2578.0376, 2856.4672, 4479.348
 2593.1245, 2846.6971, 4497.322
 2608.0662, 2836.7102, 4515.294
 2622.8606, 2826.508, 4533.265
 2637.5036, 2816.0932, 4551.234
 2651.9926, 2805.4679, 4569.202
 2666.3242, 2794.6345, 4587.167
 2680.4954, 2783.5953, 4605.131
 2694.5031, 2772.3525, 4623.092
 2708.3446, 2760.9086, 4641.052
 2722.0177, 2749.2649, 4659.011
 2735.5203, 2737.4235, 4676.97
 2748.8489, 2725.3872, 4694.929
 2762.0013, 2713.1582, 4712.888
 2774.9743, 2700.7391, 4730.848
 2787.7655, 2688.1328, 4748.807
 2800.372, 2675.3417, 4766.766
 2812.791, 2662.3688, 4784.725
 2825.02, 2649.2164, 4802.684
 2837.0564, 2635.8876, 4820.644
 2848.8977, 2622.3852, 4838.603
 2860.5414, 2608.7119, 4856.562
 2871.9851, 2594.8707, 4874.521
 2883.2261, 2580.8647, 4892.48
 2894.2624, 2566.6965, 4910.44
 2905.0913, 2552.3694, 4928.399
 2915.7109, 2537.8862, 4946.358
 2926.1185, 2523.2502, 4964.317
 2936.3121, 2508.4645, 4982.276
 2946.2898, 2493.5319, 5000.236
 2956.0492, 2478.4558, 5018.195
 2965.5883, 2463.2394, 5036.154
 2974.905, 2447.8858, 5054.113
 2983.9975, 2432.3985, 5072.073
 2992.8638, 2416.7804, 5090.032
 3001.502, 2401.0352, 5107.991
 3009.9102, 2385.1658, 5125.95
 3018.0869, 2369.1759, 5143.909
 3026.0299, 2353.0688, 5161.869
 3033.738, 2336.8479, 5179.828
 3041.2093, 2320.5166, 5197.787
 3048.4423, 2304.0784, 5215.746
 3055.4354, 2287.5366, 5233.705
 3062.1871, 2270.8949, 5251.665
 3068.6962, 2254.1569, 5269.624
 3074.9612, 2237.3258, 5287.583
 3080.9807, 2220.4055, 5305.542
 3086.7535, 2203.3994, 5323.501
 3092.2784, 2186.3111, 5341.46
 3097.5541, 2169.1443, 5359.42
 3102.5796, 2151.9025, 5377.379
 3107.3538, 2134.5895, 5395.338
 3111.8758, 2117.2089, 5413.297
 3116.1444, 2099.7644, 5431.257
 3120.1589, 2082.2597, 5449.216
 3123.9184, 2064.6982, 5467.175
 3127.422, 2047.0842, 5485.134
 3130.6692, 2029.421, 5503.093
 3133.6591, 2011.7124, 5521.053
 3136.3911, 1993.9623, 5539.012
 3138.8646, 1976.1742, 5556.971
 3141.0792, 1958.3521, 5574.93
 3143.0344, 1940.4996, 5592.889
 3144.7297, 1922.6206, 5610.849
 3146.1648, 1904.7189, 5628.808
 3147.3394, 1886.7981, 5646.767
 3148.2532, 1868.8622, 5664.726
 3148.9061, 1850.9148, 5682.685
 3149.2979, 1832.9598, 5700.645
 3149.4285, 1815.0011, 5718.604
 3149.584, 1794.3617, 5739.244
 3150.0508, 1773.7269, 5759.884
 3150.8287, 1753.1018, 5780.524
 3151.9176, 1732.4906, 5801.164
 3153.3171, 1711.8981, 5821.804
 3155.027, 1691.3291, 5842.444
 3157.0468, 1670.7882, 5863.083
 3159.3761, 1650.2802, 5883.723
 3162.0145, 1629.8096, 5904.363
 3164.9612, 1609.3811, 5925.003
 3168.2156, 1588.9993, 5945.643
 3171.777, 1568.6688, 5966.283
 3175.6446, 1548.3945, 5986.923
 3179.8174, 1528.1808, 6007.563
 3184.2945, 1508.0324, 6028.203
 3189.075, 1487.9536, 6048.843
 3194.1577, 1467.9492, 6069.483
 3199.5414, 1448.0238, 6090.123
 3205.225, 1428.1819, 6110.763
 3211.2072, 1408.428, 6131.403
 3217.4865, 1388.7663, 6152.043
 3224.0617, 1369.2015, 6172.683
 3230.931, 1349.7384, 6193.323
 3238.0931, 1330.381, 6213.962
 3245.5462, 1311.1337, 6234.602
 3253.2888, 1292.0009, 6255.242
 3261.319, 1272.9872, 6275.882
 3269.6349, 1254.0967, 6296.522
 3278.2348, 1235.3337, 6317.162
 3287.1166, 1216.7026, 6337.802
 3296.2784, 1198.2074, 6358.442
 3305.718, 1179.8525, 6379.082
 3315.4333, 1161.6421, 6399.722
 3325.4221, 1143.5802, 6420.362
 3335.6821, 1125.671, 6441.002
 3346.211, 1107.9186, 6461.642
 3357.0064, 1090.3269, 6482.282
 3368.0658, 1072.9, 6502.922
 3379.3868, 1055.6419, 6523.562
 3390.9667, 1038.5564, 6544.202
 3402.8029, 1021.6475, 6564.841
 3414.8928, 1004.919, 6585.481
 3427.2335, 988.3747, 6606.121
 3439.8223, 972.0184, 6626.761
 3452.6567, 955.8538, 6647.401
 3465.2178, 940.0333, 6667.602
 3477.5386, 924.0253, 6687.803
 3489.6166, 907.8332, 6708.003
 3501.449, 891.4609, 6728.204
 3513.0332, 874.912, 6748.404
 3524.3665, 858.1903, 6768.605
 3535.4464, 841.2997, 6788.805
 3546.2704, 824.2439, 6809.005
 3556.8359, 807.0268, 6829.206
 3567.1406, 789.6524, 6849.406
 3577.1822, 772.1245, 6869.607
 3586.9583, 754.4472, 6889.807
 3596.4667, 736.6245, 6910.008
 3605.7054, 718.6605, 6930.208
 3614.672, 700.5591, 6950.409
 3623.3648, 682.3247, 6970.609
 3631.7815, 663.9612, 6990.81
 3639.9204, 645.4729, 7011.01
 3647.7796, 626.864, 7031.211
 3655.3573, 608.1387, 7051.411
 3662.6517, 589.3013, 7071.611
 3669.6614, 570.356, 7091.812
 3676.3844, 551.3071, 7112.012
 3682.8196, 532.159, 7132.213
 3688.9652, 512.9162, 7152.413
 3694.82, 493.5827, 7172.614
 3700.3826, 474.1633, 7192.814
 3705.6517, 454.6622, 7213.015
 3710.6262, 435.0837, 7233.215
 3715.3049, 415.4325, 7253.416
 3719.6867, 395.713, 7273.616
 3723.7706, 375.9298, 7293.817
 3727.5559, 356.0872, 7314.017
 3731.0414, 336.1896, 7334.218
 3734.2265, 316.2418, 7354.418
 3737.1105, 296.2482, 7374.619
 3739.6926, 276.2135, 7394.819
 3741.9724, 256.1421, 7415.019
 3743.9493, 236.0386, 7435.22
 3745.6228, 215.9076, 7455.42
 3746.9925, 195.7536, 7475.621
 3748.0582, 175.5813, 7495.821
 3748.8195, 155.3953, 7516.022
 3749.2763, 135.1998, 7536.222
 3749.4287, 114.9999, 7556.423
 3749.4287, -785.0001, 8456.423
 3749.2763, -805.1999, 8476.623
 3748.8195, -825.3955, 8496.824
 3748.0581, -845.5815, 8517.024
 3746.9924, -865.7538, 8537.225
 3745.6227, -885.9078, 8557.425
 3743.9493, -906.0388, 8577.626
 3741.9724, -926.1423, 8597.826
 3739.6926, -946.2137, 8618.027
 3737.1105, -966.2484, 8638.227
 3734.2265, -986.242, 8658.427
 3731.0414, -1006.1898, 8678.628
 3727.5559, -1026.0872, 8698.828
 3723.7706, -1045.9299, 8719.029
 3719.6867, -1065.7132, 8739.229
 3715.3049, -1085.4327, 8759.43
 3710.6262, -1105.0838, 8779.63
 3705.6517, -1124.6624, 8799.831
 3700.3826, -1144.1635, 8820.031
 3694.82, -1163.5829, 8840.232
 3688.9653, -1182.9164, 8860.432
 3682.8196, -1202.1592, 8880.633
 3676.3845, -1221.3073, 8900.833
 3669.6614, -1240.3562, 8921.034
 3662.6518, -1259.3015, 8941.234
 3655.3573, -1278.1389, 8961.434
 3647.7796, -1296.8642, 8981.635
 3639.9205, -1315.4731, 9001.835
 3631.7816, -1333.9614, 9022.036
 3623.3648, -1352.3249, 9042.236
 3614.6721, -1370.5594, 9062.437
 3605.7054, -1388.6607, 9082.637
 3596.4668, -1406.6247, 9102.838
 3586.9584, -1424.4474, 9123.038
 3577.1823, -1442.1247, 9143.239
 3567.1407, -1459.6526, 9163.439
 3556.836, -1477.027, 9183.639
 3546.2705, -1494.2441, 9203.84
 3535.4465, -1511.3, 9224.041
 3524.3666, -1528.1906, 9244.241
 3513.0333, -1544.9122, 9264.441
 3501.4491, -1561.4611, 9284.642
 3489.6166, -1577.8335, 9304.842
 3477.5387, -1594.0255, 9325.043
 3465.2179, -1610.0336, 9345.243
 3452.6568, -1625.854, 9365.444
 3439.8224, -1642.0186, 9386.084
 3427.2336, -1658.3749, 9406.724
 3414.8929, -1674.9192, 9427.364
 3402.803, -1691.6478, 9448.004
 3390.9668, -1708.5567, 9468.644
 3379.3869, -1725.6421, 9489.284
 3368.0659, -1742.9003, 9509.924
 3357.0065, -1760.3272, 9530.564
 3346.2111, -1777.9188, 9551.204
 3335.6822, -1795.6713, 9571.844
 3325.4221, -1813.5805, 9592.484
 3315.4334, -1831.6424, 9613.124
 3305.7181, -1849.8528, 9633.763
 3296.2785, -1868.2076, 9654.403
 3287.1167, -1886.7028, 9675.043
 3278.2349, -1905.3339, 9695.683
 3269.635, -1924.0969, 9716.323
 3261.319, -1942.9874, 9736.963
 3253.2889, -1962.0011, 9757.603
 3245.5463, -1981.1339, 9778.243
 3238.0932, -2000.3812, 9798.883
 3230.931, -2019.7386, 9819.523
 3224.0617, -2039.2017, 9840.163
 3217.4866, -2058.7666, 9860.803
 3211.2072, -2078.4281, 9881.443
 3205.225, -2098.1821, 9902.083
 3199.5415, -2118.024, 9922.723
 3194.1577, -2137.9494, 9943.363
 3189.075, -2157.9538, 9964.003
 3184.2946, -2178.0326, 9984.643
 3179.8175, -2198.1809, 10005.282
 3175.6446, -2218.3947, 10025.922
 3171.7771, -2238.669, 10046.562
 3168.2156, -2258.9995, 10067.202
 3164.9612, -2279.3813, 10087.842
 3162.0145, -2299.8098, 10108.482
 3159.3762, -2320.2802, 10129.122
 3157.0468, -2340.7884, 10149.762
 3155.0269, -2361.3293, 10170.402
 3153.3171, -2381.8983, 10191.042
 3151.9176, -2402.4908, 10211.682
 3150.8287, -2423.102, 10232.322
 3150.0508, -2443.7271, 10252.962
 3149.5839, -2464.3619, 10273.602
 3149.4284, -2485.0013, 10294.242
 3149.2968, -2502.9607, 10312.202
 3148.9025, -2520.9183, 10330.163
 3148.2452, -2538.87, 10348.127
 3147.3255, -2556.8117, 10366.092
 3146.1436, -2574.7397, 10384.059
 3144.6997, -2592.6506, 10402.028
 3142.9942, -2610.5399, 10419.999
 3141.0277, -2628.4034, 10437.97
 3138.8006, -2646.2381, 10455.943
 3136.3136, -2664.0395, 10473.918
 3133.5667, -2681.8048, 10491.894
 3130.5616, -2699.5285, 10509.871
 3127.2982, -2717.208, 10527.849
 3123.7775, -2734.8391, 10545.828
 3120.0003, -2752.4181, 10563.808
 3115.9677, -2769.9411, 10581.789
 3111.6806, -2787.4042, 10599.771
 3107.1395, -2804.8037, 10617.753
 3102.346, -2822.136, 10635.736
 3097.3011, -2839.3973, 10653.72
 3092.0058, -2856.5837, 10671.703
 3086.4613, -2873.6916, 10689.687
 3080.6688, -2890.7175, 10707.672
 3074.6292, -2907.6578, 10725.656
 3068.3447, -2924.5085, 10743.641
 3061.8159, -2941.2662, 10761.625
 3055.0446, -2957.9272, 10779.61
 3048.0322, -2974.4879, 10797.594
 3040.7805, -2990.9449, 10815.578
 3033.2908, -3007.2945, 10833.561
 3025.5649, -3023.5334, 10851.544
 3017.6044, -3039.6579, 10869.527
 3009.4111, -3055.6645, 10887.509
 3000.9868, -3071.5497, 10905.489
 2992.3332, -3087.3104, 10923.469
 2983.4527, -3102.943, 10941.448
 2974.3465, -3118.4439, 10959.426
 2965.0171, -3133.8102, 10977.403
 2955.4663, -3149.0383, 10995.378
 2945.6962, -3164.1252, 11013.352
 2935.7093, -3179.0669, 11031.324
 2925.5071, -3193.8613, 11049.295
 2915.0923, -3208.5043, 11067.264
 2904.467, -3222.9933, 11085.232
 2893.6336, -3237.3249, 11103.197
 2882.5944, -3251.4961, 11121.161
 2871.3516, -3265.5038, 11139.122
 2859.9077, -3279.3453, 11157.082
 2848.264, -3293.0184, 11175.041
 2836.4226, -3306.521, 11193
 2824.3863, -3319.8496, 11210.959
 2812.1573, -3333.002, 11228.919
 2799.7382, -3345.975, 11246.878
 2787.1319, -3358.7662, 11264.837
 2774.3408, -3371.3727, 11282.796
 2761.3679, -3383.7917, 11300.755
 2748.2155, -3396.0207, 11318.715
 2734.8867, -3408.0571, 11336.674
 2721.3843, -3419.8984, 11354.633
 2707.711, -3431.5421, 11372.592
 2693.8698, -3442.9858, 11390.552
 2679.8638, -3454.2268, 11408.511
 2665.6956, -3465.2631, 11426.47
 2651.3685, -3476.092, 11444.429
 2636.8853, -3486.7116, 11462.388
 2622.2493, -3497.1192, 11480.348
 2607.4636, -3507.3128, 11498.307
 2592.531, -3517.2905, 11516.266
 2577.4549, -3527.0499, 11534.225
 2562.2385, -3536.589, 11552.184
 2546.8849, -3545.9057, 11570.144
 2531.3976, -3554.9982, 11588.103
 2515.7795, -3563.8645, 11606.062
 2500.0343, -3572.5027, 11624.021
 2484.1649, -3580.9109, 11641.98
 2468.175, -3589.0876, 11659.94
 2452.0679, -3597.0306, 11677.899
 2435.847, -3604.7387, 11695.858
 2419.5157, -3612.21, 11713.817
 2403.0775, -3619.443, 11731.776
 2386.5357, -3626.4361, 11749.736
 2369.894, -3633.1878, 11767.695
 2353.156, -3639.6969, 11785.654
 2336.3249, -3645.9619, 11803.613
 2319.4046, -3651.9814, 11821.572
 2302.3985, -3657.7542, 11839.531
 2285.3102, -3663.2791, 11857.491
 2268.1434, -3668.5548, 11875.45
 2250.9016, -3673.5803, 11893.409
 2233.5886, -3678.3545, 11911.368
 2216.208, -3682.8765, 11929.328
 2198.7635, -3687.1451, 11947.287
 2181.2588, -3691.1596, 11965.246
 2163.6973, -3694.9191, 11983.205
 2146.0833, -3698.4227, 12001.164
 2128.4201, -3701.6699, 12019.124
 2110.7115, -3704.6598, 12037.083
 2092.9614, -3707.3918, 12055.042
 2075.1733, -3709.8653, 12073.001
 2057.3512, -3712.0799, 12090.96
 2039.4987, -3714.0351, 12108.92
 2021.6197, -3715.7304, 12126.879
 2003.718, -3717.1655, 12144.838
 1985.7972, -3718.3401, 12162.797
 1967.8613, -3719.2539, 12180.756
 1949.9139, -3719.9068, 12198.716
 1931.9589, -3720.2986, 12216.675
 1914.0002, -3720.4292, 12234.634
 1896.0408, -3720.2976, 12252.594
 1878.0832, -3719.9033, 12270.556
 1860.1315, -3719.246, 12288.52
 1842.1898, -3718.3263, 12306.485
 1824.2618, -3717.1444, 12324.452
 1806.3509, -3715.7005, 12342.421
 1788.4616, -3713.995, 12360.391
 1770.5981, -3712.0285, 12378.363
 1752.7634, -3709.8014, 12396.336
 1734.962, -3707.3144, 12414.31
 1717.1967, -3704.5675, 12432.286
 1699.473, -3701.5624, 12450.263
 1681.7935, -3698.299, 12468.241
 1664.1624, -3694.7783, 12486.22
 1646.5834, -3691.0011, 12504.201
 1629.0604, -3686.9685, 12522.182
 1611.5973, -3682.6814, 12540.163
 1594.1978, -3678.1403, 12558.146
 1576.8655, -3673.3468, 12576.129
 1559.6042, -3668.3019, 12594.112
 1542.4178, -3663.0066, 12612.096
 1525.3099, -3657.4621, 12630.08
 1508.284, -3651.6696, 12648.064
 1491.3437, -3645.63, 12666.049
 1474.493, -3639.3455, 12684.033
 1457.7353, -3632.8167, 12702.018
 1441.0743, -3626.0454, 12720.002
 1424.5136, -3619.033, 12737.986
 1408.0566, -3611.7813, 12755.97
 1391.707, -3604.2916, 12773.954
 1375.4681, -3596.5657, 12791.937
 1359.3436, -3588.6052, 12809.919
 1343.337, -3580.4119, 12827.901
 1327.4518, -3571.9876, 12845.882
 1311.6911, -3563.334, 12863.862
 1296.0585, -3554.4535, 12881.841
 1280.5576, -3545.3473, 12899.819
 1265.1913, -3536.0179, 12917.795
 1249.9632, -3526.4671, 12935.771
 1234.8763, -3516.697, 12953.745
 1219.9346, -3506.7101, 12971.717
 1205.1402, -3496.5079, 12989.688
 1190.4972, -3486.0931, 13007.657
 1176.0082, -3475.4678, 13025.624
 1161.6766, -3464.6344, 13043.59
 1147.5054, -3453.5952, 13061.553
 1133.4977, -3442.3524, 13079.515
 1119.6562, -3430.9085, 13097.474
 1105.9831, -3419.2648, 13115.433
 1092.4805, -3407.4234, 13133.393
 1079.1519, -3395.3871, 13151.352
 1065.9995, -3383.1581, 13169.311
 1053.0265, -3370.739, 13187.27
 1040.2353, -3358.1327, 13205.229
 1027.6288, -3345.3416, 13223.189
 1015.2098, -3332.3687, 13241.148
 1002.9808, -3319.2163, 13259.107
 990.9444, -3305.8875, 13277.066
 979.1031, -3292.3851, 13295.025
 967.4594, -3278.7118, 13312.985
 956.0157, -3264.8706, 13330.944
 944.7747, -3250.8646, 13348.903
 933.7384, -3236.6964, 13366.862
 922.9095, -3222.3693, 13384.821
 912.2899, -3207.8861, 13402.781
 901.8823, -3193.2501, 13420.74
 891.6887, -3178.4644, 13438.699
 881.711, -3163.5318, 13456.658
 871.9516, -3148.4557, 13474.617
 862.4125, -3133.2393, 13492.577
 853.0958, -3117.8857, 13510.536
 844.0033, -3102.3984, 13528.495
 835.137, -3086.7803, 13546.454
 826.4988, -3071.0351, 13564.413
 818.0906, -3055.1657, 13582.373
 809.9139, -3039.1758, 13600.332
 801.9709, -3023.0687, 13618.291
 794.2628, -3006.8478, 13636.25
 786.7915, -2990.5165, 13654.209
 779.5585, -2974.0783, 13672.169
 772.5654, -2957.5365, 13690.128
 765.8137, -2940.8948, 13708.087
 759.3046, -2924.1568, 13726.046
 753.0396, -2907.3257, 13744.005
 747.0201, -2890.4054, 13761.965
 741.2473, -2873.3993, 13779.924
 735.7224, -2856.311, 13797.883
 730.4467, -2839.1442, 13815.842
 725.4212, -2821.9024, 13833.801
 720.647, -2804.5894, 13851.761
 716.125, -2787.2088, 13869.72
 711.8564, -2769.7643, 13887.679
 707.8419, -2752.2596, 13905.638
 704.0824, -2734.6981, 13923.598
 700.5788, -2717.0841, 13941.557
 697.3316, -2699.4209, 13959.516
 694.3417, -2681.7123, 13977.475
 691.6097, -2663.9622, 13995.434
 689.1362, -2646.1741, 14013.393
 686.9216, -2628.352, 14031.353
 684.9664, -2610.4995, 14049.312
 683.2711, -2592.6205, 14067.271
 681.836, -2574.7188, 14085.23
 680.6614, -2556.798, 14103.189
 679.7476, -2538.8621, 14121.149
 679.0947, -2520.9147, 14139.108
 678.7029, -2502.9597, 14157.067
 678.5723, -2485.001, 14175.026
 678.4167, -2464.3616, 14195.666
 677.9498, -2443.7268, 14216.306
 677.1719, -2423.1017, 14236.946
 676.083, -2402.4905, 14257.586
 674.6835, -2381.898, 14278.226
 672.9737, -2361.329, 14298.866
 670.9538, -2340.7881, 14319.506
 668.6244, -2320.2799, 14340.146
 665.9861, -2299.8095, 14360.786
 663.0394, -2279.381, 14381.426
 659.785, -2258.9992, 14402.066
 656.2235, -2238.6687, 14422.706
 652.356, -2218.3944, 14443.346
 648.1831, -2198.1806, 14463.986
 643.706, -2178.0323, 14484.625
 638.9256, -2157.9535, 14505.265
 633.8429, -2137.9491, 14525.905
 628.4591, -2118.0237, 14546.545
 622.7756, -2098.1818, 14567.185
 616.7934, -2078.4278, 14587.825
 610.514, -2058.7663, 14608.465
 603.9389, -2039.2014, 14629.105
 597.0696, -2019.7383, 14649.745
 589.9074, -2000.3809, 14670.385
 582.4543, -1981.1336, 14691.025
 574.7117, -1962.0008, 14711.665
 566.6816, -1942.9871, 14732.305
 558.3656, -1924.0966, 14752.945
 549.7657, -1905.3336, 14773.585
 540.8839, -1886.7025, 14794.225
 531.7221, -1868.2073, 14814.865
 522.2825, -1849.8525, 14835.504
 512.5672, -1831.6421, 14856.144
 502.5785, -1813.5802, 14876.784
 492.3184, -1795.671, 14897.424
 481.7895, -1777.9185, 14918.064
 470.9941, -1760.3269, 14938.704
 459.9347, -1742.9, 14959.344
 448.6137, -1725.6418, 14979.984
 437.0338, -1708.5564, 15000.624
 425.1976, -1691.6475, 15021.264
 413.1077, -1674.9189, 15041.904
 400.767, -1658.3746, 15062.544
 388.1782, -1642.0183, 15083.184
 375.3438, -1625.8537, 15103.824
 362.7827, -1610.0333, 15124.025
 350.4619, -1594.0252, 15144.225
 338.384, -1577.8332, 15164.426
 326.5515, -1561.4608, 15184.626
 314.9673, -1544.9119, 15204.827
 303.634, -1528.1903, 15225.027
 292.5541, -1511.2997, 15245.227
 281.7301, -1494.2438, 15265.428
 271.1646, -1477.0267, 15285.628
 260.8599, -1459.6523, 15305.829
 250.8183, -1442.1244, 15326.029
 241.0422, -1424.4471, 15346.23
 231.5338, -1406.6244, 15366.43
 222.2952, -1388.6604, 15386.631
 213.3285, -1370.5591, 15406.831
 204.6358, -1352.3246, 15427.032
 196.219, -1333.9611, 15447.232
 188.0801, -1315.4728, 15467.433
 180.221, -1296.8639, 15487.633
 172.6433, -1278.1386, 15507.834
 165.3488, -1259.3012, 15528.034
 158.3392, -1240.3559, 15548.234
 151.6161, -1221.307, 15568.435
 145.181, -1202.1589, 15588.635
 139.0353, -1182.9161, 15608.836
 133.1806, -1163.5826, 15629.036
 127.618, -1144.1632, 15649.237
 122.3489, -1124.6621, 15669.437
 117.3744, -1105.0835, 15689.638
 112.6957, -1085.4324, 15709.838
 108.3139, -1065.7129, 15730.039
 104.23, -1045.9296, 15750.239
 100.4447, -1026.0869, 15770.44
 96.9592, -1006.1895, 15790.64
 93.7741, -986.2417, 15810.841
 90.8901, -966.2481, 15831.041
 88.308, -946.2134, 15851.241
 86.0282, -926.142, 15871.442
 84.0513, -906.0385, 15891.642
 82.3779, -885.9075, 15911.843
 81.0082, -865.7535, 15932.043
 79.9425, -845.5812, 15952.244
 79.1811, -825.3952, 15972.444
 78.7243, -805.1996, 15992.645
 78.5719, -784.9998, 16012.845
 78.572, 115, 16912.845
ENDTABLE

XY_TABLE_ID(2)      2 ; Outer Loop; Left Lane Segment 1
SEGMENT_XY_TABLE(2) ! table with X (m), Y (m), and calculated station S (m)
 649.4284, 1815.0012, 0
 649.276, 1794.8014, 20.2
 648.8192, 1774.6058, 40.401
 648.0578, 1754.4198, 60.601
 646.9921, 1734.2475, 80.802
 645.6224, 1714.0935, 101.002
 643.949, 1693.9625, 121.203
 641.9721, 1673.859, 141.403
 639.6923, 1653.7876, 161.604
 637.1102, 1633.7529, 181.804
 634.2262, 1613.7593, 202.005
 631.0411, 1593.8115, 222.205
 627.5556, 1573.9141, 242.406
 623.7703, 1554.0714, 262.606
 619.6864, 1534.2881, 282.807
 615.3046, 1514.5686, 303.007
 610.6259, 1494.9175, 323.207
 605.6514, 1475.3389, 343.408
 600.3823, 1455.8378, 363.608
 594.8197, 1436.4184, 383.809
 588.965, 1417.0849, 404.009
 582.8193, 1397.8421, 424.21
 576.3842, 1378.694, 444.41
 569.6611, 1359.6451, 464.611
 562.6515, 1340.6998, 484.811
 555.357, 1321.8624, 505.012
 547.7793, 1303.1371, 525.212
 539.9202, 1284.5282, 545.413
 531.7813, 1266.0399, 565.613
 523.3645, 1247.6764, 585.814
 514.6718, 1229.4419, 606.014
 505.7051, 1211.3406, 626.214
 496.4665, 1193.3766, 646.415
 486.9581, 1175.5539, 666.615
 477.182, 1157.8766, 686.816
 467.1404, 1140.3487, 707.016
 456.8357, 1122.9743, 727.217
 446.2702, 1105.7572, 747.417
 435.4462, 1088.7013, 767.618
 424.3663, 1071.8107, 787.818
 413.033, 1055.0891, 808.019
 401.4488, 1038.5402, 828.219
 389.6163, 1022.1678, 848.42
 377.5384, 1005.9758, 868.62
 365.2176, 989.9677, 888.821
 352.6565, 974.1473, 909.021
 339.8221, 957.9827, 929.661
 327.2333, 941.6264, 950.301
 314.8926, 925.0821, 970.941
 302.8027, 908.3535, 991.581
 290.9665, 891.4446, 1012.221
 279.3866, 874.3592, 1032.861
 268.0656, 857.101, 1053.501
 257.0062, 839.6741, 1074.141
 246.2108, 822.0825, 1094.781
 235.6819, 804.33, 1115.421
 225.4218, 786.4208, 1136.061
 215.4331, 768.3589, 1156.701
 205.7178, 750.1485, 1177.341
 196.2782, 731.7937, 1197.981
 187.1164, 713.2985, 1218.621
 178.2346, 694.6674, 1239.261
 169.6347, 675.9044, 1259.901
 161.3187, 657.0139, 1280.54
 153.2886, 638.0002, 1301.18
 145.546, 618.8674, 1321.82
 138.0929, 599.6201, 1342.46
 130.9307, 580.2627, 1363.1
 124.0614, 560.7996, 1383.74
 117.4863, 541.2347, 1404.38
 111.2069, 521.5732, 1425.02
 105.2247, 501.8192, 1445.66
 99.5412, 481.9773, 1466.3
 94.1574, 462.0519, 1486.94
 89.0747, 442.0475, 1507.58
 84.2943, 421.9687, 1528.22
 79.8172, 401.8204, 1548.86
 75.6443, 381.6066, 1569.5
 71.7768, 361.3323, 1590.139
 68.2153, 341.0018, 1610.78
 64.9609, 320.62, 1631.42
 62.0142, 300.1915, 1652.059
 59.3759, 279.7211, 1672.699
 57.0465, 259.2129, 1693.339
 55.0266, 238.672, 1713.979
 53.3168, 218.103, 1734.619
 51.9173, 197.5105, 1755.259
 50.8284, 176.8993, 1775.899
 50.0505, 156.2742, 1796.539
 49.5836, 135.6394, 1817.179
 49.4281, 115, 1837.819
 49.428, -784.9998, 2737.819
 49.5836, -805.6392, 2758.459
 50.0504, -826.274, 2779.099
 50.8283, -846.8991, 2799.739
 51.9172, -867.5103, 2820.378
 53.3167, -888.1028, 2841.019
 55.0266, -908.6718, 2861.658
 57.0464, -929.2127, 2882.298
 59.3757, -949.7207, 2902.938
 62.0141, -970.1913, 2923.578
 64.9608, -990.6198, 2944.218
 68.2152, -1011.0016, 2964.858
 71.7766, -1031.3321, 2985.498
 75.6442, -1051.6064, 3006.138
 79.817, -1071.8201, 3026.778
 84.2941, -1091.9685, 3047.418
 89.0746, -1112.0473, 3068.058
 94.1573, -1132.0517, 3088.698
 99.541, -1151.9771, 3109.338
 105.2246, -1171.819, 3129.978
 111.2068, -1191.5729, 3150.618
 117.4861, -1211.2346, 3171.258
 124.0613, -1230.7994, 3191.898
 130.9306, -1250.2625, 3212.537
 138.0927, -1269.6199, 3233.177
 145.5458, -1288.8672, 3253.817
 153.2884, -1308, 3274.457
 161.3186, -1327.0137, 3295.097
 169.6345, -1345.9042, 3315.737
 178.2344, -1364.6672, 3336.377
 187.1162, -1383.2983, 3357.017
 196.278, -1401.7935, 3377.657
 205.7176, -1420.1484, 3398.297
 215.4329, -1438.3588, 3418.937
 225.4217, -1456.4207, 3439.577
 235.6817, -1474.3299, 3460.217
 246.2106, -1492.0823, 3480.857
 257.006, -1509.674, 3501.497
 268.0654, -1527.1009, 3522.137
 279.3864, -1544.359, 3542.777
 290.9663, -1561.4445, 3563.416
 302.8025, -1578.3534, 3584.056
 314.8924, -1595.0819, 3604.696
 327.2331, -1611.6262, 3625.336
 339.8219, -1627.9825, 3645.976
 352.6563, -1644.1471, 3666.616
 365.2174, -1659.9676, 3686.817
 377.5382, -1675.9756, 3707.018
 389.6162, -1692.1677, 3727.218
 401.4486, -1708.54, 3747.419
 413.0328, -1725.0889, 3767.619
 424.3661, -1741.8106, 3787.82
 435.446, -1758.7012, 3808.02
 446.27, -1775.757, 3828.22
 456.8355, -1792.9741, 3848.421
 467.1402, -1810.3485, 3868.621
 477.1818, -1827.8764, 3888.822
 486.9579, -1845.5537, 3909.022
 496.4663, -1863.3764, 3929.223
 505.705, -1881.3404, 3949.423
 514.6716, -1899.4418, 3969.624
 523.3644, -1917.6762, 3989.824
 531.7811, -1936.0397, 4010.025
 539.92, -1954.528, 4030.225
 547.7792, -1973.1369, 4050.426
 555.3569, -1991.8622, 4070.626
 562.6513, -2010.6996, 4090.826
 569.661, -2029.6449, 4111.027
 576.384, -2048.6938, 4131.227
 582.8192, -2067.8419, 4151.428
 588.9648, -2087.0847, 4171.628
 594.8196, -2106.4182, 4191.829
 600.3822, -2125.8376, 4212.029
 605.6513, -2145.3387, 4232.23
 610.6258, -2164.9172, 4252.43
 615.3045, -2184.5684, 4272.631
 619.6863, -2204.2879, 4292.831
 623.7702, -2224.0711, 4313.031
 627.5555, -2243.9137, 4333.232
 631.041, -2263.8113, 4353.432
 634.2261, -2283.7591, 4373.633
 637.1101, -2303.7527, 4393.833
 639.6922, -2323.7874, 4414.034
 641.972, -2343.8588, 4434.234
 643.9489, -2363.9623, 4454.435
 645.6224, -2384.0933, 4474.635
 646.9921, -2404.2473, 4494.836
 648.0578, -2424.4196, 4515.036
 648.8191, -2444.6056, 4535.237
 649.2759, -2464.8011, 4555.437
 649.4283, -2485.001, 4575.638
 649.562, -2503.3837, 4594.021
 649.963, -2521.7624, 4612.404
 650.6313, -2540.1333, 4630.787
 651.5667, -2558.4926, 4649.17
 652.769, -2576.8362, 4667.553
 654.238, -2595.1605, 4685.936
 655.9733, -2613.4616, 4704.319
 657.9746, -2631.7354, 4722.702
 660.2414, -2649.9782, 4741.085
 662.7734, -2668.1861, 4759.469
 665.5699, -2686.3551, 4777.852
 668.6304, -2704.4817, 4796.235
 671.9542, -2722.5619, 4814.618
 675.5405, -2740.5916, 4833.001
 679.3887, -2758.5675, 4851.384
 683.498, -2776.4854, 4869.767
 687.8673, -2794.3416, 4888.15
 692.496, -2812.1325, 4906.533
 697.3829, -2829.8541, 4924.916
 702.527, -2847.5028, 4943.299
 707.9273, -2865.0748, 4961.682
 713.5825, -2882.5663, 4980.065
 719.4915, -2899.9738, 4998.449
 725.6532, -2917.2936, 5016.832
 732.066, -2934.522, 5035.215
 738.7288, -2951.655, 5053.598
 745.6398, -2968.6894, 5071.981
 752.7979, -2985.6216, 5090.364
 760.2016, -3002.4477, 5108.747
 767.8494, -3019.1646, 5127.13
 775.7393, -3035.7684, 5145.513
 783.8699, -3052.2556, 5163.896
 792.2396, -3068.623, 5182.279
 800.8462, -3084.8668, 5200.662
 809.6883, -3100.9838, 5219.046
 818.7638, -3116.9703, 5237.428
 828.071, -3132.8234, 5255.812
 837.6077, -3148.5393, 5274.195
 847.3718, -3164.1147, 5292.578
 857.3616, -3179.5467, 5310.961
 867.5746, -3194.8317, 5329.344
 878.0089, -3209.9664, 5347.727
 888.6622, -3224.9479, 5366.11
 899.5324, -3239.773, 5384.493
 910.6169, -3254.438, 5402.876
 921.9136, -3268.9406, 5421.259
 933.42, -3283.2774, 5439.643
 945.1338, -3297.4453, 5458.026
 957.0523, -3311.4412, 5476.409
 969.1731, -3325.2623, 5494.792
 981.4936, -3338.9055, 5513.175
 994.0113, -3352.3684, 5531.558
 1006.7234, -3365.6477, 5549.941
 1019.6274, -3378.7406, 5568.324
 1032.7203, -3391.6444, 5586.707
 1045.9996, -3404.3565, 5605.09
 1059.4625, -3416.8744, 5623.473
 1073.1058, -3429.1948, 5641.856
 1086.9269, -3441.3156, 5660.239
 1100.923, -3453.2343, 5678.623
 1115.0906, -3464.9478, 5697.006
 1129.4279, -3476.4547, 5715.389
 1143.9326, -3487.7537, 5733.776
 1158.6011, -3498.8415, 5752.163
 1173.4311, -3509.7166, 5770.553
 1188.4188, -3520.3762, 5788.945
 1203.5613, -3530.8181, 5807.339
 1218.8549, -3541.04, 5825.734
 1234.2969, -3551.0397, 5844.131
 1249.8835, -3560.815, 5862.529
 1265.6116, -3570.3639, 5880.929
 1281.4777, -3579.684, 5899.33
 1297.4784, -3588.7735, 5917.732
 1313.6104, -3597.6306, 5936.136
 1329.8697, -3606.253, 5954.54
 1346.2535, -3614.6389, 5972.945
 1362.7579, -3622.7866, 5991.351
 1379.3792, -3630.6942, 6009.758
 1396.1142, -3638.3599, 6028.165
 1412.959, -3645.7825, 6046.573
 1429.9101, -3652.9596, 6064.98
 1446.9637, -3659.8902, 6083.389
 1464.1165, -3666.5724, 6101.797
 1481.3648, -3673.0053, 6120.206
 1498.7043, -3679.1869, 6138.614
 1516.132, -3685.116, 6157.023
 1533.6439, -3690.7916, 6175.432
 1551.2361, -3696.2122, 6193.84
 1568.905, -3701.3764, 6212.248
 1586.6463, -3706.2831, 6230.655
 1604.4568, -3710.9313, 6249.062
 1622.3323, -3715.32, 6267.469
 1640.269, -3719.4479, 6285.874
 1658.2631, -3723.3144, 6304.279
 1676.3105, -3726.9184, 6322.683
 1694.4076, -3730.2589, 6341.086
 1712.5501, -3733.3355, 6359.487
 1730.7346, -3736.1471, 6377.888
 1748.9564, -3738.693, 6396.287
 1767.2121, -3740.973, 6414.684
 1785.4979, -3742.9862, 6433.08
 1803.8094, -3744.7322, 6451.475
 1822.143, -3746.2104, 6469.868
 1840.4943, -3747.4203, 6488.259
 1858.86, -3748.362, 6506.649
 1877.2352, -3749.0348, 6525.037
 1895.6168, -3749.4386, 6543.423
 1914.0002, -3749.5731, 6561.807
 1932.3829, -3749.4395, 6580.19
 1950.7616, -3749.0385, 6598.573
 1969.1325, -3748.3702, 6616.956
 1987.4918, -3747.4348, 6635.339
 2005.8354, -3746.2325, 6653.722
 2024.1597, -3744.7635, 6672.105
 2042.4608, -3743.0282, 6690.488
 2060.7346, -3741.0269, 6708.871
 2078.9774, -3738.7601, 6727.254
 2097.1853, -3736.2281, 6745.637
 2115.3543, -3733.4316, 6764.02
 2133.4809, -3730.3711, 6782.404
 2151.5611, -3727.0473, 6800.787
 2169.5908, -3723.461, 6819.17
 2187.5667, -3719.6128, 6837.553
 2205.4846, -3715.5035, 6855.936
 2223.3408, -3711.1342, 6874.319
 2241.1317, -3706.5055, 6892.702
 2258.8533, -3701.6186, 6911.085
 2276.502, -3696.4745, 6929.468
 2294.074, -3691.0742, 6947.851
 2311.5655, -3685.419, 6966.234
 2328.973, -3679.51, 6984.617
 2346.2928, -3673.3483, 7003.001
 2363.5212, -3666.9355, 7021.384
 2380.6542, -3660.2727, 7039.767
 2397.6886, -3653.3617, 7058.15
 2414.6208, -3646.2036, 7076.533
 2431.4469, -3638.7999, 7094.916
 2448.1638, -3631.1521, 7113.299
 2464.7676, -3623.2622, 7131.682
 2481.2548, -3615.1316, 7150.065
 2497.6222, -3606.7619, 7168.448
 2513.866, -3598.1553, 7186.831
 2529.983, -3589.3132, 7205.214
 2545.9695, -3580.2377, 7223.597
 2561.8226, -3570.9305, 7241.981
 2577.5385, -3561.3938, 7260.364
 2593.1139, -3551.6297, 7278.747
 2608.5459, -3541.6399, 7297.13
 2623.8309, -3531.4269, 7315.513
 2638.9656, -3520.9926, 7333.896
 2653.9471, -3510.3393, 7352.279
 2668.7722, -3499.4691, 7370.662
 2683.4372, -3488.3846, 7389.045
 2697.9398, -3477.0879, 7407.428
 2712.2766, -3465.5815, 7425.811
 2726.4445, -3453.8677, 7444.195
 2740.4404, -3441.9492, 7462.578
 2754.2615, -3429.8284, 7480.961
 2767.9047, -3417.5079, 7499.344
 2781.3676, -3404.9902, 7517.727
 2794.6469, -3392.2781, 7536.11
 2807.7398, -3379.3741, 7554.493
 2820.6436, -3366.2812, 7572.876
 2833.3557, -3353.0019, 7591.259
 2845.8736, -3339.539, 7609.642
 2858.194, -3325.8957, 7628.025
 2870.3148, -3312.0746, 7646.408
 2882.2335, -3298.0785, 7664.792
 2893.947, -3283.9109, 7683.174
 2905.4539, -3269.5736, 7701.558
 2916.7529, -3255.0689, 7719.944
 2927.8407, -3240.4004, 7738.332
 2938.7158, -3225.5704, 7756.722
 2949.3754, -3210.5827, 7775.114
 2959.8173, -3195.4402, 7793.508
 2970.0392, -3180.1466, 7811.903
 2980.0389, -3164.7046, 7830.3
 2989.8142, -3149.118, 7848.698
 2999.3631, -3133.3899, 7867.098
 3008.6832, -3117.5238, 7885.499
 3017.7727, -3101.5231, 7903.901
 3026.6298, -3085.3911, 7922.305
 3035.2522, -3069.1318, 7940.709
 3043.6381, -3052.748, 7959.114
 3051.7858, -3036.2436, 7977.52
 3059.6934, -3019.6223, 7995.927
 3067.3591, -3002.8873, 8014.334
 3074.7817, -2986.0425, 8032.741
 3081.9588, -2969.0914, 8051.149
 3088.8894, -2952.0378, 8069.557
 3095.5716, -2934.885, 8087.966
 3102.0045, -2917.6367, 8106.375
 3108.1861, -2900.2972, 8124.783
 3114.1152, -2882.8695, 8143.192
 3119.7908, -2865.3576, 8161.6
 3125.2114, -2847.7654, 8180.009
 3130.3756, -2830.0965, 8198.417
 3135.2823, -2812.3552, 8216.824
 3139.9305, -2794.5447, 8235.231
 3144.3192, -2776.6692, 8253.638
 3148.4471, -2758.7325, 8272.043
 3152.3136, -2740.7384, 8290.448
 3155.9176, -2722.691, 8308.852
 3159.2581, -2704.5939, 8327.255
 3162.3347, -2686.4514, 8345.656
 3165.1463, -2668.2669, 8364.057
 3167.6922, -2650.0451, 8382.456
 3169.9722, -2631.7894, 8400.853
 3171.9854, -2613.5036, 8419.249
 3173.7314, -2595.1921, 8437.644
 3175.2096, -2576.8585, 8456.037
 3176.4195, -2558.5072, 8474.428
 3177.3612, -2540.1415, 8492.818
 3178.034, -2521.7663, 8511.205
 3178.4378, -2503.3847, 8529.591
 3178.5723, -2485.0013, 8547.975
 3178.7247, -2464.8014, 8568.176
 3179.1815, -2444.6059, 8588.377
 3179.9428, -2424.4199, 8608.577
 3181.0085, -2404.2476, 8628.777
 3182.3782, -2384.0936, 8648.978
 3184.0517, -2363.9626, 8669.178
 3186.0286, -2343.8591, 8689.379
 3188.3084, -2323.7877, 8709.579
 3190.8905, -2303.753, 8729.78
 3193.7745, -2283.7594, 8749.98
 3196.9596, -2263.8116, 8770.181
 3200.4451, -2243.914, 8790.381
 3204.2304, -2224.0714, 8810.582
 3208.3143, -2204.2882, 8830.782
 3212.6961, -2184.5687, 8850.982
 3217.3748, -2164.9175, 8871.183
 3222.3493, -2145.339, 8891.383
 3227.6184, -2125.8379, 8911.584
 3233.181, -2106.4185, 8931.784
 3239.0358, -2087.085, 8951.985
 3245.1814, -2067.8422, 8972.185
 3251.6166, -2048.6941, 8992.386
 3258.3396, -2029.6452, 9012.586
 3265.3493, -2010.6999, 9032.787
 3272.6437, -1991.8625, 9052.987
 3280.2214, -1973.1372, 9073.188
 3288.0806, -1954.5283, 9093.388
 3296.2195, -1936.04, 9113.588
 3304.6362, -1917.6765, 9133.789
 3313.329, -1899.4421, 9153.989
 3322.2956, -1881.3407, 9174.19
 3331.5343, -1863.3767, 9194.39
 3341.0427, -1845.554, 9214.591
 3350.8188, -1827.8767, 9234.791
 3360.8604, -1810.3488, 9254.992
 3371.1651, -1792.9744, 9275.192
 3381.7306, -1775.7573, 9295.393
 3392.5546, -1758.7015, 9315.593
 3403.6345, -1741.8109, 9335.794
 3414.9678, -1725.0892, 9355.994
 3426.552, -1708.5403, 9376.194
 3438.3844, -1692.168, 9396.395
 3450.4624, -1675.9759, 9416.595
 3462.7832, -1659.9679, 9436.796
 3475.3443, -1644.1474, 9456.997
 3488.1787, -1627.9828, 9477.637
 3500.7675, -1611.6265, 9498.277
 3513.1082, -1595.0822, 9518.917
 3525.1981, -1578.3537, 9539.557
 3537.0343, -1561.4448, 9560.197
 3548.6142, -1544.3593, 9580.837
 3559.9352, -1527.1012, 9601.476
 3570.9946, -1509.6743, 9622.116
 3581.79, -1492.0826, 9642.756
 3592.3189, -1474.3302, 9663.396
 3602.5789, -1456.421, 9684.036
 3612.5677, -1438.3591, 9704.676
 3622.283, -1420.1487, 9725.316
 3631.7226, -1401.7938, 9745.956
 3640.8844, -1383.2986, 9766.596
 3649.7662, -1364.6675, 9787.236
 3658.3661, -1345.9045, 9807.876
 3666.682, -1327.014, 9828.516
 3674.7122, -1308.0003, 9849.156
 3682.4548, -1288.8675, 9869.796
 3689.9079, -1269.6202, 9890.436
 3697.07, -1250.2628, 9911.076
 3703.9393, -1230.7997, 9931.715
 3710.5145, -1211.2349, 9952.355
 3716.7938, -1191.5732, 9972.996
 3722.776, -1171.8193, 9993.635
 3728.4596, -1151.9774, 10014.275
 3733.8433, -1132.052, 10034.915
 3738.926, -1112.0476, 10055.555
 3743.7065, -1091.9688, 10076.195
 3748.1836, -1071.8204, 10096.835
 3752.3564, -1051.6067, 10117.475
 3756.224, -1031.3324, 10138.115
 3759.7854, -1011.0019, 10158.755
 3763.0398, -990.6201, 10179.395
 3765.9865, -970.1916, 10200.035
 3768.6249, -949.721, 10220.675
 3770.9542, -929.213, 10241.315
 3772.974, -908.6721, 10261.955
 3774.6839, -888.1031, 10282.595
 3776.0834, -867.5106, 10303.235
 3777.1723, -846.8994, 10323.874
 3777.9502, -826.2743, 10344.514
 3778.417, -805.6395, 10365.154
 3778.5726, -785.0001, 10385.794
 3778.5727, 114.9999, 11285.794
 3778.4171, 135.6393, 11306.434
 3777.9502, 156.2741, 11327.074
 3777.1723, 176.8992, 11347.714
 3776.0834, 197.5104, 11368.354
 3774.6839, 218.1029, 11388.994
 3772.9741, 238.6719, 11409.634
 3770.9542, 259.2128, 11430.274
 3768.6248, 279.721, 11450.914
 3765.9865, 300.1914, 11471.554
 3763.0398, 320.6199, 11492.194
 3759.7854, 341.0017, 11512.834
 3756.2239, 361.3322, 11533.474
 3752.3564, 381.6065, 11554.114
 3748.1835, 401.8203, 11574.754
 3743.7064, 421.9686, 11595.393
 3738.926, 442.0474, 11616.033
 3733.8433, 462.0518, 11636.673
 3728.4595, 481.9772, 11657.313
 3722.776, 501.8191, 11677.953
 3716.7938, 521.5731, 11698.593
 3710.5144, 541.2346, 11719.233
 3703.9393, 560.7995, 11739.873
 3697.07, 580.2626, 11760.513
 3689.9078, 599.62, 11781.153
 3682.4547, 618.8673, 11801.793
 3674.7121, 638.0001, 11822.433
 3666.682, 657.0138, 11843.073
 3658.366, 675.9043, 11863.713
 3649.7661, 694.6673, 11884.353
 3640.8843, 713.2984, 11904.993
 3631.7225, 731.7936, 11925.633
 3622.2829, 750.1484, 11946.272
 3612.5676, 768.3588, 11966.912
 3602.5789, 786.4207, 11987.552
 3592.3188, 804.3299, 12008.192
 3581.7899, 822.0824, 12028.832
 3570.9945, 839.674, 12049.472
 3559.9351, 857.1009, 12070.112
 3548.6141, 874.3591, 12090.752
 3537.0342, 891.4445, 12111.392
 3525.198, 908.3534, 12132.032
 3513.1081, 925.082, 12152.672
 3500.7674, 941.6263, 12173.312
 3488.1786, 957.9826, 12193.952
 3475.3442, 974.1472, 12214.592
 3462.7831, 989.9676, 12234.793
 3450.4623, 1005.9757, 12254.993
 3438.3844, 1022.1677, 12275.194
 3426.5519, 1038.5401, 12295.394
 3414.9677, 1055.089, 12315.595
 3403.6344, 1071.8106, 12335.795
 3392.5545, 1088.7012, 12355.995
 3381.7305, 1105.7571, 12376.196
 3371.165, 1122.9742, 12396.396
 3360.8603, 1140.3486, 12416.597
 3350.8187, 1157.8765, 12436.797
 3341.0426, 1175.5538, 12456.998
 3331.5342, 1193.3765, 12477.198
 3322.2956, 1211.3405, 12497.399
 3313.3289, 1229.4418, 12517.599
 3304.6362, 1247.6763, 12537.8
 3296.2194, 1266.0398, 12558
 3288.0805, 1284.5281, 12578.201
 3280.2214, 1303.137, 12598.401
 3272.6437, 1321.8623, 12618.602
 3265.3492, 1340.6997, 12638.802
 3258.3396, 1359.645, 12659.002
 3251.6165, 1378.6939, 12679.203
 3245.1814, 1397.842, 12699.403
 3239.0357, 1417.0848, 12719.604
 3233.181, 1436.4183, 12739.804
 3227.6184, 1455.8377, 12760.005
 3222.3493, 1475.3388, 12780.205
 3217.3748, 1494.9174, 12800.406
 3212.6961, 1514.5685, 12820.606
 3208.3143, 1534.288, 12840.807
 3204.2304, 1554.0713, 12861.007
 3200.4451, 1573.914, 12881.208
 3196.9596, 1593.8114, 12901.408
 3193.7745, 1613.7592, 12921.609
 3190.8905, 1633.7528, 12941.809
 3188.3084, 1653.7875, 12962.009
 3186.0286, 1673.8589, 12982.21
 3184.0517, 1693.9624, 13002.41
 3182.3783, 1714.0934, 13022.611
 3181.0086, 1734.2474, 13042.811
 3179.9429, 1754.4197, 13063.012
 3179.1815, 1774.6057, 13083.212
 3178.7247, 1794.8013, 13103.413
 3178.5723, 1815.0011, 13123.613
 3178.4388, 1833.3838, 13141.996
 3178.0378, 1851.7625, 13160.38
 3177.3695, 1870.1334, 13178.763
 3176.4341, 1888.4927, 13197.146
 3175.2318, 1906.8363, 13215.529
 3173.7628, 1925.1606, 13233.912
 3172.0275, 1943.4617, 13252.295
 3170.0262, 1961.7355, 13270.678
 3167.7594, 1979.9783, 13289.061
 3165.2274, 1998.1862, 13307.444
 3162.4309, 2016.3552, 13325.827
 3159.3704, 2034.4818, 13344.21
 3156.0466, 2052.562, 13362.593
 3152.4603, 2070.5917, 13380.976
 3148.6121, 2088.5676, 13399.36
 3144.5028, 2106.4855, 13417.743
 3140.1335, 2124.3417, 13436.126
 3135.5048, 2142.1326, 13454.509
 3130.6179, 2159.8542, 13472.892
 3125.4738, 2177.5029, 13491.275
 3120.0735, 2195.0749, 13509.658
 3114.4183, 2212.5664, 13528.041
 3108.5093, 2229.9739, 13546.424
 3102.3476, 2247.2937, 13564.807
 3095.9348, 2264.5221, 13583.191
 3089.272, 2281.6551, 13601.573
 3082.361, 2298.6895, 13619.956
 3075.2029, 2315.6217, 13638.339
 3067.7992, 2332.4478, 13656.722
 3060.1514, 2349.1647, 13675.106
 3052.2615, 2365.7685, 13693.489
 3044.1309, 2382.2557, 13711.872
 3035.7612, 2398.6231, 13730.255
 3027.1546, 2414.8669, 13748.638
 3018.3125, 2430.9839, 13767.021
 3009.237, 2446.9704, 13785.404
 2999.9298, 2462.8235, 13803.787
 2990.3931, 2478.5394, 13822.17
 2980.629, 2494.1148, 13840.553
 2970.6392, 2509.5468, 13858.937
 2960.4262, 2524.8318, 13877.32
 2949.9919, 2539.9665, 13895.703
 2939.3386, 2554.948, 13914.086
 2928.4684, 2569.7731, 13932.469
 2917.3839, 2584.4381, 13950.852
 2906.0872, 2598.9407, 13969.235
 2894.5808, 2613.2775, 13987.618
 2882.867, 2627.4454, 14006.001
 2870.9485, 2641.4413, 14024.384
 2858.8277, 2655.2624, 14042.767
 2846.5072, 2668.9056, 14061.15
 2833.9895, 2682.3685, 14079.534
 2821.2774, 2695.6478, 14097.917
 2808.3734, 2708.7407, 14116.3
 2795.2805, 2721.6445, 14134.683
 2782.0012, 2734.3566, 14153.066
 2768.5383, 2746.8745, 14171.449
 2754.895, 2759.1949, 14189.832
 2741.0739, 2771.3157, 14208.215
 2727.0778, 2783.2344, 14226.598
 2712.9102, 2794.9479, 14244.981
 2698.5729, 2806.4548, 14263.365
 2684.0682, 2817.7538, 14281.751
 2669.3997, 2828.8416, 14300.139
 2654.5697, 2839.7167, 14318.529
 2639.582, 2850.3763, 14336.921
 2624.4395, 2860.8182, 14355.314
 2609.1459, 2871.0401, 14373.71
 2593.7039, 2881.0398, 14392.107
 2578.1173, 2890.8151, 14410.505
 2562.3892, 2900.364, 14428.905
 2546.5231, 2909.6841, 14447.306
 2530.5224, 2918.7736, 14465.708
 2514.3904, 2927.6307, 14484.112
 2498.1311, 2936.2531, 14502.516
 2481.7473, 2944.639, 14520.921
 2465.2429, 2952.7867, 14539.327
 2448.6216, 2960.6943, 14557.733
 2431.8866, 2968.36, 14576.14
 2415.0418, 2975.7826, 14594.548
 2398.0907, 2982.9597, 14612.956
 2381.0371, 2989.8903, 14631.364
 2363.8843, 2996.5725, 14649.773
 2346.636, 3003.0054, 14668.181
 2329.2965, 3009.187, 14686.59
 2311.8688, 3015.1161, 14704.998
 2294.3569, 3020.7917, 14723.407
 2276.7647, 3026.2123, 14741.816
 2259.0958, 3031.3765, 14760.224
 2241.3545, 3036.2832, 14778.631
 2223.544, 3040.9314, 14797.038
 2205.6685, 3045.3201, 14815.444
 2187.7318, 3049.448, 14833.85
 2169.7377, 3053.3145, 14852.255
 2151.6903, 3056.9185, 14870.659
 2133.5932, 3060.259, 14889.061
 2115.4507, 3063.3356, 14907.463
 2097.2662, 3066.1472, 14925.863
 2079.0444, 3068.6931, 14944.262
 2060.7887, 3070.9731, 14962.66
 2042.5029, 3072.9863, 14981.056
 2024.1914, 3074.7323, 14999.451
 2005.8578, 3076.2105, 15017.844
 1987.5065, 3077.4204, 15036.235
 1969.1408, 3078.3621, 15054.625
 1950.7656, 3079.0349, 15073.012
 1932.384, 3079.4387, 15091.398
 1914.0006, 3079.5732, 15109.782
 1895.6178, 3079.4395, 15128.165
 1877.2391, 3079.0385, 15146.548
 1858.8682, 3078.3702, 15164.932
 1840.5089, 3077.4348, 15183.315
 1822.1653, 3076.2325, 15201.698
 1803.841, 3074.7635, 15220.081
 1785.5399, 3073.0282, 15238.464
 1767.2661, 3071.0269, 15256.847
 1749.0233, 3068.7601, 15275.23
 1730.8154, 3066.2281, 15293.613
 1712.6464, 3063.4316, 15311.996
 1694.5198, 3060.3711, 15330.379
 1676.4396, 3057.0473, 15348.762
 1658.4099, 3053.461, 15367.145
 1640.434, 3049.6128, 15385.529
 1622.5161, 3045.5035, 15403.912
 1604.6599, 3041.1342, 15422.295
 1586.869, 3036.5055, 15440.678
 1569.1474, 3031.6186, 15459.061
 1551.4987, 3026.4745, 15477.444
 1533.9267, 3021.0742, 15495.827
 1516.4352, 3015.419, 15514.21
 1499.0277, 3009.51, 15532.593
 1481.7079, 3003.3483, 15550.976
 1464.4795, 2996.9355, 15569.359
 1447.3465, 2990.2727, 15587.742
 1430.3121, 2983.3617, 15606.125
 1413.3799, 2976.2036, 15624.508
 1396.5538, 2968.7999, 15642.891
 1379.8369, 2961.1521, 15661.275
 1363.2331, 2953.2622, 15679.658
 1346.7459, 2945.1316, 15698.041
 1330.3785, 2936.7619, 15716.424
 1314.1347, 2928.1553, 15734.807
 1298.0177, 2919.3132, 15753.19
 1282.0312, 2910.2377, 15771.573
 1266.1781, 2900.9305, 15789.956
 1250.4622, 2891.3938, 15808.339
 1234.8868, 2881.6297, 15826.722
 1219.4548, 2871.6399, 15845.105
 1204.1698, 2861.4269, 15863.489
 1189.0351, 2850.9926, 15881.872
 1174.0536, 2840.3393, 15900.255
 1159.2285, 2829.4691, 15918.638
 1144.5635, 2818.3846, 15937.021
 1130.0609, 2807.0879, 15955.404
 1115.7241, 2795.5815, 15973.787
 1101.5562, 2783.8677, 15992.17
 1087.5603, 2771.9492, 16010.553
 1073.7392, 2759.8284, 16028.936
 1060.096, 2747.5079, 16047.319
 1046.6331, 2734.9902, 16065.702
 1033.3538, 2722.2781, 16084.086
 1020.2609, 2709.3741, 16102.469
 1007.3571, 2696.2812, 16120.852
 994.645, 2683.0019, 16139.235
 982.1271, 2669.539, 16157.618
 969.8067, 2655.8957, 16176.001
 957.6859, 2642.0746, 16194.384
 945.7672, 2628.0785, 16212.767
 934.0537, 2613.9109, 16231.15
 922.5468, 2599.5736, 16249.534
 911.2478, 2585.0689, 16267.92
 900.16, 2570.4004, 16286.308
 889.2849, 2555.5704, 16304.698
 878.6253, 2540.5827, 16323.09
 868.1834, 2525.4402, 16341.483
 857.9615, 2510.1466, 16359.879
 847.9618, 2494.7046, 16378.276
 838.1865, 2479.118, 16396.674
 828.6376, 2463.3899, 16415.074
 819.3175, 2447.5238, 16433.475
 810.228, 2431.5231, 16451.877
 801.3709, 2415.3911, 16470.28
 792.7485, 2399.1318, 16488.685
 784.3626, 2382.748, 16507.09
 776.2149, 2366.2436, 16525.496
 768.3073, 2349.6223, 16543.902
 760.6416, 2332.8873, 16562.309
 753.219, 2316.0425, 16580.717
 746.0419, 2299.0914, 16599.125
 739.1113, 2282.0378, 16617.533
 732.4291, 2264.885, 16635.941
 725.9962, 2247.6367, 16654.35
 719.8146, 2230.2972, 16672.759
 713.8855, 2212.8695, 16691.167
 708.2099, 2195.3576, 16709.576
 702.7893, 2177.7654, 16727.985
 697.6251, 2160.0965, 16746.393
 692.7184, 2142.3552, 16764.8
 688.0702, 2124.5447, 16783.207
 683.6815, 2106.6692, 16801.613
 679.5536, 2088.7325, 16820.019
 675.6871, 2070.7384, 16838.424
 672.0831, 2052.691, 16856.827
 668.7426, 2034.5939, 16875.23
 665.666, 2016.4514, 16893.632
 662.8544, 1998.2669, 16912.032
 660.3085, 1980.0451, 16930.431
 658.0285, 1961.7894, 16948.829
 656.0153, 1943.5036, 16967.225
 654.2693, 1925.1921, 16985.62
 652.7911, 1906.8585, 17004.013
 651.5812, 1888.5072, 17022.404
 650.6395, 1870.1415, 17040.794
 649.9667, 1851.7663, 17059.181
 649.5629, 1833.3847, 17077.567
 649.4284, 1815.0012, 17095.951
ENDTABLE

XY_TABLE_ID(3)      3 ; Interior Loop; Middle Lane Segment 1
SEGMENT_XY_TABLE(3) ! table with X (m), Y (m), and calculated station S (m)
 82.2296, 114.9999, 0
 82.3815, 135.1448, 20.145
 82.8372, 155.2849, 40.291
 83.5965, 175.4161, 60.436
 84.6592, 195.5332, 80.581
 86.0252, 215.6321, 100.727
 87.6941, 235.7081, 120.872
 89.6655, 255.7567, 141.017
 91.9391, 275.7734, 161.163
 94.5142, 295.7534, 181.308
 97.3903, 315.6924, 201.453
 100.5667, 335.5857, 221.599
 104.0427, 355.4289, 241.744
 107.8176, 375.2174, 261.889
 111.8904, 394.9466, 282.034
 116.2603, 414.6122, 302.18
 120.9262, 434.21, 322.325
 125.8871, 453.7348, 342.47
 131.1418, 473.1827, 362.616
 136.6892, 492.5491, 382.761
 142.528, 511.8297, 402.906
 148.6568, 531.0201, 423.052
 155.0744, 550.116, 443.197
 161.7791, 569.1128, 463.342
 168.7696, 588.0063, 483.488
 176.0442, 606.7923, 503.633
 183.6012, 625.4665, 523.778
 191.4389, 644.0246, 543.923
 199.5556, 662.4624, 564.069
 207.9493, 680.7758, 584.214
 216.6183, 698.9604, 604.359
 225.5605, 717.0123, 624.505
 234.7739, 734.9273, 644.65
 244.2564, 752.7013, 664.795
 254.0058, 770.3304, 684.941
 264.02, 787.8104, 705.086
 274.2965, 805.1374, 725.231
 284.8332, 822.3075, 745.377
 295.6276, 839.3167, 765.522
 306.6773, 856.1612, 785.667
 317.9797, 872.8373, 805.813
 329.5322, 889.341, 825.958
 341.3324, 905.6686, 846.103
 353.3774, 921.8164, 866.249
 365.6644, 937.7808, 886.394
 378.1913, 953.558, 906.539
 391.06, 969.7659, 927.235
 403.6824, 986.1659, 947.93
 416.0562, 1002.7544, 968.625
 428.1783, 1019.5276, 989.32
 440.0462, 1036.4817, 1010.015
 451.657, 1053.6128, 1030.71
 463.0082, 1070.9171, 1051.405
 474.0972, 1088.3906, 1072.1
 484.9214, 1106.0292, 1092.795
 495.4785, 1123.8291, 1113.491
 505.7659, 1141.7862, 1134.186
 515.7814, 1159.8963, 1154.881
 525.5227, 1178.1554, 1175.576
 534.9875, 1196.5593, 1196.271
 544.1738, 1215.1039, 1216.966
 553.0793, 1233.7848, 1237.661
 561.7021, 1252.598, 1258.356
 570.0403, 1271.5389, 1279.051
 578.092, 1290.6035, 1299.746
 585.8552, 1309.7874, 1320.442
 593.3283, 1329.086, 1341.137
 600.5095, 1348.4953, 1361.832
 607.3972, 1368.0104, 1382.527
 613.9899, 1387.6274, 1403.222
 620.286, 1407.3415, 1423.917
 626.2842, 1427.1484, 1444.612
 631.9829, 1447.0433, 1465.307
 637.3811, 1467.0219, 1486.002
 642.4773, 1487.0797, 1506.697
 647.2706, 1507.2121, 1527.392
 651.7597, 1527.4144, 1548.088
 655.9437, 1547.6822, 1568.783
 659.8216, 1568.0107, 1589.478
 663.3925, 1588.3956, 1610.173
 666.6556, 1608.8318, 1630.868
 669.6102, 1629.3148, 1651.563
 672.2556, 1649.8401, 1672.258
 674.5911, 1670.4029, 1692.953
 676.6164, 1690.9988, 1713.648
 678.3308, 1711.6227, 1734.343
 679.7341, 1732.2701, 1755.039
 680.8259, 1752.9365, 1775.734
 681.6059, 1773.6167, 1796.429
 682.0739, 1794.3066, 1817.124
 682.2299, 1815.0012, 1837.819
 682.361, 1832.9073, 1855.726
 682.7543, 1850.812, 1873.635
 683.4096, 1868.7103, 1891.545
 684.3265, 1886.599, 1909.457
 685.5049, 1904.4739, 1927.371
 686.9445, 1922.3316, 1945.286
 688.6449, 1940.1678, 1963.204
 690.6056, 1957.9786, 1981.122
 692.8261, 1975.7604, 1999.042
 695.3058, 1993.5091, 2016.963
 698.0442, 2011.2214, 2034.886
 701.0407, 2028.8929, 2052.809
 704.2943, 2046.5201, 2070.734
 707.8045, 2064.0986, 2088.66
 711.5703, 2081.6255, 2106.587
 715.5912, 2099.0968, 2124.515
 719.8655, 2116.5078, 2142.443
 724.393, 2133.8561, 2160.372
 729.1723, 2151.1368, 2178.302
 734.2023, 2168.347, 2196.232
 739.4819, 2185.4826, 2214.162
 745.0101, 2202.5398, 2232.093
 750.7857, 2219.5155, 2250.024
 756.8071, 2236.4054, 2267.955
 763.0734, 2253.2063, 2285.887
 769.5825, 2269.9145, 2303.818
 776.334, 2286.5263, 2321.75
 783.3257, 2303.0379, 2339.68
 790.556, 2319.4463, 2357.611
 798.0234, 2335.7475, 2375.541
 805.7266, 2351.9385, 2393.471
 813.6636, 2368.0151, 2411.401
 821.8328, 2383.9745, 2429.329
 830.2321, 2399.8126, 2447.257
 838.8601, 2415.5268, 2465.184
 847.7147, 2431.113, 2483.11
 856.7937, 2446.5681, 2501.034
 866.0958, 2461.8891, 2518.958
 875.6182, 2477.0722, 2536.88
 885.3595, 2492.1144, 2554.801
 895.317, 2507.0121, 2572.72
 905.489, 2521.7626, 2590.638
 915.8732, 2536.3626, 2608.554
 926.467, 2550.8086, 2626.468
 937.2685, 2565.098, 2644.381
 948.2751, 2579.2272, 2662.291
 959.4848, 2593.1936, 2680.2
 970.8948, 2606.9941, 2698.106
 982.5041, 2620.6269, 2716.012
 994.3103, 2634.0893, 2733.918
 1006.3111, 2647.3786, 2751.824
 1018.5038, 2660.4919, 2769.73
 1030.8861, 2673.4267, 2787.636
 1043.4552, 2686.1798, 2805.542
 1056.2083, 2698.749, 2823.448
 1069.1428, 2711.1311, 2841.354
 1082.2563, 2723.324, 2859.26
 1095.5455, 2735.3249, 2877.166
 1109.0079, 2747.131, 2895.072
 1122.6409, 2758.7403, 2912.978
 1136.4409, 2770.15, 2930.884
 1150.4055, 2781.3578, 2948.79
 1164.5318, 2792.3613, 2966.696
 1178.8163, 2803.1582, 2984.602
 1193.2566, 2813.7462, 3002.508
 1207.8493, 2824.1231, 3020.414
 1222.5912, 2834.2866, 3038.32
 1237.4796, 2844.2347, 3056.226
 1252.5111, 2853.9651, 3074.132
 1267.6824, 2863.4759, 3092.038
 1282.9904, 2872.7652, 3109.944
 1298.4319, 2881.8307, 3127.85
 1314.0037, 2890.6706, 3145.756
 1329.7023, 2899.2832, 3163.662
 1345.5247, 2907.6665, 3181.568
 1361.4672, 2915.8189, 3199.474
 1377.5266, 2923.7386, 3217.38
 1393.6994, 2931.4237, 3235.286
 1409.9824, 2938.873, 3253.192
 1426.372, 2946.0846, 3271.098
 1442.8646, 2953.0569, 3289.004
 1459.457, 2959.7886, 3306.91
 1476.1455, 2966.2785, 3324.816
 1492.9267, 2972.5249, 3342.722
 1509.797, 2978.5266, 3360.628
 1526.7527, 2984.2823, 3378.534
 1543.7903, 2989.7908, 3396.44
 1560.9063, 2995.0509, 3414.346
 1578.097, 3000.0615, 3432.252
 1595.3587, 3004.8216, 3450.158
 1612.6878, 3009.3301, 3468.064
 1630.0807, 3013.5861, 3485.97
 1647.5336, 3017.5887, 3503.876
 1665.043, 3021.3371, 3521.782
 1682.6047, 3024.8303, 3539.688
 1700.2157, 3028.0679, 3557.594
 1717.8718, 3031.0489, 3575.5
 1735.5693, 3033.7728, 3593.406
 1753.3048, 3036.2391, 3611.312
 1771.0741, 3038.4471, 3629.218
 1788.8738, 3040.3964, 3647.124
 1806.6997, 3042.0867, 3665.03
 1824.5485, 3043.5176, 3682.936
 1842.4161, 3044.6887, 3700.842
 1860.299, 3045.5998, 3718.748
 1878.1931, 3046.2508, 3736.654
 1896.0949, 3046.6413, 3754.56
 1914.0005, 3046.7715, 3772.466
 1931.9066, 3046.6406, 3790.373
 1949.8113, 3046.2473, 3808.282
 1967.7096, 3045.592, 3826.192
 1985.5983, 3044.6751, 3844.105
 2003.4732, 3043.4967, 3862.018
 2021.3309, 3042.0571, 3879.934
 2039.1671, 3040.3567, 3897.851
 2056.9779, 3038.396, 3915.769
 2074.7597, 3036.1755, 3933.689
 2092.5084, 3033.6958, 3951.61
 2110.2207, 3030.9574, 3969.533
 2127.8922, 3027.9609, 3987.457
 2145.5194, 3024.7073, 4005.382
 2163.0979, 3021.1971, 4023.307
 2180.6248, 3017.4313, 4041.234
 2198.0961, 3013.4104, 4059.162
 2215.5071, 3009.1361, 4077.09
 2232.8554, 3004.6086, 4095.02
 2250.1361, 2999.8293, 4112.949
 2267.3463, 2994.7993, 4130.879
 2284.4819, 2989.5197, 4148.81
 2301.5391, 2983.9915, 4166.74
 2318.5148, 2978.2159, 4184.672
 2335.4047, 2972.1945, 4202.603
 2352.2056, 2965.9282, 4220.534
 2368.9138, 2959.4191, 4238.466
 2385.5256, 2952.6676, 4256.397
 2402.0372, 2945.6759, 4274.328
 2418.4456, 2938.4456, 4292.259
 2434.7468, 2930.9782, 4310.189
 2450.9378, 2923.275, 4328.119
 2467.0144, 2915.338, 4346.048
 2482.9738, 2907.1688, 4363.977
 2498.8119, 2898.7695, 4381.904
 2514.5261, 2890.1415, 4399.831
 2530.1123, 2881.2869, 4417.757
 2545.5674, 2872.2079, 4435.682
 2560.8884, 2862.9058, 4453.605
 2576.0715, 2853.3834, 4471.527
 2591.1137, 2843.6421, 4489.448
 2606.0114, 2833.6846, 4507.367
 2620.7619, 2823.5126, 4525.285
 2635.3619, 2813.1284, 4543.201
 2649.8079, 2802.5346, 4561.116
 2664.0973, 2791.7331, 4579.028
 2678.2265, 2780.7265, 4596.938
 2692.1929, 2769.5168, 4614.847
 2705.9934, 2758.1068, 4632.754
 2719.6262, 2746.4975, 4650.66
 2733.0886, 2734.6913, 4668.566
 2746.3779, 2722.6905, 4686.472
 2759.4912, 2710.4978, 4704.377
 2772.426, 2698.1155, 4722.284
 2785.1791, 2685.5464, 4740.19
 2797.7483, 2672.7933, 4758.096
 2810.1304, 2659.8588, 4776.001
 2822.3233, 2646.7453, 4793.908
 2834.3242, 2633.4561, 4811.814
 2846.1303, 2619.9937, 4829.719
 2857.7396, 2606.3607, 4847.626
 2869.1493, 2592.5607, 4865.532
 2880.3571, 2578.5961, 4883.438
 2891.3606, 2564.4698, 4901.344
 2902.1575, 2550.1853, 4919.25
 2912.7455, 2535.745, 4937.156
 2923.1224, 2521.1523, 4955.062
 2933.2859, 2506.4104, 4972.968
 2943.234, 2491.522, 4990.874
 2952.9644, 2476.4905, 5008.78
 2962.4752, 2461.3192, 5026.686
 2971.7645, 2446.0112, 5044.592
 2980.83, 2430.5697, 5062.498
 2989.6699, 2414.9979, 5080.404
 2998.2825, 2399.2993, 5098.31
 3006.6658, 2383.4769, 5116.216
 3014.8182, 2367.5344, 5134.122
 3022.7379, 2351.475, 5152.028
 3030.423, 2335.3022, 5169.934
 3037.8723, 2319.0192, 5187.84
 3045.0839, 2302.6296, 5205.746
 3052.0562, 2286.137, 5223.652
 3058.7879, 2269.5446, 5241.558
 3065.2778, 2252.8561, 5259.464
 3071.5242, 2236.0749, 5277.37
 3077.5259, 2219.2046, 5295.276
 3083.2816, 2202.2489, 5313.182
 3088.7901, 2185.2113, 5331.088
 3094.0502, 2168.0953, 5348.994
 3099.0608, 2150.9046, 5366.9
 3103.8209, 2133.6429, 5384.806
 3108.3294, 2116.3138, 5402.712
 3112.5854, 2098.9209, 5420.618
 3116.588, 2081.468, 5438.524
 3120.3364, 2063.9586, 5456.43
 3123.8296, 2046.3969, 5474.336
 3127.0672, 2028.7859, 5492.242
 3130.0482, 2011.1298, 5510.148
 3132.7721, 1993.4323, 5528.054
 3135.2384, 1975.6968, 5545.96
 3137.4464, 1957.9275, 5563.866
 3139.3957, 1940.1278, 5581.772
 3141.086, 1922.3019, 5599.678
 3142.5169, 1904.4531, 5617.584
 3143.688, 1886.5855, 5635.49
 3144.5991, 1868.7026, 5653.396
 3145.2501, 1850.8085, 5671.302
 3145.6406, 1832.9067, 5689.208
 3145.7708, 1815.0011, 5707.114
 3145.9268, 1794.3065, 5727.809
 3146.3948, 1773.6166, 5748.504
 3147.1748, 1752.9364, 5769.199
 3148.2666, 1732.27, 5789.894
 3149.6699, 1711.6226, 5810.589
 3151.3843, 1690.9987, 5831.284
 3153.4096, 1670.4028, 5851.98
 3155.7451, 1649.84, 5872.675
 3158.3905, 1629.3147, 5893.37
 3161.3451, 1608.8317, 5914.065
 3164.6082, 1588.3955, 5934.76
 3168.1791, 1568.0106, 5955.455
 3172.057, 1547.6821, 5976.15
 3176.241, 1527.4143, 5996.845
 3180.7301, 1507.212, 6017.54
 3185.5234, 1487.0796, 6038.236
 3190.6196, 1467.0218, 6058.931
 3196.0178, 1447.0432, 6079.626
 3201.7165, 1427.1483, 6100.321
 3207.7147, 1407.3414, 6121.016
 3214.0108, 1387.6273, 6141.711
 3220.6035, 1368.0103, 6162.406
 3227.4912, 1348.4952, 6183.101
 3234.6724, 1329.0859, 6203.796
 3242.1455, 1309.7873, 6224.491
 3249.9087, 1290.6034, 6245.186
 3257.9604, 1271.5388, 6265.882
 3266.2986, 1252.5979, 6286.577
 3274.9214, 1233.7847, 6307.272
 3283.8269, 1215.1038, 6327.967
 3293.0132, 1196.5592, 6348.662
 3302.478, 1178.1553, 6369.357
 3312.2193, 1159.8962, 6390.052
 3322.2348, 1141.7861, 6410.747
 3332.5222, 1123.829, 6431.442
 3343.0793, 1106.0291, 6452.137
 3353.9035, 1088.3905, 6472.832
 3364.9925, 1070.917, 6493.528
 3376.3437, 1053.6127, 6514.223
 3387.9545, 1036.4816, 6534.918
 3399.8224, 1019.5275, 6555.613
 3411.9445, 1002.7543, 6576.308
 3424.3183, 986.1658, 6597.003
 3436.9407, 969.7658, 6617.698
 3449.8094, 953.5579, 6638.394
 3462.3363, 937.7807, 6658.539
 3474.6233, 921.8163, 6678.684
 3486.6683, 905.6685, 6698.83
 3498.4685, 889.3409, 6718.975
 3510.021, 872.8372, 6739.12
 3521.3234, 856.1611, 6759.266
 3532.3731, 839.3166, 6779.411
 3543.1675, 822.3074, 6799.556
 3553.7042, 805.1373, 6819.702
 3563.9807, 787.8103, 6839.847
 3573.9949, 770.3303, 6859.992
 3583.7443, 752.7012, 6880.138
 3593.2268, 734.9272, 6900.283
 3602.4402, 717.0122, 6920.428
 3611.3824, 698.9603, 6940.574
 3620.0514, 680.7757, 6960.719
 3628.4451, 662.4623, 6980.864
 3636.5618, 644.0245, 7001.009
 3644.3995, 625.4664, 7021.155
 3651.9565, 606.7922, 7041.3
 3659.2311, 588.0062, 7061.445
 3666.2216, 569.1127, 7081.591
 3672.9263, 550.1159, 7101.736
 3679.3439, 531.02, 7121.881
 3685.4727, 511.8296, 7142.027
 3691.3115, 492.549, 7162.172
 3696.8589, 473.1826, 7182.317
 3702.1136, 453.7347, 7202.462
 3707.0745, 434.2099, 7222.608
 3711.7404, 414.6121, 7242.753
 3716.1103, 394.9465, 7262.899
 3720.1831, 375.2173, 7283.044
 3723.958, 355.4288, 7303.189
 3727.434, 335.5856, 7323.334
 3730.6104, 315.6923, 7343.48
 3733.4865, 295.7533, 7363.625
 3736.0616, 275.7733, 7383.77
 3738.3352, 255.7566, 7403.916
 3740.3066, 235.708, 7424.061
 3741.9755, 215.632, 7444.206
 3743.3415, 195.5331, 7464.352
 3744.4042, 175.416, 7484.497
 3745.1635, 155.2848, 7504.642
 3745.6192, 135.1447, 7524.787
 3745.7711, 114.9998, 7544.933
 3745.7711, -785.0001, 8444.933
 3745.6192, -805.1449, 8465.078
 3745.1635, -825.285, 8485.223
 3744.4042, -845.4161, 8505.369
 3743.3415, -865.5333, 8525.514
 3741.9755, -885.6322, 8545.659
 3740.3066, -905.7082, 8565.805
 3738.3352, -925.7568, 8585.95
 3736.0617, -945.7735, 8606.095
 3733.4866, -965.7535, 8626.241
 3730.6104, -985.6925, 8646.386
 3727.434, -1005.5858, 8666.531
 3723.958, -1025.4289, 8686.677
 3720.1831, -1045.2175, 8706.822
 3716.1103, -1064.9467, 8726.967
 3711.7405, -1084.6123, 8747.112
 3707.0745, -1104.2101, 8767.258
 3702.1136, -1123.7349, 8787.403
 3696.8589, -1143.1828, 8807.548
 3691.3116, -1162.5492, 8827.694
 3685.4728, -1181.8298, 8847.839
 3679.3439, -1201.0202, 8867.984
 3672.9263, -1220.1161, 8888.13
 3666.2216, -1239.1129, 8908.275
 3659.2312, -1258.0064, 8928.42
 3651.9566, -1276.7924, 8948.566
 3644.3996, -1295.4666, 8968.711
 3636.5619, -1314.0247, 8988.856
 3628.4452, -1332.4626, 9009.002
 3620.0514, -1350.7759, 9029.147
 3611.3825, -1368.9606, 9049.292
 3602.4403, -1387.0125, 9069.437
 3593.2269, -1404.9275, 9089.583
 3583.7444, -1422.7015, 9109.728
 3573.995, -1440.3305, 9129.873
 3563.9808, -1457.8105, 9150.019
 3553.7043, -1475.1375, 9170.164
 3543.1676, -1492.3076, 9190.309
 3532.3731, -1509.3168, 9210.455
 3521.3235, -1526.1614, 9230.6
 3510.0211, -1542.8374, 9250.745
 3498.4686, -1559.3411, 9270.891
 3486.6684, -1575.6687, 9291.036
 3474.6234, -1591.8166, 9311.181
 3462.3363, -1607.7809, 9331.327
 3449.8095, -1623.5581, 9351.472
 3436.9408, -1639.766, 9372.167
 3424.3184, -1656.166, 9392.862
 3411.9447, -1672.7545, 9413.558
 3399.8225, -1689.5277, 9434.253
 3387.9546, -1706.4818, 9454.948
 3376.3438, -1723.613, 9475.643
 3364.9926, -1740.9172, 9496.338
 3353.9036, -1758.3907, 9517.033
 3343.0793, -1776.0293, 9537.728
 3332.5223, -1793.8292, 9558.423
 3322.2348, -1811.7863, 9579.118
 3312.2194, -1829.8964, 9599.814
 3302.4781, -1848.1555, 9620.509
 3293.0133, -1866.5594, 9641.204
 3283.827, -1885.104, 9661.899
 3274.9215, -1903.7849, 9682.594
 3266.2986, -1922.5981, 9703.289
 3257.9604, -1941.539, 9723.984
 3249.9088, -1960.6036, 9744.679
 3242.1455, -1979.7874, 9765.374
 3234.6724, -1999.0861, 9786.069
 3227.4912, -2018.4954, 9806.765
 3220.6035, -2038.0105, 9827.459
 3214.0108, -2057.6275, 9848.155
 3207.7147, -2077.3416, 9868.85
 3201.7166, -2097.1485, 9889.545
 3196.0178, -2117.0434, 9910.24
 3190.6196, -2137.022, 9930.935
 3185.5234, -2157.0798, 9951.63
 3180.7302, -2177.2122, 9972.325
 3176.241, -2197.4145, 9993.02
 3172.0571, -2217.6823, 10013.715
 3168.1791, -2238.0108, 10034.411
 3164.6082, -2258.3957, 10055.106
 3161.3452, -2278.8318, 10075.801
 3158.3905, -2299.3149, 10096.496
 3155.7451, -2319.8402, 10117.191
 3153.4096, -2340.403, 10137.886
 3151.3843, -2360.9989, 10158.581
 3149.6699, -2381.6228, 10179.276
 3148.2666, -2402.2702, 10199.971
 3147.1749, -2422.9365, 10220.666
 3146.3948, -2443.6168, 10241.361
 3145.9268, -2464.3067, 10262.057
 3145.7707, -2485.0013, 10282.752
 3145.6397, -2502.9073, 10300.658
 3145.2464, -2520.812, 10318.567
 3144.5911, -2538.7103, 10336.478
 3143.6742, -2556.599, 10354.39
 3142.4958, -2574.4739, 10372.303
 3141.0562, -2592.3316, 10390.219
 3139.3558, -2610.1678, 10408.136
 3137.3951, -2627.9786, 10426.055
 3135.1746, -2645.7604, 10443.974
 3132.6949, -2663.5091, 10461.896
 3129.9565, -2681.2214, 10479.818
 3126.96, -2698.8929, 10497.742
 3123.7064, -2716.5201, 10515.667
 3120.1962, -2734.0986, 10533.593
 3116.4304, -2751.6255, 10551.519
 3112.4095, -2769.0968, 10569.447
 3108.1352, -2786.5078, 10587.375
 3103.6077, -2803.8561, 10605.305
 3098.8284, -2821.1368, 10623.234
 3093.7984, -2838.347, 10641.164
 3088.5188, -2855.4826, 10659.095
 3082.9906, -2872.5398, 10677.026
 3077.215, -2889.5155, 10694.957
 3071.1936, -2906.4054, 10712.888
 3064.9273, -2923.2063, 10730.819
 3058.4182, -2939.9145, 10748.751
 3051.6667, -2956.5263, 10766.682
 3044.675, -2973.0379, 10784.613
 3037.4447, -2989.4463, 10802.544
 3029.9773, -3005.7475, 10820.474
 3022.2741, -3021.9385, 10838.404
 3014.3371, -3038.0151, 10856.333
 3006.1679, -3053.9745, 10874.262
 2997.7686, -3069.8126, 10892.189
 2989.1406, -3085.5268, 10910.116
 2980.286, -3101.113, 10928.042
 2971.207, -3116.5681, 10945.967
 2961.9049, -3131.8891, 10963.89
 2952.3825, -3147.0722, 10981.813
 2942.6412, -3162.1144, 10999.734
 2932.6837, -3177.0121, 11017.653
 2922.5117, -3191.7626, 11035.57
 2912.1275, -3206.3626, 11053.487
 2901.5337, -3220.8086, 11071.401
 2890.7322, -3235.098, 11089.313
 2879.7256, -3249.2272, 11107.224
 2868.5159, -3263.1936, 11125.132
 2857.1059, -3276.9941, 11143.039
 2845.4966, -3290.6269, 11160.945
 2833.6904, -3304.0893, 11178.851
 2821.6896, -3317.3786, 11196.757
 2809.4969, -3330.4919, 11214.663
 2797.1146, -3343.4267, 11232.569
 2784.5455, -3356.1798, 11250.475
 2771.7924, -3368.749, 11268.381
 2758.8579, -3381.1311, 11286.287
 2745.7444, -3393.324, 11304.193
 2732.4552, -3405.3249, 11322.099
 2718.9928, -3417.131, 11340.005
 2705.3598, -3428.7403, 11357.911
 2691.5598, -3440.15, 11375.817
 2677.5952, -3451.3578, 11393.723
 2663.4689, -3462.3613, 11411.629
 2649.1844, -3473.1582, 11429.535
 2634.7441, -3483.7462, 11447.441
 2620.1514, -3494.1231, 11465.347
 2605.4095, -3504.2866, 11483.253
 2590.5211, -3514.2347, 11501.159
 2575.4896, -3523.9651, 11519.065
 2560.3183, -3533.4759, 11536.971
 2545.0103, -3542.7652, 11554.877
 2529.5688, -3551.8307, 11572.783
 2513.997, -3560.6706, 11590.689
 2498.2984, -3569.2832, 11608.595
 2482.476, -3577.6665, 11626.501
 2466.5335, -3585.8189, 11644.407
 2450.4741, -3593.7386, 11662.313
 2434.3013, -3601.4237, 11680.219
 2418.0183, -3608.873, 11698.125
 2401.6287, -3616.0846, 11716.031
 2385.1361, -3623.0569, 11733.937
 2368.5437, -3629.7886, 11751.843
 2351.8552, -3636.2785, 11769.749
 2335.074, -3642.5249, 11787.655
 2318.2037, -3648.5266, 11805.561
 2301.248, -3654.2823, 11823.467
 2284.2104, -3659.7908, 11841.373
 2267.0944, -3665.0509, 11859.279
 2249.9037, -3670.0615, 11877.185
 2232.642, -3674.8216, 11895.091
 2215.3129, -3679.3301, 11912.997
 2197.92, -3683.5861, 11930.903
 2180.4671, -3687.5887, 11948.809
 2162.9577, -3691.3371, 11966.715
 2145.396, -3694.8303, 11984.621
 2127.785, -3698.0679, 12002.527
 2110.1289, -3701.0489, 12020.433
 2092.4314, -3703.7728, 12038.339
 2074.6959, -3706.2391, 12056.245
 2056.9266, -3708.4471, 12074.151
 2039.1269, -3710.3964, 12092.057
 2021.301, -3712.0867, 12109.963
 2003.4522, -3713.5176, 12127.869
 1985.5846, -3714.6887, 12145.775
 1967.7017, -3715.5998, 12163.681
 1949.8076, -3716.2508, 12181.587
 1931.9058, -3716.6413, 12199.493
 1914.0002, -3716.7715, 12217.399
 1896.0942, -3716.6405, 12235.306
 1878.1895, -3716.2472, 12253.215
 1860.2912, -3715.5919, 12271.125
 1842.4025, -3714.675, 12289.037
 1824.5276, -3713.4966, 12306.951
 1806.6699, -3712.057, 12324.866
 1788.8337, -3710.3566, 12342.783
 1771.0229, -3708.3959, 12360.702
 1753.2411, -3706.1754, 12378.622
 1735.4924, -3703.6957, 12396.543
 1717.7801, -3700.9573, 12414.466
 1700.1086, -3697.9608, 12432.389
 1682.4814, -3694.7072, 12450.314
 1664.9029, -3691.197, 12468.24
 1647.376, -3687.4312, 12486.167
 1629.9047, -3683.4103, 12504.095
 1612.4937, -3679.136, 12522.023
 1595.1454, -3674.6085, 12539.952
 1577.8647, -3669.8292, 12557.882
 1560.6545, -3664.7992, 12575.812
 1543.5189, -3659.5196, 12593.742
 1526.4617, -3653.9914, 12611.673
 1509.486, -3648.2158, 12629.604
 1492.5961, -3642.1944, 12647.535
 1475.7952, -3635.9281, 12665.467
 1459.087, -3629.419, 12683.398
 1442.4752, -3622.6675, 12701.33
 1425.9636, -3615.6758, 12719.26
 1409.5552, -3608.4455, 12737.191
 1393.254, -3600.9781, 12755.121
 1377.063, -3593.2749, 12773.051
 1360.9864, -3585.3379, 12790.981
 1345.027, -3577.1687, 12808.909
 1329.1889, -3568.7694, 12826.837
 1313.4747, -3560.1414, 12844.764
 1297.8885, -3551.2868, 12862.69
 1282.4334, -3542.2078, 12880.614
 1267.1124, -3532.9057, 12898.538
 1251.9293, -3523.3833, 12916.46
 1236.8871, -3513.642, 12934.381
 1221.9894, -3503.6845, 12952.3
 1207.2389, -3493.5125, 12970.218
 1192.6389, -3483.1283, 12988.134
 1178.1929, -3472.5345, 13006.048
 1163.9035, -3461.733, 13023.961
 1149.7743, -3450.7264, 13041.871
 1135.8079, -3439.5167, 13059.78
 1122.0074, -3428.1067, 13077.686
 1108.3746, -3416.4974, 13095.592
 1094.9122, -3404.6912, 13113.498
 1081.6229, -3392.6904, 13131.404
 1068.5096, -3380.4977, 13149.31
 1055.5748, -3368.1154, 13167.216
 1042.8217, -3355.5463, 13185.122
 1030.2525, -3342.7932, 13203.028
 1017.8704, -3329.8587, 13220.934
 1005.6775, -3316.7452, 13238.84
 993.6766, -3303.456, 13256.746
 981.8705, -3289.9936, 13274.652
 970.2612, -3276.3606, 13292.558
 958.8515, -3262.5606, 13310.464
 947.6437, -3248.596, 13328.37
 936.6402, -3234.4697, 13346.276
 925.8433, -3220.1852, 13364.182
 915.2553, -3205.7449, 13382.088
 904.8784, -3191.1522, 13399.994
 894.7149, -3176.4103, 13417.9
 884.7668, -3161.5219, 13435.806
 875.0364, -3146.4904, 13453.712
 865.5256, -3131.3191, 13471.618
 856.2363, -3116.0111, 13489.524
 847.1708, -3100.5696, 13507.43
 838.3309, -3084.9978, 13525.336
 829.7183, -3069.2992, 13543.242
 821.335, -3053.4768, 13561.148
 813.1826, -3037.5343, 13579.054
 805.2629, -3021.4749, 13596.96
 797.5778, -3005.3021, 13614.866
 790.1285, -2989.0191, 13632.772
 782.9169, -2972.6295, 13650.678
 775.9446, -2956.1369, 13668.584
 769.2129, -2939.5445, 13686.49
 762.723, -2922.856, 13704.396
 756.4766, -2906.0748, 13722.302
 750.4749, -2889.2045, 13740.208
 744.7192, -2872.2488, 13758.114
 739.2107, -2855.2112, 13776.02
 733.9506, -2838.0952, 13793.926
 728.94, -2820.9045, 13811.832
 724.1799, -2803.6428, 13829.738
 719.6714, -2786.3137, 13847.644
 715.4154, -2768.9208, 13865.55
 711.4128, -2751.4679, 13883.456
 707.6644, -2733.9585, 13901.362
 704.1712, -2716.3968, 13919.268
 700.9336, -2698.7858, 13937.174
 697.9526, -2681.1297, 13955.08
 695.2287, -2663.4322, 13972.986
 692.7624, -2645.6967, 13990.892
 690.5544, -2627.9274, 14008.798
 688.6051, -2610.1277, 14026.704
 686.9148, -2592.3018, 14044.61
 685.4839, -2574.453, 14062.516
 684.3128, -2556.5854, 14080.422
 683.4017, -2538.7025, 14098.328
 682.7507, -2520.8084, 14116.234
 682.3602, -2502.9066, 14134.14
 682.23, -2485.001, 14152.046
 682.0738, -2464.3064, 14172.742
 681.6058, -2443.6165, 14193.437
 680.8257, -2422.9362, 14214.132
 679.734, -2402.2699, 14234.827
 678.3307, -2381.6225, 14255.522
 676.6163, -2360.9986, 14276.217
 674.591, -2340.4027, 14296.912
 672.2555, -2319.8399, 14317.607
 669.6101, -2299.3146, 14338.302
 666.6554, -2278.8315, 14358.997
 663.3924, -2258.3954, 14379.692
 659.8215, -2238.0105, 14400.388
 655.9435, -2217.682, 14421.083
 651.7596, -2197.4142, 14441.778
 647.2704, -2177.2119, 14462.473
 642.4772, -2157.0795, 14483.168
 637.381, -2137.0217, 14503.863
 631.9828, -2117.0431, 14524.558
 626.284, -2097.1482, 14545.253
 620.2859, -2077.3413, 14565.948
 613.9898, -2057.6272, 14586.644
 607.3971, -2038.0102, 14607.339
 600.5094, -2018.4951, 14628.034
 593.3282, -1999.0858, 14648.729
 585.8551, -1979.7871, 14669.424
 578.0918, -1960.6033, 14690.119
 570.0402, -1941.5387, 14710.814
 561.702, -1922.5978, 14731.509
 553.0791, -1903.7846, 14752.204
 544.1736, -1885.1037, 14772.899
 534.9873, -1866.5591, 14793.595
 525.5225, -1848.1552, 14814.29
 515.7812, -1829.8961, 14834.985
 505.7658, -1811.786, 14855.68
 495.4783, -1793.8289, 14876.375
 484.9213, -1776.029, 14897.07
 474.097, -1758.3904, 14917.765
 463.008, -1740.9169, 14938.46
 451.6568, -1723.6127, 14959.155
 440.046, -1706.4815, 14979.85
 428.1781, -1689.5274, 15000.546
 416.0559, -1672.7542, 15021.241
 403.6822, -1656.1657, 15041.936
 391.0598, -1639.7657, 15062.631
 378.1911, -1623.5578, 15083.326
 365.6643, -1607.7806, 15103.472
 353.3772, -1591.8163, 15123.617
 341.3322, -1575.6684, 15143.762
 329.532, -1559.3408, 15163.908
 317.9795, -1542.8371, 15184.053
 306.6771, -1526.1611, 15204.198
 295.6275, -1509.3165, 15224.344
 284.833, -1492.3073, 15244.489
 274.2963, -1475.1372, 15264.634
 264.0198, -1457.8102, 15284.779
 254.0056, -1440.3302, 15304.925
 244.2562, -1422.7012, 15325.07
 234.7737, -1404.9272, 15345.215
 225.5603, -1387.0122, 15365.361
 216.6181, -1368.9603, 15385.506
 207.9492, -1350.7756, 15405.651
 199.5554, -1332.4623, 15425.797
 191.4387, -1314.0244, 15445.942
 183.601, -1295.4663, 15466.087
 176.044, -1276.7921, 15486.233
 168.7694, -1258.0061, 15506.378
 161.779, -1239.1126, 15526.523
 155.0743, -1220.1158, 15546.668
 148.6567, -1201.0199, 15566.814
 142.5278, -1181.8295, 15586.959
 136.689, -1162.5489, 15607.105
 131.1417, -1143.1825, 15627.25
 125.887, -1123.7346, 15647.395
 120.9261, -1104.2098, 15667.54
 116.2601, -1084.612, 15687.686
 111.8903, -1064.9464, 15707.831
 107.8175, -1045.2172, 15727.976
 104.0426, -1025.4286, 15748.122
 100.5666, -1005.5855, 15768.267
 97.3902, -985.6922, 15788.412
 94.514, -965.7532, 15808.558
 91.9389, -945.7732, 15828.703
 89.6654, -925.7565, 15848.848
 87.694, -905.7079, 15868.994
 86.0251, -885.6319, 15889.139
 84.6591, -865.533, 15909.284
 83.5964, -845.4158, 15929.429
 82.8371, -825.2847, 15949.575
 82.3814, -805.1446, 15969.72
 82.2295, -784.9997, 15989.865
 82.2296, 114.9999, 16889.865
ENDTABLE

XY_TABLE_ID(4)      4 ; Interior Loop; Right Lane Segment 1
SEGMENT_XY_TABLE(4) ! table with X (m), Y (m), and calculated station S (m)
 85.8872, 115, 0
 86.0387, 135.0896, 20.09
 86.4931, 155.1747, 40.18
 87.2503, 175.2506, 60.271
 88.3101, 195.3127, 80.361
 89.6724, 215.3564, 100.451
 91.3367, 235.3777, 120.541
 93.3028, 255.3714, 140.631
 95.5701, 275.3332, 160.721
 98.1381, 295.2585, 180.811
 101.0064, 315.1429, 200.902
 104.1741, 334.9817, 220.992
 107.6406, 354.7706, 241.082
 111.4052, 374.505, 261.172
 115.4668, 394.1803, 281.262
 119.8247, 413.7919, 301.352
 124.4779, 433.336, 321.443
 129.4252, 452.8074, 341.533
 134.6655, 472.202, 361.623
 140.1977, 491.5155, 381.713
 146.0205, 510.7433, 401.803
 152.1326, 529.8811, 421.893
 158.5326, 548.9247, 441.984
 165.2189, 567.8695, 462.074
 172.1903, 586.7113, 482.164
 179.4449, 605.4458, 502.254
 186.9812, 624.0689, 522.344
 194.7975, 642.5762, 542.434
 202.892, 660.9636, 562.524
 211.2627, 679.2268, 582.615
 219.908, 697.3617, 602.705
 228.8257, 715.3641, 622.795
 238.0138, 733.2301, 642.885
 247.4704, 750.9554, 662.975
 257.1931, 768.5362, 683.065
 267.1798, 785.9683, 703.155
 277.4282, 803.2479, 723.246
 287.9361, 820.371, 743.336
 298.701, 837.3336, 763.426
 309.7204, 854.1321, 783.516
 320.9918, 870.7624, 803.606
 332.5127, 887.221, 823.696
 344.2806, 903.5039, 843.787
 356.2926, 919.6075, 863.877
 368.5461, 935.5281, 883.967
 381.0386, 951.2622, 904.057
 393.9416, 967.5132, 924.808
 406.5977, 983.957, 945.558
 419.0044, 1000.5897, 966.308
 431.1588, 1017.4076, 987.059
 443.0583, 1034.4069, 1007.809
 454.7001, 1051.5837, 1028.559
 466.0816, 1068.934, 1049.309
 477.2001, 1086.4541, 1070.06
 488.0532, 1104.1397, 1090.81
 498.6384, 1121.9871, 1111.56
 508.9533, 1139.992, 1132.31
 518.9954, 1158.1504, 1153.061
 528.7626, 1176.4581, 1173.811
 538.2527, 1194.9111, 1194.561
 547.4634, 1213.5051, 1215.311
 556.3927, 1232.2358, 1236.062
 565.0385, 1251.0991, 1256.812
 573.3989, 1270.0905, 1277.562
 581.4721, 1289.206, 1298.312
 589.256, 1308.4409, 1319.063
 596.749, 1327.791, 1339.813
 603.9493, 1347.252, 1360.563
 610.8554, 1366.8191, 1381.313
 617.4657, 1386.4884, 1402.064
 623.7786, 1406.2551, 1422.814
 629.7926, 1426.1146, 1443.564
 635.5066, 1446.0626, 1464.314
 640.9191, 1466.0946, 1485.065
 646.029, 1486.2058, 1505.815
 650.835, 1506.3918, 1526.565
 655.3361, 1526.6479, 1547.315
 659.5312, 1546.9698, 1568.066
 663.4194, 1567.3524, 1588.816
 666.9999, 1587.7916, 1609.566
 670.2717, 1608.2822, 1630.316
 673.2341, 1628.8199, 1651.067
 675.8866, 1649.4, 1671.817
 678.2284, 1670.0177, 1692.567
 680.259, 1690.6682, 1713.317
 681.978, 1711.3473, 1734.068
 683.385, 1732.0497, 1754.818
 684.4797, 1752.771, 1775.568
 685.2618, 1773.5065, 1796.318
 685.7311, 1794.2516, 1817.069
 685.8875, 1815.0012, 1837.819
 686.0182, 1832.8543, 1855.673
 686.4103, 1850.7055, 1873.528
 687.0636, 1868.5506, 1891.385
 687.9778, 1886.3862, 1909.244
 689.1527, 1904.2081, 1927.105
 690.5881, 1922.0127, 1944.967
 692.2833, 1939.7958, 1962.831
 694.2382, 1957.5538, 1980.696
 696.452, 1975.2827, 1998.563
 698.9245, 1992.9786, 2016.43
 701.6546, 2010.6382, 2034.3
 704.6421, 2028.2573, 2052.17
 707.8861, 2045.8319, 2070.042
 711.3858, 2063.3584, 2087.914
 715.1404, 2080.8331, 2105.788
 719.1491, 2098.2522, 2123.662
 723.4109, 2115.6118, 2141.537
 727.9249, 2132.9083, 2159.413
 732.6898, 2150.1377, 2177.289
 737.7051, 2167.2967, 2195.166
 742.9691, 2184.3813, 2213.043
 748.4808, 2201.3883, 2230.921
 754.2393, 2218.3133, 2248.799
 760.2429, 2235.1532, 2266.677
 766.4905, 2251.9043, 2284.555
 772.9806, 2268.5628, 2302.434
 779.7118, 2285.1251, 2320.311
 786.6829, 2301.588, 2338.189
 793.8917, 2317.9476, 2356.067
 801.3372, 2334.2007, 2373.944
 809.0175, 2350.3434, 2391.821
 816.9309, 2366.3724, 2409.697
 825.0759, 2382.2844, 2427.572
 833.4504, 2398.0757, 2445.447
 842.0528, 2413.743, 2463.32
 850.8812, 2429.2832, 2481.193
 859.9334, 2444.6925, 2499.065
 869.2079, 2459.9681, 2516.935
 878.7023, 2475.1062, 2534.804
 888.4146, 2490.1037, 2552.672
 898.3427, 2504.9574, 2570.538
 908.4845, 2519.6641, 2588.403
 918.8379, 2534.2207, 2606.266
 929.4003, 2548.624, 2624.127
 940.1699, 2562.871, 2641.986
 951.1439, 2576.9584, 2659.844
 962.3204, 2590.8835, 2677.699
 973.6967, 2604.643, 2695.553
 985.2714, 2618.2353, 2713.406
 997.0426, 2631.6576, 2731.258
 1009.0077, 2644.9075, 2749.111
 1021.1643, 2657.982, 2766.964
 1033.5098, 2670.8782, 2784.817
 1046.0415, 2683.5935, 2802.67
 1058.7567, 2696.1253, 2820.522
 1071.6528, 2708.4706, 2838.375
 1084.7272, 2720.6272, 2856.228
 1097.9772, 2732.5926, 2874.081
 1111.3995, 2744.3636, 2891.934
 1124.9918, 2755.9385, 2909.787
 1138.751, 2767.3142, 2927.639
 1152.6741, 2778.4887, 2945.492
 1166.7584, 2789.4596, 2963.345
 1181.0004, 2800.2243, 2981.198
 1195.3978, 2810.7809, 2999.051
 1209.9472, 2821.127, 3016.903
 1224.6454, 2831.2602, 3034.756
 1239.4895, 2841.1788, 3052.609
 1254.4763, 2850.8804, 3070.462
 1269.6024, 2860.3628, 3088.315
 1284.865, 2869.6244, 3106.167
 1300.2608, 2878.6631, 3124.02
 1315.7861, 2887.4767, 3141.873
 1331.4382, 2896.0638, 3159.726
 1347.2134, 2904.4222, 3177.579
 1363.1087, 2912.5504, 3195.432
 1379.1204, 2920.4465, 3213.284
 1395.2452, 2928.1089, 3231.137
 1411.4799, 2935.5359, 3248.99
 1427.8208, 2942.7262, 3266.843
 1444.2644, 2949.6778, 3284.696
 1460.8074, 2956.3894, 3302.548
 1477.4464, 2962.86, 3320.401
 1494.1777, 2969.0879, 3338.254
 1510.9978, 2975.0718, 3356.107
 1527.9032, 2980.8103, 3373.96
 1544.8902, 2986.3025, 3391.812
 1561.9553, 2991.547, 3409.665
 1579.0949, 2996.5426, 3427.518
 1596.3054, 3001.2887, 3445.371
 1613.583, 3005.7838, 3463.224
 1630.9241, 3010.0271, 3481.076
 1648.3253, 3014.0179, 3498.929
 1665.7825, 3017.755, 3516.782
 1683.2922, 3021.2379, 3534.635
 1700.8508, 3024.4658, 3552.488
 1718.4545, 3027.438, 3570.34
 1736.0995, 3030.1538, 3588.193
 1753.7822, 3032.6127, 3606.046
 1771.4988, 3034.8142, 3623.899
 1789.2455, 3036.7578, 3641.752
 1807.0186, 3038.443, 3659.604
 1824.8142, 3039.8696, 3677.457
 1842.6288, 3041.0373, 3695.31
 1860.4585, 3041.9457, 3713.163
 1878.2996, 3042.5947, 3731.016
 1896.1481, 3042.9842, 3748.868
 1914.0005, 3043.1139, 3766.721
 1931.8536, 3042.9834, 3784.575
 1949.7048, 3042.5913, 3802.43
 1967.5499, 3041.938, 3820.288
 1985.3855, 3041.0238, 3838.147
 2003.2074, 3039.8489, 3856.007
 2021.012, 3038.4135, 3873.869
 2038.7951, 3036.7183, 3891.733
 2056.5531, 3034.7634, 3909.598
 2074.282, 3032.5496, 3927.465
 2091.9779, 3030.0771, 3945.333
 2109.6375, 3027.347, 3963.202
 2127.2566, 3024.3595, 3981.073
 2144.8312, 3021.1155, 3998.944
 2162.3577, 3017.6158, 4016.817
 2179.8324, 3013.8612, 4034.69
 2197.2515, 3009.8525, 4052.565
 2214.6111, 3005.5907, 4070.44
 2231.9076, 3001.0767, 4088.316
 2249.137, 2996.3118, 4106.192
 2266.296, 2991.2965, 4124.069
 2283.3806, 2986.0325, 4141.946
 2300.3876, 2980.5208, 4159.824
 2317.3126, 2974.7623, 4177.702
 2334.1525, 2968.7587, 4195.58
 2350.9036, 2962.5111, 4213.458
 2367.5621, 2956.021, 4231.336
 2384.1244, 2949.2898, 4249.214
 2400.5873, 2942.3187, 4267.092
 2416.9469, 2935.1099, 4284.969
 2433.2, 2927.6644, 4302.847
 2449.3427, 2919.9841, 4320.723
 2465.3717, 2912.0707, 4338.599
 2481.2837, 2903.9257, 4356.475
 2497.075, 2895.5512, 4374.349
 2512.7423, 2886.9488, 4392.223
 2528.2825, 2878.1204, 4410.096
 2543.6918, 2869.0682, 4427.967
 2558.9674, 2859.7937, 4445.838
 2574.1055, 2850.2993, 4463.707
 2589.103, 2840.587, 4481.575
 2603.9567, 2830.6589, 4499.441
 2618.6634, 2820.5171, 4517.305
 2633.22, 2810.1637, 4535.168
 2647.6233, 2799.6013, 4553.029
 2661.8703, 2788.8317, 4570.889
 2675.9577, 2777.8577, 4588.746
 2689.8828, 2766.6812, 4606.602
 2703.6423, 2755.3049, 4624.455
 2717.2346, 2743.7302, 4642.308
 2730.6569, 2731.959, 4660.161
 2743.9068, 2719.9939, 4678.014
 2756.9813, 2707.8373, 4695.866
 2769.8775, 2695.4918, 4713.719
 2782.5928, 2682.9601, 4731.572
 2795.1246, 2670.2449, 4749.425
 2807.4699, 2657.3488, 4767.278
 2819.6265, 2644.2744, 4785.13
 2831.5919, 2631.0244, 4802.983
 2843.3629, 2617.6021, 4820.836
 2854.9378, 2604.0098, 4838.689
 2866.3135, 2590.2506, 4856.542
 2877.488, 2576.3275, 4874.395
 2888.4589, 2562.2432, 4892.248
 2899.2236, 2548.0012, 4910.1
 2909.7802, 2533.6038, 4927.953
 2920.1263, 2519.0544, 4945.806
 2930.2595, 2504.3562, 4963.659
 2940.1781, 2489.5121, 4981.512
 2949.8797, 2474.5253, 4999.364
 2959.3621, 2459.3992, 5017.217
 2968.6237, 2444.1366, 5035.07
 2977.6624, 2428.7408, 5052.923
 2986.476, 2413.2155, 5070.775
 2995.0631, 2397.5634, 5088.628
 3003.4215, 2381.7882, 5106.481
 3011.5497, 2365.8929, 5124.334
 3019.4458, 2349.8812, 5142.187
 3027.1082, 2333.7564, 5160.04
 3034.5352, 2317.5217, 5177.892
 3041.7255, 2301.1808, 5195.745
 3048.6771, 2284.7372, 5213.598
 3055.3887, 2268.1942, 5231.451
 3061.8593, 2251.5552, 5249.303
 3068.0872, 2234.8239, 5267.156
 3074.0711, 2218.0038, 5285.009
 3079.8096, 2201.0984, 5302.862
 3085.3018, 2184.1114, 5320.715
 3090.5463, 2167.0463, 5338.568
 3095.5419, 2149.9067, 5356.42
 3100.288, 2132.6962, 5374.273
 3104.7831, 2115.4186, 5392.126
 3109.0264, 2098.0775, 5409.979
 3113.0172, 2080.6763, 5427.832
 3116.7543, 2063.2191, 5445.684
 3120.2372, 2045.7094, 5463.537
 3123.4651, 2028.1508, 5481.39
 3126.4373, 2010.5471, 5499.243
 3129.1531, 1992.9021, 5517.096
 3131.612, 1975.2194, 5534.948
 3133.8135, 1957.5028, 5552.801
 3135.7571, 1939.7561, 5570.654
 3137.4423, 1921.983, 5588.507
 3138.8689, 1904.1874, 5606.36
 3140.0366, 1886.3728, 5624.212
 3140.945, 1868.5431, 5642.065
 3141.594, 1850.702, 5659.918
 3141.9835, 1832.8535, 5677.771
 3142.1132, 1815.0011, 5695.624
 3142.2696, 1794.2515, 5716.374
 3142.7389, 1773.5064, 5737.124
 3143.521, 1752.7709, 5757.875
 3144.6157, 1732.0496, 5778.625
 3146.0227, 1711.3472, 5799.375
 3147.7417, 1690.6681, 5820.125
 3149.7723, 1670.0176, 5840.876
 3152.1141, 1649.3999, 5861.626
 3154.7666, 1628.8198, 5882.376
 3157.729, 1608.2821, 5903.126
 3161.0008, 1587.7915, 5923.877
 3164.5813, 1567.3523, 5944.627
 3168.4695, 1546.9697, 5965.377
 3172.6646, 1526.6478, 5986.128
 3177.1657, 1506.3917, 6006.878
 3181.9717, 1486.2057, 6027.628
 3187.0816, 1466.0945, 6048.378
 3192.4941, 1446.0625, 6069.128
 3198.2081, 1426.1145, 6089.879
 3204.2221, 1406.255, 6110.629
 3210.535, 1386.4883, 6131.379
 3217.1453, 1366.819, 6152.129
 3224.0514, 1347.2519, 6172.88
 3231.2517, 1327.7909, 6193.63
 3238.7447, 1308.4408, 6214.38
 3246.5286, 1289.2059, 6235.13
 3254.6018, 1270.0904, 6255.881
 3262.9622, 1251.099, 6276.631
 3271.608, 1232.2357, 6297.381
 3280.5373, 1213.505, 6318.131
 3289.748, 1194.911, 6338.882
 3299.2381, 1176.458, 6359.632
 3309.0053, 1158.1503, 6380.382
 3319.0474, 1139.9919, 6401.132
 3329.3623, 1121.987, 6421.883
 3339.9475, 1104.1396, 6442.633
 3350.8006, 1086.454, 6463.383
 3361.9191, 1068.9339, 6484.133
 3373.3006, 1051.5836, 6504.884
 3384.9424, 1034.4068, 6525.634
 3396.8419, 1017.4075, 6546.384
 3408.9963, 1000.5896, 6567.134
 3421.403, 983.9569, 6587.885
 3434.0591, 967.5131, 6608.635
 3446.9621, 951.2621, 6629.385
 3459.4546, 935.528, 6649.476
 3471.7081, 919.6074, 6669.566
 3483.7201, 903.5038, 6689.656
 3495.488, 887.2209, 6709.746
 3507.0089, 870.7623, 6729.837
 3518.2803, 854.132, 6749.927
 3529.2997, 837.3335, 6770.017
 3540.0646, 820.3709, 6790.107
 3550.5725, 803.2478, 6810.197
 3560.8209, 785.9682, 6830.287
 3570.8076, 768.5361, 6850.377
 3580.5303, 750.9553, 6870.468
 3589.9869, 733.23, 6890.558
 3599.175, 715.364, 6910.648
 3608.0927, 697.3616, 6930.738
 3616.738, 679.2267, 6950.828
 3625.1087, 660.9635, 6970.918
 3633.2032, 642.5761, 6991.009
 3641.0195, 624.0688, 7011.099
 3648.5558, 605.4457, 7031.189
 3655.8104, 586.7112, 7051.279
 3662.7818, 567.8694, 7071.369
 3669.4681, 548.9246, 7091.459
 3675.8681, 529.881, 7111.549
 3681.9802, 510.7432, 7131.64
 3687.803, 491.5154, 7151.73
 3693.3352, 472.2019, 7171.82
 3698.5755, 452.8073, 7191.91
 3703.5228, 433.3359, 7212
 3708.176, 413.7918, 7232.09
 3712.5339, 394.1802, 7252.18
 3716.5955, 374.5049, 7272.271
 3720.3601, 354.7705, 7292.361
 3723.8266, 334.9816, 7312.451
 3726.9943, 315.1428, 7332.541
 3729.8626, 295.2584, 7352.631
 3732.4306, 275.3331, 7372.721
 3734.6979, 255.3713, 7392.812
 3736.664, 235.3776, 7412.902
 3738.3283, 215.3563, 7432.992
 3739.6906, 195.3126, 7453.082
 3740.7504, 175.2505, 7473.172
 3741.5076, 155.1746, 7493.262
 3741.962, 135.0895, 7513.353
 3742.1135, 114.9999, 7533.443
 3742.1135, -785.0001, 8433.443
 3741.962, -805.0897, 8453.533
 3741.5076, -825.1748, 8473.623
 3740.7504, -845.2507, 8493.713
 3739.6906, -865.3127, 8513.803
 3738.3283, -885.3565, 8533.893
 3736.664, -905.3778, 8553.984
 3734.6979, -925.3715, 8574.074
 3732.4306, -945.3333, 8594.164
 3729.8626, -965.2586, 8614.254
 3726.9944, -985.1429, 8634.344
 3723.8266, -1004.9818, 8654.434
 3720.3601, -1024.7707, 8674.525
 3716.5956, -1044.5051, 8694.615
 3712.5339, -1064.1804, 8714.705
 3708.176, -1083.792, 8734.795
 3703.5229, -1103.3361, 8754.885
 3698.5756, -1122.8075, 8774.975
 3693.3352, -1142.2021, 8795.066
 3687.803, -1161.5156, 8815.156
 3681.9802, -1180.7434, 8835.246
 3675.8682, -1199.8812, 8855.336
 3669.4682, -1218.9248, 8875.426
 3662.7818, -1237.8696, 8895.516
 3655.8105, -1256.7114, 8915.606
 3648.5558, -1275.446, 8935.697
 3641.0195, -1294.0691, 8955.787
 3633.2033, -1312.5764, 8975.877
 3625.1088, -1330.9637, 8995.967
 3616.738, -1349.2269, 9016.057
 3608.0928, -1367.3618, 9036.147
 3599.1751, -1385.3643, 9056.238
 3589.9869, -1403.2302, 9076.328
 3580.5304, -1420.9556, 9096.418
 3570.8077, -1438.5363, 9116.508
 3560.821, -1455.9684, 9136.598
 3550.5725, -1473.248, 9156.688
 3540.0647, -1490.3711, 9176.778
 3529.2998, -1507.3338, 9196.869
 3518.2804, -1524.1322, 9216.959
 3507.009, -1540.7626, 9237.049
 3495.488, -1557.2211, 9257.139
 3483.7202, -1573.504, 9277.229
 3471.7082, -1589.6076, 9297.319
 3459.4547, -1605.5283, 9317.41
 3446.9622, -1621.2623, 9337.5
 3434.0592, -1637.5133, 9358.25
 3421.4031, -1653.9571, 9379.001
 3408.9964, -1670.5898, 9399.751
 3396.842, -1687.4077, 9420.501
 3384.9425, -1704.407, 9441.252
 3373.3007, -1721.5838, 9462.002
 3361.9192, -1738.9342, 9482.752
 3350.8007, -1756.4542, 9503.502
 3339.9476, -1774.1398, 9524.253
 3329.3624, -1791.9872, 9545.003
 3319.0475, -1809.9921, 9565.753
 3309.0054, -1828.1505, 9586.503
 3299.2381, -1846.4583, 9607.254
 3289.7481, -1864.9112, 9628.004
 3280.5374, -1883.5052, 9648.754
 3271.6081, -1902.2359, 9669.504
 3262.9622, -1921.0992, 9690.255
 3254.6018, -1940.0907, 9711.005
 3246.5287, -1959.2061, 9731.755
 3238.7448, -1978.441, 9752.505
 3231.2518, -1997.7911, 9773.256
 3224.0515, -2017.2521, 9794.006
 3217.1454, -2036.8192, 9814.756
 3210.5351, -2056.4885, 9835.506
 3204.2222, -2076.2552, 9856.257
 3198.2081, -2096.1147, 9877.007
 3192.4941, -2116.0627, 9897.757
 3187.0816, -2136.0946, 9918.507
 3181.9717, -2156.2059, 9939.258
 3177.1657, -2176.3919, 9960.008
 3172.6646, -2196.648, 9980.758
 3168.4695, -2216.9699, 10001.508
 3164.5813, -2237.3525, 10022.258
 3161.0008, -2257.7917, 10043.009
 3157.7291, -2278.2823, 10063.759
 3154.7666, -2298.82, 10084.509
 3152.1141, -2319.4001, 10105.26
 3149.7723, -2340.0177, 10126.01
 3147.7416, -2360.6683, 10146.76
 3146.0227, -2381.3474, 10167.51
 3144.6156, -2402.0497, 10188.261
 3143.521, -2422.7711, 10209.011
 3142.7389, -2443.5066, 10229.761
 3142.2696, -2464.2517, 10250.511
 3142.1131, -2485.0013, 10271.262
 3141.9825, -2502.8543, 10289.115
 3141.5904, -2520.7055, 10306.971
 3140.9371, -2538.5506, 10324.828
 3140.0229, -2556.3862, 10342.687
 3138.848, -2574.2081, 10360.547
 3137.4126, -2592.0127, 10378.41
 3135.7174, -2609.7958, 10396.273
 3133.7625, -2627.5538, 10414.139
 3131.5487, -2645.2827, 10432.005
 3129.0762, -2662.9786, 10449.873
 3126.3461, -2680.6382, 10467.742
 3123.3586, -2698.2573, 10485.613
 3120.1146, -2715.8319, 10503.485
 3116.6149, -2733.3584, 10521.357
 3112.8603, -2750.8331, 10539.231
 3108.8516, -2768.2522, 10557.105
 3104.5898, -2785.6118, 10574.98
 3100.0758, -2802.9083, 10592.856
 3095.3109, -2820.1377, 10610.732
 3090.2956, -2837.2967, 10628.609
 3085.0316, -2854.3813, 10646.486
 3079.5199, -2871.3883, 10664.364
 3073.7614, -2888.3133, 10682.242
 3067.7578, -2905.1532, 10700.12
 3061.5102, -2921.9043, 10717.998
 3055.0201, -2938.5628, 10735.876
 3048.2889, -2955.1251, 10753.754
 3041.3178, -2971.588, 10771.632
 3034.109, -2987.9476, 10789.509
 3026.6635, -3004.2007, 10807.387
 3018.9832, -3020.3434, 10825.263
 3011.0698, -3036.3724, 10843.139
 3002.9248, -3052.2844, 10861.015
 2994.5503, -3068.0757, 10878.889
 2985.9479, -3083.743, 10896.763
 2977.1195, -3099.2832, 10914.636
 2968.0673, -3114.6925, 10932.507
 2958.7928, -3129.9681, 10950.378
 2949.2984, -3145.1062, 10968.247
 2939.5861, -3160.1037, 10986.115
 2929.658, -3174.9574, 11003.981
 2919.5162, -3189.6641, 11021.845
 2909.1628, -3204.2207, 11039.709
 2898.6004, -3218.624, 11057.57
 2887.8308, -3232.871, 11075.429
 2876.8568, -3246.9584, 11093.286
 2865.6803, -3260.8835, 11111.142
 2854.304, -3274.643, 11128.995
 2842.7293, -3288.2353, 11146.848
 2830.9581, -3301.6576, 11164.701
 2818.993, -3314.9075, 11182.554
 2806.8364, -3327.982, 11200.407
 2794.4909, -3340.8782, 11218.26
 2781.9592, -3353.5935, 11236.112
 2769.244, -3366.1253, 11253.965
 2756.3479, -3378.4706, 11271.818
 2743.2735, -3390.6272, 11289.671
 2730.0235, -3402.5926, 11307.524
 2716.6012, -3414.3636, 11325.376
 2703.0089, -3425.9385, 11343.229
 2689.2497, -3437.3142, 11361.082
 2675.3266, -3448.4887, 11378.935
 2661.2423, -3459.4596, 11396.788
 2647.0003, -3470.2243, 11414.64
 2632.6029, -3480.7809, 11432.493
 2618.0535, -3491.127, 11450.346
 2603.3553, -3501.2602, 11468.199
 2588.5112, -3511.1788, 11486.052
 2573.5244, -3520.8804, 11503.905
 2558.3983, -3530.3628, 11521.757
 2543.1357, -3539.6244, 11539.61
 2527.7399, -3548.6631, 11557.463
 2512.2146, -3557.4767, 11575.316
 2496.5625, -3566.0638, 11593.169
 2480.7873, -3574.4222, 11611.021
 2464.892, -3582.5504, 11628.874
 2448.8803, -3590.4465, 11646.727
 2432.7555, -3598.1089, 11664.58
 2416.5208, -3605.5359, 11682.433
 2400.1799, -3612.7262, 11700.286
 2383.7363, -3619.6778, 11718.138
 2367.1933, -3626.3894, 11735.991
 2350.5543, -3632.86, 11753.844
 2333.823, -3639.0879, 11771.697
 2317.0029, -3645.0718, 11789.549
 2300.0975, -3650.8103, 11807.402
 2283.1105, -3656.3025, 11825.255
 2266.0454, -3661.547, 11843.108
 2248.9058, -3666.5426, 11860.961
 2231.6953, -3671.2887, 11878.813
 2214.4177, -3675.7838, 11896.666
 2197.0766, -3680.0271, 11914.519
 2179.6754, -3684.0179, 11932.372
 2162.2182, -3687.755, 11950.225
 2144.7085, -3691.2379, 11968.077
 2127.1499, -3694.4658, 11985.93
 2109.5462, -3697.438, 12003.783
 2091.9012, -3700.1538, 12021.636
 2074.2185, -3702.6127, 12039.489
 2056.5019, -3704.8142, 12057.342
 2038.7552, -3706.7578, 12075.194
 2020.9821, -3708.443, 12093.047
 2003.1865, -3709.8696, 12110.9
 1985.3719, -3711.0373, 12128.753
 1967.5422, -3711.9457, 12146.605
 1949.7011, -3712.5947, 12164.458
 1931.8526, -3712.9842, 12182.311
 1914.0002, -3713.1139, 12200.164
 1896.1472, -3712.9833, 12218.017
 1878.296, -3712.5912, 12235.873
 1860.4509, -3711.9379, 12253.73
 1842.6153, -3711.0237, 12271.589
 1824.7934, -3709.8488, 12289.45
 1806.9888, -3708.4134, 12307.312
 1789.2057, -3706.7182, 12325.176
 1771.4477, -3704.7633, 12343.041
 1753.7188, -3702.5495, 12360.908
 1736.0229, -3700.077, 12378.775
 1718.3633, -3697.3469, 12396.645
 1700.7442, -3694.3594, 12414.515
 1683.1696, -3691.1154, 12432.387
 1665.6431, -3687.6157, 12450.259
 1648.1684, -3683.8611, 12468.133
 1630.7493, -3679.8524, 12486.007
 1613.3897, -3675.5906, 12503.882
 1596.0932, -3671.0766, 12521.758
 1578.8638, -3666.3117, 12539.634
 1561.7048, -3661.2964, 12557.511
 1544.6202, -3656.0324, 12575.388
 1527.6132, -3650.5207, 12593.266
 1510.6882, -3644.7622, 12611.144
 1493.8483, -3638.7586, 12629.022
 1477.0972, -3632.511, 12646.9
 1460.4387, -3626.0209, 12664.778
 1443.8764, -3619.2897, 12682.656
 1427.4135, -3612.3186, 12700.534
 1411.0539, -3605.1098, 12718.412
 1394.8008, -3597.6643, 12736.289
 1378.6581, -3589.984, 12754.166
 1362.6291, -3582.0706, 12772.042
 1346.7171, -3573.9256, 12789.917
 1330.9258, -3565.5511, 12807.792
 1315.2585, -3556.9487, 12825.665
 1299.7183, -3548.1203, 12843.538
 1284.309, -3539.0681, 12861.41
 1269.0334, -3529.7936, 12879.28
 1253.8953, -3520.2992, 12897.149
 1238.8978, -3510.5869, 12915.017
 1224.0441, -3500.6588, 12932.883
 1209.3374, -3490.517, 12950.748
 1194.7808, -3480.1636, 12968.611
 1180.3775, -3469.6012, 12986.472
 1166.1305, -3458.8316, 13004.331
 1152.0431, -3447.8576, 13022.189
 1138.118, -3436.6811, 13040.044
 1124.3585, -3425.3048, 13057.898
 1110.7662, -3413.7301, 13075.751
 1097.3439, -3401.9589, 13093.603
 1084.094, -3389.9938, 13111.456
 1071.0195, -3377.8372, 13129.309
 1058.1233, -3365.4917, 13147.162
 1045.408, -3352.96, 13165.015
 1032.8762, -3340.2448, 13182.867
 1020.5309, -3327.3487, 13200.72
 1008.3743, -3314.2743, 13218.573
 996.4089, -3301.0243, 13236.426
 984.6379, -3287.602, 13254.279
 973.063, -3274.0097, 13272.132
 961.6873, -3260.2505, 13289.984
 950.5128, -3246.3274, 13307.837
 939.5419, -3232.2431, 13325.69
 928.7772, -3218.0011, 13343.543
 918.2206, -3203.6037, 13361.396
 907.8745, -3189.0543, 13379.248
 897.7413, -3174.3561, 13397.101
 887.8227, -3159.512, 13414.954
 878.1211, -3144.5252, 13432.807
 868.6387, -3129.3991, 13450.66
 859.3771, -3114.1365, 13468.512
 850.3384, -3098.7407, 13486.365
 841.5248, -3083.2154, 13504.218
 832.9377, -3067.5633, 13522.071
 824.5793, -3051.7881, 13539.924
 816.4511, -3035.8928, 13557.777
 808.555, -3019.8811, 13575.629
 800.8926, -3003.7563, 13593.482
 793.4656, -2987.5216, 13611.335
 786.2753, -2971.1807, 13629.188
 779.3237, -2954.7371, 13647.041
 772.6121, -2938.1941, 13664.893
 766.1415, -2921.5551, 13682.746
 759.9136, -2904.8238, 13700.599
 753.9297, -2888.0037, 13718.452
 748.1912, -2871.0983, 13736.304
 742.699, -2854.1113, 13754.157
 737.4545, -2837.0462, 13772.01
 732.4589, -2819.9066, 13789.863
 727.7128, -2802.6961, 13807.716
 723.2177, -2785.4185, 13825.569
 718.9744, -2768.0774, 13843.421
 714.9836, -2750.6762, 13861.274
 711.2465, -2733.219, 13879.127
 707.7636, -2715.7093, 13896.98
 704.5357, -2698.1507, 13914.833
 701.5635, -2680.547, 13932.685
 698.8477, -2662.902, 13950.538
 696.3888, -2645.2193, 13968.391
 694.1873, -2627.5027, 13986.244
 692.2437, -2609.756, 14004.097
 690.5585, -2591.9829, 14021.949
 689.1319, -2574.1873, 14039.802
 687.9642, -2556.3727, 14057.655
 687.0558, -2538.543, 14075.508
 686.4068, -2520.7019, 14093.361
 686.0173, -2502.8534, 14111.213
 685.8876, -2485.001, 14129.066
 685.731, -2464.2514, 14149.817
 685.2617, -2443.5063, 14170.567
 684.4796, -2422.7708, 14191.317
 683.385, -2402.0494, 14212.067
 681.9779, -2381.3471, 14232.818
 680.259, -2360.668, 14253.568
 678.2283, -2340.0174, 14274.318
 675.8865, -2319.3998, 14295.068
 673.234, -2298.8197, 14315.819
 670.2715, -2278.282, 14336.569
 666.9998, -2257.7914, 14357.319
 663.4193, -2237.3522, 14378.07
 659.5311, -2216.9696, 14398.82
 655.336, -2196.6477, 14419.57
 650.8349, -2176.3916, 14440.32
 646.0289, -2156.2056, 14461.07
 640.919, -2136.0943, 14481.821
 635.5065, -2116.0624, 14502.571
 629.7925, -2096.1144, 14523.321
 623.7784, -2076.2549, 14544.071
 617.4655, -2056.4882, 14564.822
 610.8552, -2036.8189, 14585.572
 603.9491, -2017.2518, 14606.322
 596.7488, -1997.7908, 14627.072
 589.2558, -1978.4407, 14647.823
 581.4719, -1959.2058, 14668.573
 573.3988, -1940.0904, 14689.323
 565.0384, -1921.0989, 14710.073
 556.3925, -1902.2356, 14730.824
 547.4632, -1883.5049, 14751.574
 538.2525, -1864.9109, 14772.324
 528.7625, -1846.458, 14793.074
 518.9952, -1828.1502, 14813.825
 508.9531, -1809.9918, 14834.575
 498.6382, -1791.9869, 14855.325
 488.053, -1774.1395, 14876.075
 477.1999, -1756.4539, 14896.826
 466.0814, -1738.9339, 14917.576
 454.6999, -1721.5835, 14938.326
 443.0581, -1704.4067, 14959.076
 431.1586, -1687.4074, 14979.827
 419.0042, -1670.5895, 15000.577
 406.5975, -1653.9568, 15021.327
 393.9414, -1637.513, 15042.078
 381.0384, -1621.262, 15062.828
 368.5459, -1605.528, 15082.918
 356.2924, -1589.6073, 15103.009
 344.2804, -1573.5037, 15123.099
 332.5126, -1557.2208, 15143.189
 320.9916, -1540.7623, 15163.279
 309.7202, -1524.1319, 15183.369
 298.7008, -1507.3335, 15203.459
 287.9359, -1490.3708, 15223.55
 277.4281, -1473.2477, 15243.64
 267.1796, -1455.9681, 15263.73
 257.1929, -1438.536, 15283.82
 247.4702, -1420.9553, 15303.91
 238.0137, -1403.2299, 15324
 228.8255, -1385.364, 15344.09
 219.9078, -1367.3615, 15364.181
 211.2626, -1349.2266, 15384.271
 202.8918, -1330.9634, 15404.361
 194.7973, -1312.5761, 15424.451
 186.9811, -1294.0688, 15444.541
 179.4448, -1275.4457, 15464.631
 172.1901, -1256.7111, 15484.722
 165.2188, -1237.8693, 15504.812
 158.5324, -1218.9245, 15524.902
 152.1324, -1199.8809, 15544.992
 146.0204, -1180.7431, 15565.082
 140.1976, -1161.5153, 15585.172
 134.6654, -1142.2018, 15605.262
 129.425, -1122.8072, 15625.353
 124.4777, -1103.3358, 15645.443
 119.8246, -1083.7917, 15665.533
 115.4667, -1064.1801, 15685.623
 111.405, -1044.5048, 15705.713
 107.6405, -1024.7704, 15725.803
 104.174, -1004.9815, 15745.894
 101.0062, -985.1426, 15765.984
 98.138, -965.2583, 15786.074
 95.57, -945.333, 15806.164
 93.3027, -925.3712, 15826.254
 91.3366, -905.3775, 15846.344
 89.6723, -885.3562, 15866.435
 88.31, -865.3124, 15886.525
 87.2502, -845.2504, 15906.615
 86.493, -825.1745, 15926.705
 86.0386, -805.0894, 15946.795
 85.8871, -784.9998, 15966.885
 85.8872, 115, 16866.885
ENDTABLE

XY_TABLE_ID(5)      5 ; Outer Loop; Middle Lane Segment 1
SEGMENT_XY_TABLE(5) ! table with X (m), Y (m), and calculated station S (m)
 645.7708, 1815.0013, 0
 645.6189, 1794.8564, 20.145
 645.1632, 1774.7163, 40.291
 644.4039, 1754.5852, 60.436
 643.3412, 1734.468, 80.581
 641.9752, 1714.3691, 100.727
 640.3063, 1694.2931, 120.872
 638.3349, 1674.2445, 141.017
 636.0614, 1654.2278, 161.163
 633.4863, 1634.2478, 181.308
 630.6101, 1614.3088, 201.453
 627.4337, 1594.4155, 221.599
 623.9577, 1574.5724, 241.744
 620.1828, 1554.7838, 261.889
 616.11, 1535.0546, 282.034
 611.7402, 1515.389, 302.18
 607.0742, 1495.7912, 322.325
 602.1133, 1476.2664, 342.47
 596.8586, 1456.8185, 362.616
 591.3113, 1437.4521, 382.761
 585.4725, 1418.1715, 402.906
 579.3436, 1398.9811, 423.052
 572.926, 1379.8852, 443.197
 566.2213, 1360.8884, 463.342
 559.2309, 1341.9949, 483.488
 551.9563, 1323.2089, 503.633
 544.3993, 1304.5347, 523.778
 536.5616, 1285.9766, 543.923
 528.4449, 1267.5387, 564.069
 520.0511, 1249.2254, 584.214
 511.3822, 1231.0407, 604.359
 502.44, 1212.9888, 624.505
 493.2266, 1195.0738, 644.65
 483.7441, 1177.2998, 664.795
 473.9947, 1159.6708, 684.941
 463.9805, 1142.1908, 705.086
 453.704, 1124.8638, 725.231
 443.1673, 1107.6937, 745.377
 432.3728, 1090.6845, 765.522
 421.3232, 1073.8399, 785.667
 410.0208, 1057.1639, 805.813
 398.4683, 1040.6602, 825.958
 386.6681, 1024.3326, 846.103
 374.6231, 1008.1847, 866.249
 362.336, 992.2204, 886.394
 349.8092, 976.4432, 906.539
 336.9405, 960.2353, 927.235
 324.3181, 943.8353, 947.93
 311.9444, 927.2468, 968.625
 299.8222, 910.4736, 989.32
 287.9543, 893.5195, 1010.015
 276.3435, 876.3883, 1030.71
 264.9923, 859.0841, 1051.405
 253.9033, 841.6106, 1072.1
 243.079, 823.972, 1092.796
 232.522, 806.1721, 1113.491
 222.2345, 788.215, 1134.186
 212.2191, 770.1049, 1154.881
 202.4778, 751.8458, 1175.576
 193.013, 733.4419, 1196.271
 183.8267, 714.8973, 1216.966
 174.9212, 696.2164, 1237.661
 166.2983, 677.4032, 1258.356
 157.9601, 658.4623, 1279.051
 149.9085, 639.3977, 1299.746
 142.1452, 620.2139, 1320.442
 134.6721, 600.9152, 1341.137
 127.4909, 581.5059, 1361.832
 120.6032, 561.9908, 1382.527
 114.0105, 542.3738, 1403.222
 107.7144, 522.6597, 1423.917
 101.7163, 502.8528, 1444.612
 96.0175, 482.9579, 1465.307
 90.6193, 462.9793, 1486.002
 85.5231, 442.9215, 1506.697
 80.7299, 422.7891, 1527.392
 76.2407, 402.5868, 1548.088
 72.0568, 382.319, 1568.783
 68.1788, 361.9905, 1589.478
 64.6079, 341.6056, 1610.173
 61.3449, 321.1695, 1630.868
 58.3902, 300.6864, 1651.563
 55.7448, 280.1611, 1672.258
 53.4093, 259.5983, 1692.953
 51.384, 239.0024, 1713.648
 49.6696, 218.3785, 1734.343
 48.2663, 197.7311, 1755.039
 47.1746, 177.0648, 1775.734
 46.3945, 156.3845, 1796.429
 45.9265, 135.6946, 1817.124
 45.7704, 115, 1837.819
 45.7704, -784.9998, 2737.819
 45.9264, -805.6944, 2758.514
 46.3944, -826.3843, 2779.209
 47.1744, -847.0645, 2799.904
 48.2662, -867.7309, 2820.599
 49.6695, -888.3783, 2841.294
 51.3839, -909.0022, 2861.989
 53.4092, -929.5981, 2882.685
 55.7447, -950.1609, 2903.38
 58.3901, -970.6862, 2924.075
 61.3447, -991.1692, 2944.77
 64.6078, -1011.6054, 2965.465
 68.1787, -1031.9903, 2986.16
 72.0566, -1052.3188, 3006.855
 76.2406, -1072.5866, 3027.55
 80.7297, -1092.7889, 3048.245
 85.523, -1112.9213, 3068.941
 90.6192, -1132.9791, 3089.636
 96.0174, -1152.9577, 3110.331
 101.7161, -1172.8526, 3131.026
 107.7143, -1192.6595, 3151.721
 114.0104, -1212.3736, 3172.416
 120.6031, -1231.9906, 3193.111
 127.4908, -1251.5057, 3213.806
 134.672, -1270.915, 3234.501
 142.1451, -1290.2136, 3255.196
 149.9083, -1309.3975, 3275.891
 157.96, -1328.4621, 3296.587
 166.2982, -1347.403, 3317.282
 174.921, -1366.2162, 3337.977
 183.8265, -1384.8971, 3358.672
 193.0128, -1403.4417, 3379.367
 202.4776, -1421.8456, 3400.062
 212.2189, -1440.1047, 3420.757
 222.2344, -1458.2148, 3441.452
 232.5218, -1476.1719, 3462.147
 243.0789, -1493.9718, 3482.842
 253.9031, -1511.6104, 3503.537
 264.9921, -1529.0839, 3524.233
 276.3433, -1546.3882, 3544.928
 287.9541, -1563.5193, 3565.623
 299.822, -1580.4734, 3586.318
 311.9441, -1597.2466, 3607.013
 324.3179, -1613.8351, 3627.708
 336.9403, -1630.2351, 3648.403
 349.809, -1646.443, 3669.099
 362.3359, -1662.2202, 3689.244
 374.6229, -1678.1846, 3709.389
 386.6679, -1694.3324, 3729.535
 398.4681, -1710.66, 3749.68
 410.0206, -1727.1637, 3769.825
 421.323, -1743.8398, 3789.971
 432.3727, -1760.6843, 3810.116
 443.1671, -1777.6935, 3830.261
 453.7038, -1794.8636, 3850.407
 463.9803, -1812.1906, 3870.552
 473.9945, -1829.6706, 3890.697
 483.7439, -1847.2997, 3910.843
 493.2264, -1865.0737, 3930.988
 502.4398, -1882.9887, 3951.133
 511.382, -1901.0406, 3971.278
 520.051, -1919.2252, 3991.424
 528.4447, -1937.5386, 4011.569
 536.5614, -1955.9764, 4031.714
 544.3991, -1974.5345, 4051.86
 551.9561, -1993.2087, 4072.005
 559.2307, -2011.9947, 4092.15
 566.2212, -2030.8882, 4112.296
 572.9259, -2049.885, 4132.441
 579.3435, -2068.9809, 4152.586
 585.4723, -2088.1713, 4172.732
 591.3111, -2107.4519, 4192.877
 596.8585, -2126.8183, 4213.022
 602.1132, -2146.2662, 4233.167
 607.0741, -2165.791, 4253.313
 611.74, -2185.3888, 4273.458
 616.1099, -2205.0544, 4293.603
 620.1827, -2224.7836, 4313.749
 623.9576, -2244.5721, 4333.894
 627.4336, -2264.4153, 4354.039
 630.61, -2284.3086, 4374.185
 633.4861, -2304.2476, 4394.33
 636.0612, -2324.2276, 4414.475
 638.3348, -2344.2443, 4434.621
 640.3062, -2364.2929, 4454.766
 641.9751, -2384.3689, 4474.911
 643.3411, -2404.4678, 4495.056
 644.4038, -2424.5849, 4515.202
 645.1631, -2444.7161, 4535.347
 645.6188, -2464.8562, 4555.492
 645.7707, -2485.0011, 4575.638
 645.9048, -2503.4368, 4594.074
 646.3069, -2521.8687, 4612.51
 646.9772, -2540.2929, 4630.947
 647.9153, -2558.7052, 4649.383
 649.1211, -2577.102, 4667.819
 650.5943, -2595.4794, 4686.256
 652.3346, -2613.8334, 4704.692
 654.3417, -2632.1599, 4723.128
 656.6151, -2650.4556, 4741.564
 659.1544, -2668.7161, 4760.001
 661.959, -2686.9379, 4778.437
 665.0283, -2705.1168, 4796.873
 668.3618, -2723.2493, 4815.309
 671.9584, -2741.3313, 4833.746
 675.8178, -2759.3591, 4852.182
 679.9389, -2777.3289, 4870.618
 684.321, -2795.2368, 4889.055
 688.963, -2813.0791, 4907.491
 693.8641, -2830.8521, 4925.927
 699.0231, -2848.5518, 4944.363
 704.439, -2866.1746, 4962.8
 710.1106, -2883.7168, 4981.236
 716.0367, -2901.1747, 4999.672
 722.2162, -2918.5446, 5018.109
 728.6476, -2935.8228, 5036.545
 735.3296, -2953.0054, 5054.981
 742.2607, -2970.0891, 5073.417
 749.4395, -2987.0703, 5091.854
 756.8646, -3003.9452, 5110.29
 764.5344, -3020.7104, 5128.726
 772.4473, -3037.3622, 5147.162
 780.6014, -3053.8971, 5165.599
 788.9952, -3070.3119, 5184.035
 797.6268, -3086.6027, 5202.471
 806.4946, -3102.7663, 5220.908
 815.5962, -3118.7991, 5239.344
 824.9303, -3134.698, 5257.78
 834.4946, -3150.4594, 5276.216
 844.287, -3166.0799, 5294.652
 854.3056, -3181.5565, 5313.089
 864.5483, -3196.8858, 5331.525
 875.0128, -3212.0644, 5349.961
 885.6969, -3227.0892, 5368.398
 896.5986, -3241.9571, 5386.834
 907.7151, -3256.6646, 5405.27
 919.0446, -3271.2093, 5423.707
 930.5843, -3285.5874, 5442.143
 942.3318, -3299.7963, 5460.579
 954.2849, -3313.8328, 5479.016
 966.4407, -3327.6937, 5497.452
 978.7968, -3341.3766, 5515.888
 991.3508, -3354.8784, 5534.324
 1004.0998, -3368.1963, 5552.761
 1017.0411, -3381.3269, 5571.197
 1030.172, -3394.2682, 5589.633
 1043.4896, -3407.0171, 5608.069
 1056.9914, -3419.5709, 5626.506
 1070.6742, -3431.9271, 5644.942
 1084.5353, -3444.083, 5663.378
 1098.5719, -3456.0361, 5681.815
 1112.7806, -3467.7836, 5700.251
 1127.1593, -3479.3239, 5718.688
 1141.7058, -3490.6551, 5737.127
 1156.4167, -3501.775, 5755.568
 1171.2893, -3512.6814, 5774.011
 1186.3204, -3523.3717, 5792.456
 1201.5065, -3533.8438, 5810.902
 1216.8443, -3544.0951, 5829.35
 1232.3308, -3554.1236, 5847.8
 1247.9623, -3563.9271, 5866.252
 1263.736, -3573.5034, 5884.705
 1279.6478, -3582.8504, 5903.159
 1295.6948, -3591.9663, 5921.614
 1311.8732, -3600.8487, 5940.071
 1328.1796, -3609.4959, 5958.528
 1344.6107, -3617.9062, 5976.987
 1361.1627, -3626.0773, 5995.446
 1377.8321, -3634.0078, 6013.905
 1394.6153, -3641.6956, 6032.366
 1411.5088, -3649.1394, 6050.826
 1428.5087, -3656.3373, 6069.287
 1445.6119, -3663.2877, 6087.749
 1462.8143, -3669.9894, 6106.21
 1480.1124, -3676.4409, 6124.672
 1497.5021, -3682.6404, 6143.134
 1514.9802, -3688.5867, 6161.596
 1532.5428, -3694.2787, 6180.058
 1550.1858, -3699.7149, 6198.52
 1567.9058, -3704.8939, 6216.981
 1585.6987, -3709.815, 6235.442
 1603.5606, -3714.4767, 6253.902
 1621.488, -3718.8781, 6272.362
 1639.4766, -3723.018, 6290.821
 1657.5226, -3726.8957, 6309.279
 1675.6225, -3730.5102, 6327.736
 1693.7717, -3733.8605, 6346.192
 1711.9669, -3736.9459, 6364.647
 1730.2039, -3739.7656, 6383.1
 1748.4787, -3742.3192, 6401.553
 1766.7873, -3744.6057, 6420.004
 1785.1259, -3746.6247, 6438.453
 1803.4904, -3748.3756, 6456.901
 1821.8773, -3749.8583, 6475.347
 1840.2817, -3751.0717, 6493.792
 1858.7004, -3752.0161, 6512.235
 1877.1288, -3752.6908, 6530.675
 1895.5638, -3753.0957, 6549.115
 1914.0003, -3753.2307, 6567.552
 1932.436, -3753.0967, 6585.988
 1950.8679, -3752.6946, 6604.424
 1969.2921, -3752.0243, 6622.861
 1987.7044, -3751.0862, 6641.297
 2006.1012, -3749.8804, 6659.733
 2024.4786, -3748.4072, 6678.169
 2042.8326, -3746.6669, 6696.606
 2061.1591, -3744.6598, 6715.042
 2079.4548, -3742.3864, 6733.478
 2097.7153, -3739.8471, 6751.914
 2115.9371, -3737.0425, 6770.351
 2134.116, -3733.9732, 6788.787
 2152.2485, -3730.6397, 6807.223
 2170.3305, -3727.0431, 6825.66
 2188.3583, -3723.1837, 6844.096
 2206.3281, -3719.0626, 6862.532
 2224.236, -3714.6805, 6880.968
 2242.0783, -3710.0385, 6899.405
 2259.8513, -3705.1374, 6917.841
 2277.551, -3699.9784, 6936.277
 2295.1738, -3694.5625, 6954.714
 2312.716, -3688.8909, 6973.15
 2330.1739, -3682.9648, 6991.586
 2347.5438, -3676.7853, 7010.022
 2364.822, -3670.3539, 7028.459
 2382.0046, -3663.6719, 7046.895
 2399.0883, -3656.7408, 7065.331
 2416.0695, -3649.562, 7083.767
 2432.9444, -3642.1369, 7102.204
 2449.7096, -3634.4671, 7120.64
 2466.3614, -3626.5542, 7139.076
 2482.8963, -3618.4001, 7157.512
 2499.3111, -3610.0063, 7175.949
 2515.6019, -3601.3747, 7194.385
 2531.7655, -3592.5069, 7212.821
 2547.7983, -3583.4053, 7231.258
 2563.6972, -3574.0712, 7249.694
 2579.4586, -3564.5069, 7268.13
 2595.0791, -3554.7145, 7286.566
 2610.5557, -3544.6959, 7305.003
 2625.885, -3534.4532, 7323.439
 2641.0636, -3523.9887, 7341.875
 2656.0884, -3513.3046, 7360.312
 2670.9563, -3502.4029, 7378.748
 2685.6638, -3491.2864, 7397.184
 2700.2085, -3479.9569, 7415.621
 2714.5866, -3468.4172, 7434.057
 2728.7955, -3456.6697, 7452.493
 2742.832, -3444.7166, 7470.929
 2756.6929, -3432.5608, 7489.365
 2770.3758, -3420.2047, 7507.802
 2783.8776, -3407.6507, 7526.238
 2797.1955, -3394.9017, 7544.675
 2810.3261, -3381.9604, 7563.111
 2823.2674, -3368.8295, 7581.547
 2836.0163, -3355.5119, 7599.983
 2848.5701, -3342.0101, 7618.419
 2860.9263, -3328.3273, 7636.856
 2873.0822, -3314.4662, 7655.292
 2885.0353, -3300.4296, 7673.728
 2896.7828, -3286.2209, 7692.165
 2908.3231, -3271.8422, 7710.602
 2919.6543, -3257.2957, 7729.041
 2930.7742, -3242.5848, 7747.481
 2941.6806, -3227.7122, 7765.924
 2952.3709, -3212.6811, 7784.369
 2962.843, -3197.495, 7802.816
 2973.0943, -3182.1572, 7821.264
 2983.1228, -3166.6707, 7839.714
 2992.9263, -3151.0392, 7858.166
 3002.5026, -3135.2655, 7876.619
 3011.8496, -3119.3537, 7895.073
 3020.9655, -3103.3067, 7913.528
 3029.8479, -3087.1283, 7931.985
 3038.4951, -3070.8219, 7950.442
 3046.9054, -3054.3908, 7968.9
 3055.0765, -3037.8388, 7987.359
 3063.007, -3021.1694, 8005.819
 3070.6948, -3004.3862, 8024.279
 3078.1386, -2987.4927, 8042.74
 3085.3365, -2970.4928, 8061.201
 3092.2869, -2953.3896, 8079.663
 3098.9886, -2936.1872, 8098.124
 3105.4401, -2918.8891, 8116.586
 3111.6396, -2901.4994, 8135.048
 3117.5859, -2884.0213, 8153.51
 3123.2779, -2866.4587, 8171.972
 3128.7141, -2848.8157, 8190.433
 3133.8931, -2831.0957, 8208.895
 3138.8142, -2813.3028, 8227.356
 3143.4759, -2795.4409, 8245.816
 3147.8773, -2777.5135, 8264.276
 3152.0172, -2759.5249, 8282.735
 3155.8949, -2741.4789, 8301.192
 3159.5094, -2723.379, 8319.65
 3162.8597, -2705.2298, 8338.106
 3165.9451, -2687.0346, 8356.56
 3168.7648, -2668.7976, 8375.014
 3171.3184, -2650.5228, 8393.467
 3173.6049, -2632.2142, 8411.917
 3175.6239, -2613.8756, 8430.367
 3177.3748, -2595.5111, 8448.815
 3178.8575, -2577.1242, 8467.261
 3180.0709, -2558.7198, 8485.705
 3181.0153, -2540.3011, 8504.148
 3181.69, -2521.8727, 8522.589
 3182.0949, -2503.4377, 8541.029
 3182.2299, -2485.0012, 8559.466
 3182.3818, -2464.8565, 8579.611
 3182.8375, -2444.7164, 8599.756
 3183.5968, -2424.5852, 8619.902
 3184.6595, -2404.4681, 8640.047
 3186.0255, -2384.3692, 8660.192
 3187.6944, -2364.2932, 8680.337
 3189.6658, -2344.2446, 8700.483
 3191.9394, -2324.2279, 8720.628
 3194.5145, -2304.2479, 8740.773
 3197.3906, -2284.3089, 8760.919
 3200.567, -2264.4156, 8781.064
 3204.043, -2244.5724, 8801.209
 3207.8179, -2224.7839, 8821.355
 3211.8907, -2205.0547, 8841.5
 3216.2606, -2185.3891, 8861.645
 3220.9265, -2165.7913, 8881.791
 3225.8874, -2146.2665, 8901.936
 3231.1421, -2126.8186, 8922.081
 3236.6895, -2107.4522, 8942.226
 3242.5283, -2088.1716, 8962.372
 3248.6571, -2068.9812, 8982.517
 3255.0747, -2049.8853, 9002.662
 3261.7794, -2030.8885, 9022.808
 3268.7699, -2011.995, 9042.953
 3276.0445, -1993.209, 9063.098
 3283.6015, -1974.5348, 9083.244
 3291.4392, -1955.9767, 9103.389
 3299.5559, -1937.5389, 9123.534
 3307.9496, -1919.2255, 9143.679
 3316.6186, -1901.0409, 9163.825
 3325.5608, -1882.989, 9183.97
 3334.7742, -1865.074, 9204.115
 3344.2567, -1847.3, 9224.261
 3354.0061, -1829.6709, 9244.406
 3364.0203, -1812.1909, 9264.551
 3374.2968, -1794.8639, 9284.697
 3384.8335, -1777.6938, 9304.842
 3395.6279, -1760.6846, 9324.987
 3406.6776, -1743.8401, 9345.133
 3417.98, -1727.164, 9365.278
 3429.5325, -1710.6603, 9385.423
 3441.3327, -1694.3327, 9405.569
 3453.3777, -1678.1849, 9425.714
 3465.6647, -1662.2205, 9445.859
 3478.1916, -1646.4433, 9466.005
 3491.0603, -1630.2354, 9486.7
 3503.6827, -1613.8354, 9507.395
 3516.0565, -1597.2469, 9528.09
 3528.1786, -1580.4737, 9548.785
 3540.0465, -1563.5196, 9569.481
 3551.6573, -1546.3885, 9590.176
 3563.0085, -1529.0842, 9610.871
 3574.0975, -1511.6107, 9631.566
 3584.9217, -1493.9721, 9652.261
 3595.4788, -1476.1722, 9672.956
 3605.7662, -1458.2151, 9693.651
 3615.7817, -1440.105, 9714.346
 3625.523, -1421.8459, 9735.041
 3634.9878, -1403.442, 9755.736
 3644.1741, -1384.8974, 9776.432
 3653.0796, -1366.2165, 9797.127
 3661.7024, -1347.4033, 9817.822
 3670.0406, -1328.4624, 9838.517
 3678.0923, -1309.3978, 9859.212
 3685.8555, -1290.2139, 9879.907
 3693.3286, -1270.9153, 9900.602
 3700.5098, -1251.506, 9921.297
 3707.3975, -1231.9909, 9941.992
 3713.9902, -1212.3739, 9962.687
 3720.2863, -1192.6598, 9983.382
 3726.2845, -1172.8529, 10004.078
 3731.9832, -1152.958, 10024.773
 3737.3814, -1132.9794, 10045.468
 3742.4776, -1112.9216, 10066.163
 3747.2709, -1092.7892, 10086.858
 3751.76, -1072.5869, 10107.553
 3755.944, -1052.3191, 10128.248
 3759.8219, -1031.9906, 10148.943
 3763.3928, -1011.6057, 10169.638
 3766.6559, -991.1695, 10190.334
 3769.6105, -970.6865, 10211.029
 3772.2559, -950.1612, 10231.724
 3774.5914, -929.5984, 10252.419
 3776.6167, -909.0025, 10273.114
 3778.3311, -888.3786, 10293.809
 3779.7344, -867.7312, 10314.504
 3780.8262, -847.0648, 10335.199
 3781.6062, -826.3846, 10355.894
 3782.0742, -805.6947, 10376.589
 3782.2302, -785.0001, 10397.284
 3782.2303, 114.9999, 11297.284
 3782.0742, 135.6945, 11317.98
 3781.6062, 156.3844, 11338.675
 3780.8261, 177.0647, 11359.37
 3779.7344, 197.731, 11380.065
 3778.3311, 218.3784, 11400.76
 3776.6167, 239.0023, 11421.455
 3774.5914, 259.5982, 11442.15
 3772.2559, 280.161, 11462.845
 3769.6105, 300.6863, 11483.54
 3766.6558, 321.1694, 11504.235
 3763.3928, 341.6055, 11524.93
 3759.8219, 361.9904, 11545.626
 3755.9439, 382.3189, 11566.321
 3751.76, 402.5867, 11587.016
 3747.2708, 422.789, 11607.711
 3742.4776, 442.9214, 11628.406
 3737.3814, 462.9792, 11649.101
 3731.9832, 482.9578, 11669.796
 3726.2844, 502.8527, 11690.491
 3720.2863, 522.6596, 11711.186
 3713.9902, 542.3737, 11731.881
 3707.3975, 561.9907, 11752.577
 3700.5098, 581.5058, 11773.272
 3693.3286, 600.9151, 11793.967
 3685.8555, 620.2138, 11814.662
 3678.0922, 639.3976, 11835.357
 3670.0406, 658.4622, 11856.052
 3661.7024, 677.4031, 11876.747
 3653.0795, 696.2163, 11897.442
 3644.174, 714.8972, 11918.137
 3634.9877, 733.4418, 11938.832
 3625.5229, 751.8457, 11959.528
 3615.7816, 770.1048, 11980.223
 3605.7662, 788.2149, 12000.918
 3595.4787, 806.172, 12021.613
 3584.9217, 823.9719, 12042.308
 3574.0974, 841.6105, 12063.003
 3563.0084, 859.084, 12083.698
 3551.6572, 876.3882, 12104.393
 3540.0464, 893.5194, 12125.088
 3528.1785, 910.4735, 12145.783
 3516.0563, 927.2467, 12166.479
 3503.6826, 943.8352, 12187.174
 3491.0602, 960.2352, 12207.869
 3478.1915, 976.4431, 12228.564
 3465.6647, 992.2203, 12248.71
 3453.3776, 1008.1846, 12268.855
 3441.3326, 1024.3325, 12289
 3429.5324, 1040.6601, 12309.146
 3417.9799, 1057.1638, 12329.291
 3406.6775, 1073.8398, 12349.436
 3395.6279, 1090.6844, 12369.582
 3384.8334, 1107.6936, 12389.727
 3374.2967, 1124.8637, 12409.872
 3364.0202, 1142.1907, 12430.017
 3354.006, 1159.6707, 12450.163
 3344.2566, 1177.2997, 12470.308
 3334.7741, 1195.0737, 12490.453
 3325.5607, 1212.9887, 12510.599
 3316.6185, 1231.0406, 12530.744
 3307.9496, 1249.2253, 12550.889
 3299.5558, 1267.5386, 12571.035
 3291.4391, 1285.9765, 12591.18
 3283.6014, 1304.5346, 12611.325
 3276.0444, 1323.2088, 12631.471
 3268.7698, 1341.9948, 12651.616
 3261.7794, 1360.8883, 12671.761
 3255.0747, 1379.8851, 12691.906
 3248.6571, 1398.981, 12712.052
 3242.5282, 1418.1714, 12732.197
 3236.6894, 1437.452, 12752.342
 3231.1421, 1456.8184, 12772.488
 3225.8874, 1476.2663, 12792.633
 3220.9265, 1495.7911, 12812.778
 3216.2605, 1515.3889, 12832.924
 3211.8907, 1535.0545, 12853.069
 3207.8179, 1554.7837, 12873.214
 3204.043, 1574.5723, 12893.36
 3200.567, 1594.4154, 12913.505
 3197.3906, 1614.3087, 12933.65
 3194.5144, 1634.2477, 12953.796
 3191.9393, 1654.2277, 12973.941
 3189.6658, 1674.2444, 12994.086
 3187.6944, 1694.293, 13014.232
 3186.0255, 1714.369, 13034.377
 3184.6595, 1734.4679, 13054.522
 3183.5968, 1754.5851, 13074.667
 3182.8375, 1774.7162, 13094.813
 3182.3818, 1794.8563, 13114.958
 3182.2299, 1815.0012, 13135.103
 3182.096, 1833.4369, 13153.54
 3181.6939, 1851.8688, 13171.976
 3181.0236, 1870.293, 13190.412
 3180.0855, 1888.7053, 13208.848
 3178.8797, 1907.1021, 13227.285
 3177.4065, 1925.4795, 13245.721
 3175.6662, 1943.8335, 13264.157
 3173.6591, 1962.16, 13282.593
 3171.3857, 1980.4557, 13301.03
 3168.8464, 1998.7162, 13319.466
 3166.0418, 2016.938, 13337.902
 3162.9725, 2035.1169, 13356.339
 3159.639, 2053.2494, 13374.775
 3156.0424, 2071.3314, 13393.211
 3152.183, 2089.3592, 13411.648
 3148.0619, 2107.329, 13430.084
 3143.6798, 2125.2369, 13448.52
 3139.0378, 2143.0792, 13466.956
 3134.1367, 2160.8522, 13485.393
 3128.9777, 2178.5519, 13503.829
 3123.5618, 2196.1747, 13522.265
 3117.8902, 2213.7169, 13540.701
 3111.9641, 2231.1748, 13559.138
 3105.7846, 2248.5447, 13577.574
 3099.3532, 2265.8229, 13596.011
 3092.6712, 2283.0055, 13614.447
 3085.7401, 2300.0892, 13632.883
 3078.5613, 2317.0704, 13651.319
 3071.1362, 2333.9453, 13669.755
 3063.4664, 2350.7105, 13688.192
 3055.5535, 2367.3623, 13706.628
 3047.3994, 2383.8972, 13725.064
 3039.0056, 2400.312, 13743.501
 3030.374, 2416.6028, 13761.937
 3021.5062, 2432.7664, 13780.373
 3012.4046, 2448.7992, 13798.809
 3003.0705, 2464.6981, 13817.246
 2993.5062, 2480.4595, 13835.682
 2983.7138, 2496.08, 13854.118
 2973.6952, 2511.5566, 13872.554
 2963.4525, 2526.8859, 13890.991
 2952.988, 2542.0645, 13909.427
 2942.3039, 2557.0893, 13927.863
 2931.4022, 2571.9572, 13946.3
 2920.2857, 2586.6647, 13964.736
 2908.9562, 2601.2094, 13983.172
 2897.4165, 2615.5875, 14001.608
 2885.669, 2629.7964, 14020.045
 2873.7159, 2643.8329, 14038.481
 2861.5601, 2657.6938, 14056.917
 2849.204, 2671.3767, 14075.353
 2836.65, 2684.8785, 14093.79
 2823.901, 2698.1964, 14112.226
 2810.9597, 2711.327, 14130.662
 2797.8288, 2724.2683, 14149.099
 2784.5112, 2737.0172, 14167.535
 2771.0094, 2749.571, 14185.971
 2757.3266, 2761.9272, 14204.407
 2743.4655, 2774.0831, 14222.844
 2729.4289, 2786.0362, 14241.28
 2715.2202, 2797.7837, 14259.716
 2700.8415, 2809.324, 14278.153
 2686.295, 2820.6552, 14296.592
 2671.5841, 2831.7751, 14315.033
 2656.7115, 2842.6815, 14333.476
 2641.6804, 2853.3718, 14351.921
 2626.4943, 2863.8439, 14370.368
 2611.1565, 2874.0952, 14388.816
 2595.67, 2884.1237, 14407.266
 2580.0385, 2893.9272, 14425.717
 2564.2648, 2903.5035, 14444.17
 2548.353, 2912.8505, 14462.624
 2532.306, 2921.9664, 14481.08
 2516.1276, 2930.8488, 14499.536
 2499.8212, 2939.496, 14517.994
 2483.3901, 2947.9063, 14536.452
 2466.8381, 2956.0774, 14554.911
 2450.1687, 2964.0079, 14573.371
 2433.3855, 2971.6957, 14591.831
 2416.492, 2979.1395, 14610.292
 2399.4921, 2986.3374, 14628.753
 2382.3889, 2993.2878, 14647.214
 2365.1865, 2999.9895, 14665.676
 2347.8884, 3006.441, 14684.138
 2330.4987, 3012.6405, 14702.6
 2313.0206, 3018.5868, 14721.062
 2295.458, 3024.2788, 14739.524
 2277.815, 3029.715, 14757.985
 2260.095, 3034.894, 14776.447
 2242.3021, 3039.8151, 14794.907
 2224.4402, 3044.4768, 14813.368
 2206.5128, 3048.8782, 14831.827
 2188.5242, 3053.0181, 14850.286
 2170.4782, 3056.8958, 14868.744
 2152.3783, 3060.5103, 14887.201
 2134.2291, 3063.8606, 14905.657
 2116.0339, 3066.946, 14924.112
 2097.7969, 3069.7657, 14942.566
 2079.5221, 3072.3193, 14961.018
 2061.2135, 3074.6058, 14979.469
 2042.8749, 3076.6248, 14997.918
 2024.5104, 3078.3757, 15016.366
 2006.1235, 3079.8584, 15034.813
 1987.7191, 3081.0718, 15053.257
 1969.3004, 3082.0162, 15071.7
 1950.872, 3082.6909, 15090.141
 1932.437, 3083.0958, 15108.58
 1914.0005, 3083.2308, 15127.017
 1895.5647, 3083.0967, 15145.454
 1877.1328, 3082.6946, 15163.89
 1858.7086, 3082.0243, 15182.326
 1840.2963, 3081.0862, 15200.762
 1821.8995, 3079.8804, 15219.199
 1803.5221, 3078.4072, 15237.635
 1785.1681, 3076.6669, 15256.071
 1766.8416, 3074.6598, 15274.507
 1748.5459, 3072.3864, 15292.944
 1730.2854, 3069.8471, 15311.38
 1712.0636, 3067.0425, 15329.816
 1693.8847, 3063.9732, 15348.253
 1675.7522, 3060.6397, 15366.689
 1657.6702, 3057.0431, 15385.125
 1639.6424, 3053.1837, 15403.562
 1621.6726, 3049.0626, 15421.998
 1603.7647, 3044.6805, 15440.434
 1585.9224, 3040.0385, 15458.87
 1568.1494, 3035.1374, 15477.307
 1550.4497, 3029.9784, 15495.743
 1532.8269, 3024.5625, 15514.179
 1515.2847, 3018.8909, 15532.615
 1497.8268, 3012.9648, 15551.052
 1480.4569, 3006.7853, 15569.488
 1463.1787, 3000.3539, 15587.924
 1445.9961, 2993.6719, 15606.361
 1428.9124, 2986.7408, 15624.797
 1411.9312, 2979.562, 15643.233
 1395.0563, 2972.1369, 15661.669
 1378.2911, 2964.4671, 15680.106
 1361.6393, 2956.5542, 15698.542
 1345.1044, 2948.4001, 15716.978
 1328.6896, 2940.0063, 15735.414
 1312.3988, 2931.3747, 15753.851
 1296.2352, 2922.5069, 15772.287
 1280.2024, 2913.4053, 15790.723
 1264.3035, 2904.0712, 15809.16
 1248.5421, 2894.5069, 15827.596
 1232.9216, 2884.7145, 15846.032
 1217.445, 2874.6959, 15864.468
 1202.1157, 2864.4532, 15882.905
 1186.9371, 2853.9887, 15901.341
 1171.9123, 2843.3046, 15919.777
 1157.0444, 2832.4029, 15938.214
 1142.3369, 2821.2864, 15956.65
 1127.7922, 2809.9569, 15975.086
 1113.4141, 2798.4172, 15993.522
 1099.2052, 2786.6697, 16011.959
 1085.1687, 2774.7166, 16030.395
 1071.3078, 2762.5608, 16048.831
 1057.6249, 2750.2047, 16067.267
 1044.1231, 2737.6507, 16085.704
 1030.8052, 2724.9017, 16104.14
 1017.6746, 2711.9604, 16122.576
 1004.7333, 2698.8295, 16141.013
 991.9844, 2685.5119, 16159.449
 979.4306, 2672.0101, 16177.885
 967.0744, 2658.3273, 16196.321
 954.9185, 2644.4662, 16214.758
 942.9654, 2630.4296, 16233.194
 931.2179, 2616.2209, 16251.63
 919.6776, 2601.8422, 16270.067
 908.3464, 2587.2957, 16288.506
 897.2265, 2572.5848, 16306.947
 886.3201, 2557.7122, 16325.39
 875.6298, 2542.6811, 16343.835
 865.1577, 2527.495, 16362.282
 854.9064, 2512.1572, 16380.73
 844.8779, 2496.6707, 16399.18
 835.0744, 2481.0392, 16417.631
 825.4981, 2465.2655, 16436.084
 816.1511, 2449.3537, 16454.538
 807.0352, 2433.3067, 16472.994
 798.1528, 2417.1283, 16491.45
 789.5056, 2400.8219, 16509.908
 781.0953, 2384.3908, 16528.366
 772.9242, 2367.8388, 16546.825
 764.9937, 2351.1694, 16565.285
 757.3059, 2334.3862, 16583.745
 749.8621, 2317.4927, 16602.206
 742.6642, 2300.4928, 16620.667
 735.7138, 2283.3896, 16639.128
 729.0121, 2266.1872, 16657.59
 722.5606, 2248.8891, 16676.052
 716.3611, 2231.4994, 16694.514
 710.4148, 2214.0213, 16712.976
 704.7228, 2196.4587, 16731.438
 699.2866, 2178.8157, 16749.899
 694.1076, 2161.0957, 16768.36
 689.1865, 2143.3028, 16786.821
 684.5248, 2125.4409, 16805.282
 680.1234, 2107.5135, 16823.741
 675.9835, 2089.5249, 16842.2
 672.1058, 2071.4789, 16860.658
 668.4913, 2053.379, 16879.115
 665.141, 2035.2298, 16897.571
 662.0556, 2017.0346, 16916.026
 659.2359, 1998.7976, 16934.48
 656.6823, 1980.5228, 16952.932
 654.3958, 1962.2142, 16971.383
 652.3768, 1943.8756, 16989.832
 650.6259, 1925.5111, 17008.28
 649.1432, 1907.1242, 17026.727
 647.9298, 1888.7198, 17045.171
 646.9854, 1870.3011, 17063.614
 646.3107, 1851.8727, 17082.055
 645.9058, 1833.4377, 17100.494
 645.7708, 1815.0013, 17118.931
ENDTABLE

XY_TABLE_ID(6)      6 ; Outer Loop; Right Lane Segment 1
SEGMENT_XY_TABLE(6) ! table with X (m), Y (m), and calculated station S (m)
 642.1132, 1815.0012, 0
 641.9617, 1794.9116, 20.09
 641.5073, 1774.8265, 40.18
 640.7501, 1754.7506, 60.271
 639.6903, 1734.6886, 80.361
 638.328, 1714.6448, 100.451
 636.6637, 1694.6235, 120.541
 634.6976, 1674.6298, 140.631
 632.4303, 1654.668, 160.721
 629.8623, 1634.7427, 180.811
 626.9941, 1614.8584, 200.901
 623.8263, 1595.0195, 220.992
 620.3598, 1575.2306, 241.082
 616.5953, 1555.4962, 261.172
 612.5336, 1535.8209, 281.262
 608.1757, 1516.2093, 301.352
 603.5226, 1496.6652, 321.443
 598.5753, 1477.1938, 341.533
 593.3349, 1457.7992, 361.623
 587.8027, 1438.4857, 381.713
 581.9799, 1419.2579, 401.803
 575.8679, 1400.1201, 421.893
 569.4679, 1381.0765, 441.984
 562.7815, 1362.1317, 462.074
 555.8102, 1343.2899, 482.164
 548.5555, 1324.5553, 502.254
 541.0192, 1305.9322, 522.344
 533.203, 1287.4249, 542.434
 525.1085, 1269.0376, 562.524
 516.7377, 1250.7744, 582.615
 508.0925, 1232.6395, 602.705
 499.1748, 1214.637, 622.795
 489.9866, 1196.7711, 642.885
 480.5301, 1179.0457, 662.975
 470.8074, 1161.465, 683.065
 460.8207, 1144.0329, 703.155
 450.5722, 1126.7533, 723.246
 440.0644, 1109.6302, 743.336
 429.2995, 1092.6675, 763.426
 418.2801, 1075.8691, 783.516
 407.0087, 1059.2387, 803.606
 395.4877, 1042.7802, 823.696
 383.7199, 1026.4973, 843.787
 371.7079, 1010.3937, 863.877
 359.4544, 994.473, 883.967
 346.9619, 978.739, 904.057
 334.0589, 962.488, 924.808
 321.4028, 946.0442, 945.558
 308.9961, 929.4115, 966.308
 296.8417, 912.5936, 987.059
 284.9422, 895.5943, 1007.809
 273.3004, 878.4175, 1028.559
 261.9189, 861.0671, 1049.309
 250.8004, 843.5471, 1070.06
 239.9473, 825.8615, 1090.81
 229.3621, 808.0141, 1111.56
 219.0472, 790.0092, 1132.31
 209.0051, 771.8508, 1153.061
 199.2378, 753.543, 1173.811
 189.7478, 735.0901, 1194.561
 180.5371, 716.4961, 1215.311
 171.6078, 697.7654, 1236.062
 162.9619, 678.9021, 1256.812
 154.6015, 659.9106, 1277.562
 146.5284, 640.7952, 1298.312
 138.7445, 621.5603, 1319.063
 131.2515, 602.2102, 1339.813
 124.0512, 582.7492, 1360.563
 117.1451, 563.1821, 1381.313
 110.5348, 543.5128, 1402.064
 104.2219, 523.7461, 1422.814
 98.2078, 503.8866, 1443.564
 92.4938, 483.9386, 1464.314
 87.0813, 463.9067, 1485.065
 81.9714, 443.7954, 1505.815
 77.1654, 423.6094, 1526.565
 72.6643, 403.3533, 1547.315
 68.4692, 383.0314, 1568.066
 64.581, 362.6488, 1588.816
 61.0005, 342.2096, 1609.566
 57.7288, 321.719, 1630.316
 54.7663, 301.1813, 1651.067
 52.1138, 280.6012, 1671.817
 49.772, 259.9836, 1692.567
 47.7413, 239.333, 1713.317
 46.0224, 218.6539, 1734.068
 44.6153, 197.9516, 1754.818
 43.5207, 177.2302, 1775.568
 42.7386, 156.4947, 1796.318
 42.2693, 135.7496, 1817.069
 42.1128, 115, 1837.819
 42.1128, -784.9998, 2737.819
 42.2692, -805.7494, 2758.569
 42.7385, -826.4945, 2779.319
 43.5206, -847.23, 2800.07
 44.6153, -867.9513, 2820.82
 46.0223, -888.6537, 2841.57
 47.7413, -909.3328, 2862.32
 49.7719, -929.9833, 2883.07
 52.1137, -950.601, 2903.821
 54.7662, -971.1811, 2924.571
 57.7286, -991.7188, 2945.321
 61.0004, -1012.2094, 2966.071
 64.5809, -1032.6486, 2986.822
 68.4691, -1053.0312, 3007.572
 72.6642, -1073.3531, 3028.322
 77.1653, -1093.6092, 3049.073
 81.9713, -1113.7952, 3069.823
 87.0812, -1133.9064, 3090.573
 92.4937, -1153.9384, 3111.323
 98.2077, -1173.8864, 3132.074
 104.2217, -1193.7459, 3152.824
 110.5346, -1213.5126, 3173.574
 117.1449, -1233.1819, 3194.324
 124.051, -1252.749, 3215.074
 131.2513, -1272.21, 3235.825
 138.7443, -1291.5601, 3256.575
 146.5282, -1310.795, 3277.325
 154.6014, -1329.9105, 3298.076
 162.9618, -1348.9019, 3318.826
 171.6076, -1367.7652, 3339.576
 180.5369, -1386.4959, 3360.326
 189.7476, -1405.0899, 3381.077
 199.2377, -1423.5429, 3401.827
 209.0049, -1441.8506, 3422.577
 219.047, -1460.009, 3443.327
 229.3619, -1478.0139, 3464.077
 239.9471, -1495.8613, 3484.828
 250.8002, -1513.5469, 3505.578
 261.9187, -1531.067, 3526.328
 273.3002, -1548.4173, 3547.079
 284.942, -1565.5941, 3567.829
 296.8415, -1582.5934, 3588.579
 308.9959, -1599.4113, 3609.329
 321.4026, -1616.044, 3630.08
 334.0587, -1632.4878, 3650.83
 346.9617, -1648.7388, 3671.58
 359.4542, -1664.4729, 3691.671
 371.7077, -1680.3935, 3711.761
 383.7197, -1696.4971, 3731.851
 395.4876, -1712.78, 3751.941
 407.0085, -1729.2386, 3772.031
 418.2799, -1745.8689, 3792.122
 429.2993, -1762.6674, 3812.212
 440.0642, -1779.63, 3832.302
 450.5721, -1796.7531, 3852.392
 460.8205, -1814.0327, 3872.482
 470.8072, -1831.4648, 3892.572
 480.5299, -1849.0456, 3912.663
 489.9865, -1866.7709, 3932.753
 499.1746, -1884.6369, 3952.843
 508.0923, -1902.6393, 3972.933
 516.7376, -1920.7742, 3993.023
 525.1083, -1939.0374, 4013.113
 533.2028, -1957.4248, 4033.203
 541.0191, -1975.9321, 4053.294
 548.5554, -1994.5552, 4073.384
 555.81, -2013.2897, 4093.474
 562.7814, -2032.1315, 4113.564
 569.4677, -2051.0763, 4133.654
 575.8677, -2070.1199, 4153.744
 581.9798, -2089.2577, 4173.835
 587.8026, -2108.4855, 4193.925
 593.3348, -2127.799, 4214.015
 598.5751, -2147.1936, 4234.105
 603.5224, -2166.665, 4254.195
 608.1756, -2186.2091, 4274.285
 612.5335, -2205.8207, 4294.375
 616.5951, -2225.496, 4314.466
 620.3597, -2245.2304, 4334.556
 623.8262, -2265.0193, 4354.646
 626.9939, -2284.8581, 4374.736
 629.8622, -2304.7425, 4394.826
 632.4302, -2324.6678, 4414.916
 634.6975, -2344.6296, 4435.007
 636.6636, -2364.6233, 4455.097
 638.3279, -2384.6446, 4475.187
 639.6902, -2404.6883, 4495.277
 640.75, -2424.7504, 4515.367
 641.5072, -2444.8263, 4535.457
 641.9616, -2464.9114, 4555.547
 642.1131, -2485.001, 4575.638
 642.2476, -2503.49, 4594.127
 642.6509, -2521.9751, 4612.617
 643.323, -2540.4524, 4631.106
 644.2639, -2558.9179, 4649.596
 645.4732, -2577.3678, 4668.085
 646.9506, -2595.7981, 4686.575
 648.696, -2614.2051, 4705.064
 650.7089, -2632.5846, 4723.553
 652.9888, -2650.9329, 4742.043
 655.5355, -2669.2462, 4760.532
 658.3481, -2687.5205, 4779.022
 661.4263, -2705.752, 4797.511
 664.7693, -2723.9368, 4816.001
 668.3764, -2742.0709, 4834.49
 672.2469, -2760.1507, 4852.98
 676.3799, -2778.1724, 4871.469
 680.7747, -2796.132, 4889.959
 685.43, -2814.0258, 4908.448
 690.3453, -2831.85, 4926.938
 695.5191, -2849.6008, 4945.427
 700.9506, -2867.2745, 4963.917
 706.6386, -2884.8673, 4982.406
 712.5819, -2902.3756, 5000.896
 718.7791, -2919.7954, 5019.385
 725.2291, -2937.1236, 5037.875
 731.9304, -2954.3559, 5056.364
 738.8815, -2971.4889, 5074.854
 746.081, -2988.5189, 5093.343
 753.5276, -3005.4426, 5111.832
 761.2195, -3022.2561, 5130.322
 769.1552, -3038.956, 5148.811
 777.3328, -3055.5386, 5167.301
 785.7509, -3072.0008, 5185.79
 794.4074, -3088.3386, 5204.28
 803.3007, -3104.5489, 5222.769
 812.4287, -3120.628, 5241.259
 821.7896, -3136.5725, 5259.748
 831.3815, -3152.3796, 5278.238
 841.2022, -3168.0451, 5296.727
 851.2498, -3183.5664, 5315.217
 861.522, -3198.9399, 5333.706
 872.0167, -3214.1623, 5352.196
 882.7317, -3229.2304, 5370.685
 893.6647, -3244.1412, 5389.175
 904.8133, -3258.8913, 5407.664
 916.1755, -3273.4777, 5426.153
 927.7485, -3287.8975, 5444.643
 939.53, -3302.1474, 5463.133
 951.5175, -3316.2243, 5481.622
 963.7084, -3330.1253, 5500.111
 976.1002, -3343.8477, 5518.601
 988.6904, -3357.3884, 5537.09
 1001.4763, -3370.7447, 5555.58
 1014.4548, -3383.9132, 5574.069
 1027.6235, -3396.8918, 5592.559
 1040.9797, -3409.6776, 5611.048
 1054.5204, -3422.2677, 5629.538
 1068.2427, -3434.6594, 5648.027
 1082.1438, -3446.8504, 5666.517
 1096.2208, -3458.838, 5685.006
 1110.4707, -3470.6195, 5703.496
 1124.8906, -3482.1928, 5721.986
 1139.4789, -3493.5567, 5740.478
 1154.2322, -3504.7086, 5758.972
 1169.1477, -3515.6463, 5777.468
 1184.2218, -3526.3673, 5795.966
 1199.4517, -3536.8695, 5814.465
 1214.8337, -3547.1503, 5832.967
 1230.3647, -3557.2075, 5851.47
 1246.0413, -3567.0391, 5869.974
 1261.8602, -3576.643, 5888.48
 1277.8178, -3586.0169, 5906.987
 1293.9108, -3595.1588, 5925.496
 1310.1358, -3604.0669, 5944.005
 1326.4893, -3612.739, 5962.516
 1342.9678, -3621.1732, 5981.027
 1359.5673, -3629.3681, 5999.54
 1376.2848, -3637.3211, 6018.052
 1393.1165, -3645.0312, 6036.566
 1410.0585, -3652.4962, 6055.08
 1427.1076, -3659.715, 6073.594
 1444.2598, -3666.6856, 6092.109
 1461.512, -3673.4064, 6110.624
 1478.8599, -3679.8765, 6129.139
 1496.2999, -3686.0938, 6147.654
 1513.8283, -3692.0573, 6166.169
 1531.4417, -3697.7658, 6184.684
 1549.1357, -3703.2176, 6203.199
 1566.9067, -3708.4116, 6221.714
 1584.7509, -3713.3468, 6240.228
 1602.6645, -3718.0221, 6258.742
 1620.6436, -3722.4363, 6277.255
 1638.684, -3726.588, 6295.767
 1656.7822, -3730.477, 6314.278
 1674.9343, -3734.102, 6332.788
 1693.136, -3737.4619, 6351.298
 1711.3837, -3740.5563, 6369.806
 1729.6734, -3743.3843, 6388.313
 1748.0009, -3745.9451, 6406.818
 1766.3624, -3748.2383, 6425.323
 1784.7541, -3750.2631, 6443.825
 1803.1716, -3752.0192, 6462.326
 1821.6113, -3753.506, 6480.826
 1840.0689, -3754.7229, 6499.324
 1858.5407, -3755.6701, 6517.82
 1877.0226, -3756.3468, 6536.314
 1895.5107, -3756.7531, 6554.807
 1914.0003, -3756.8883, 6573.297
 1932.4892, -3756.7539, 6591.786
 1950.9743, -3756.3506, 6610.275
 1969.4516, -3755.6785, 6628.765
 1987.9171, -3754.7376, 6647.254
 2006.367, -3753.5283, 6665.744
 2024.7973, -3752.0509, 6684.233
 2043.2043, -3750.3055, 6702.723
 2061.5838, -3748.2926, 6721.212
 2079.9321, -3746.0127, 6739.702
 2098.2454, -3743.466, 6758.191
 2116.5197, -3740.6534, 6776.681
 2134.7512, -3737.5752, 6795.17
 2152.936, -3734.2322, 6813.66
 2171.0701, -3730.6251, 6832.149
 2189.1499, -3726.7546, 6850.639
 2207.1716, -3722.6216, 6869.128
 2225.1312, -3718.2268, 6887.618
 2243.025, -3713.5715, 6906.107
 2260.8492, -3708.6562, 6924.597
 2278.6, -3703.4824, 6943.086
 2296.2737, -3698.0509, 6961.576
 2313.8665, -3692.3629, 6980.065
 2331.3748, -3686.4196, 6998.555
 2348.7946, -3680.2224, 7017.044
 2366.1228, -3673.7724, 7035.534
 2383.3551, -3667.0711, 7054.023
 2400.4881, -3660.12, 7072.512
 2417.5181, -3652.9205, 7091.002
 2434.4418, -3645.4739, 7109.491
 2451.2553, -3637.782, 7127.981
 2467.9552, -3629.8463, 7146.47
 2484.5378, -3621.6687, 7164.96
 2501, -3613.2506, 7183.449
 2517.3378, -3604.5941, 7201.939
 2533.5481, -3595.7008, 7220.428
 2549.6272, -3586.5728, 7238.918
 2565.5717, -3577.2119, 7257.407
 2581.3788, -3567.62, 7275.897
 2597.0443, -3557.7993, 7294.386
 2612.5656, -3547.7517, 7312.875
 2627.9391, -3537.4795, 7331.365
 2643.1615, -3526.9848, 7349.854
 2658.2296, -3516.2698, 7368.344
 2673.1404, -3505.3368, 7386.833
 2687.8905, -3494.1882, 7405.323
 2702.4769, -3482.826, 7423.812
 2716.8967, -3471.253, 7442.302
 2731.1466, -3459.4715, 7460.791
 2745.2235, -3447.484, 7479.281
 2759.1245, -3435.2931, 7497.77
 2772.8469, -3422.9013, 7516.26
 2786.3876, -3410.3111, 7534.749
 2799.7439, -3397.5252, 7553.239
 2812.9124, -3384.5467, 7571.728
 2825.891, -3371.378, 7590.218
 2838.6768, -3358.0218, 7608.707
 2851.2669, -3344.4811, 7627.197
 2863.6586, -3330.7588, 7645.686
 2875.8496, -3316.8577, 7664.176
 2887.8372, -3302.7807, 7682.665
 2899.6187, -3288.5308, 7701.155
 2911.192, -3274.1109, 7719.645
 2922.5559, -3259.5226, 7738.137
 2933.7078, -3244.7693, 7756.631
 2944.6455, -3229.8538, 7775.127
 2955.3665, -3214.7797, 7793.624
 2965.8687, -3199.5498, 7812.124
 2976.1495, -3184.1678, 7830.626
 2986.2067, -3168.6368, 7849.129
 2996.0383, -3152.9602, 7867.633
 3005.6422, -3137.1413, 7886.139
 3015.0161, -3121.1837, 7904.646
 3024.158, -3105.0907, 7923.155
 3033.0661, -3088.8657, 7941.664
 3041.7382, -3072.5122, 7960.175
 3050.1724, -3056.0337, 7978.686
 3058.3673, -3039.4342, 7997.198
 3066.3203, -3022.7167, 8015.711
 3074.0304, -3005.885, 8034.225
 3081.4954, -2988.943, 8052.739
 3088.7142, -2971.8939, 8071.253
 3095.6848, -2954.7417, 8089.767
 3102.4056, -2937.4895, 8108.283
 3108.8757, -2920.1416, 8126.798
 3115.093, -2902.7016, 8145.313
 3121.0565, -2885.1732, 8163.828
 3126.765, -2867.5598, 8182.343
 3132.2168, -2849.8658, 8200.858
 3137.4108, -2832.0948, 8219.373
 3142.346, -2814.2506, 8237.887
 3147.0213, -2796.337, 8256.4
 3151.4355, -2778.3579, 8274.913
 3155.5872, -2760.3175, 8293.425
 3159.4762, -2742.2193, 8311.937
 3163.1012, -2724.0672, 8330.447
 3166.4611, -2705.8655, 8348.956
 3169.5555, -2687.6178, 8367.465
 3172.3835, -2669.3281, 8385.972
 3174.9443, -2651.0006, 8404.477
 3177.2375, -2632.6391, 8422.981
 3179.2623, -2614.2474, 8441.484
 3181.0184, -2595.8299, 8459.985
 3182.5052, -2577.3902, 8478.485
 3183.7221, -2558.9326, 8496.982
 3184.6693, -2540.4608, 8515.479
 3185.346, -2521.9789, 8533.973
 3185.7523, -2503.4908, 8552.465
 3185.8875, -2485.0012, 8570.955
 3186.039, -2464.9117, 8591.046
 3186.4934, -2444.8266, 8611.136
 3187.2506, -2424.7507, 8631.226
 3188.3104, -2404.6886, 8651.316
 3189.6727, -2384.6449, 8671.406
 3191.337, -2364.6236, 8691.496
 3193.3031, -2344.6299, 8711.586
 3195.5704, -2324.6681, 8731.677
 3198.1384, -2304.7428, 8751.767
 3201.0067, -2284.8584, 8771.857
 3204.1744, -2265.0196, 8791.947
 3207.6409, -2245.2307, 8812.037
 3211.4055, -2225.4963, 8832.127
 3215.4671, -2205.821, 8852.218
 3219.825, -2186.2094, 8872.308
 3224.4782, -2166.6653, 8892.398
 3229.4255, -2147.1939, 8912.488
 3234.6658, -2127.7993, 8932.578
 3240.198, -2108.4858, 8952.668
 3246.0208, -2089.258, 8972.758
 3252.1329, -2070.1202, 8992.849
 3258.5329, -2051.0766, 9012.939
 3265.2192, -2032.1318, 9033.029
 3272.1906, -2013.29, 9053.119
 3279.4452, -1994.5555, 9073.209
 3286.9815, -1975.9324, 9093.299
 3294.7978, -1957.4251, 9113.39
 3302.8923, -1939.0377, 9133.48
 3311.263, -1920.7745, 9153.57
 3319.9083, -1902.6396, 9173.66
 3328.826, -1884.6372, 9193.75
 3338.0141, -1866.7712, 9213.84
 3347.4707, -1849.0459, 9233.93
 3357.1934, -1831.4651, 9254.021
 3367.1801, -1814.033, 9274.111
 3377.4285, -1796.7534, 9294.201
 3387.9364, -1779.6303, 9314.291
 3398.7013, -1762.6677, 9334.381
 3409.7207, -1745.8692, 9354.471
 3420.9921, -1729.2389, 9374.562
 3432.513, -1712.7803, 9394.652
 3444.2809, -1696.4974, 9414.742
 3456.2929, -1680.3938, 9434.832
 3468.5464, -1664.4732, 9454.922
 3481.0389, -1648.7391, 9475.013
 3493.9419, -1632.4881, 9495.763
 3506.598, -1616.0443, 9516.513
 3519.0047, -1599.4116, 9537.264
 3531.1591, -1582.5937, 9558.014
 3543.0586, -1565.5944, 9578.764
 3554.7004, -1548.4176, 9599.514
 3566.0819, -1531.0673, 9620.265
 3577.2004, -1513.5472, 9641.015
 3588.0535, -1495.8616, 9661.765
 3598.6387, -1478.0142, 9682.516
 3608.9536, -1460.0093, 9703.266
 3618.9957, -1441.8509, 9724.016
 3628.7629, -1423.5432, 9744.766
 3638.253, -1405.0902, 9765.516
 3647.4637, -1386.4962, 9786.267
 3656.393, -1367.7655, 9807.017
 3665.0388, -1348.9022, 9827.767
 3673.3992, -1329.9108, 9848.517
 3681.4724, -1310.7953, 9869.268
 3689.2563, -1291.5604, 9890.018
 3696.7493, -1272.2103, 9910.768
 3703.9496, -1252.7493, 9931.519
 3710.8557, -1233.1822, 9952.269
 3717.466, -1213.5129, 9973.019
 3723.7789, -1193.7462, 9993.769
 3729.7929, -1173.8867, 10014.519
 3735.5069, -1153.9387, 10035.27
 3740.9194, -1133.9067, 10056.02
 3746.0293, -1113.7955, 10076.77
 3750.8353, -1093.6095, 10097.52
 3755.3364, -1073.3534, 10118.271
 3759.5315, -1053.0315, 10139.021
 3763.4197, -1032.6489, 10159.771
 3767.0002, -1012.2097, 10180.522
 3770.272, -991.7191, 10201.272
 3773.2344, -971.1814, 10222.022
 3775.8869, -950.6013, 10242.772
 3778.2287, -929.9836, 10263.523
 3780.2593, -909.3331, 10284.273
 3781.9783, -888.654, 10305.023
 3783.3853, -867.9516, 10325.773
 3784.48, -847.2303, 10346.523
 3785.2621, -826.4948, 10367.274
 3785.7314, -805.7497, 10388.024
 3785.8878, -785.0001, 10408.774
 3785.8879, 114.9999, 11308.774
 3785.7314, 135.7495, 11329.524
 3785.2621, 156.4946, 11350.275
 3784.48, 177.2301, 11371.025
 3783.3854, 197.9515, 11391.775
 3781.9783, 218.6538, 11412.525
 3780.2594, 239.3329, 11433.276
 3778.2287, 259.9835, 11454.026
 3775.8869, 280.6011, 11474.776
 3773.2344, 301.1812, 11495.527
 3770.2719, 321.7189, 11516.277
 3767.0002, 342.2095, 11537.027
 3763.4197, 362.6487, 11557.777
 3759.5315, 383.0313, 11578.528
 3755.3364, 403.3532, 11599.278
 3750.8353, 423.6093, 11620.028
 3746.0293, 443.7953, 11640.778
 3740.9194, 463.9066, 11661.529
 3735.5069, 483.9385, 11682.279
 3729.7929, 503.8865, 11703.029
 3723.7788, 523.746, 11723.779
 3717.4659, 543.5127, 11744.53
 3710.8556, 563.182, 11765.28
 3703.9495, 582.7491, 11786.03
 3696.7492, 602.2101, 11806.78
 3689.2562, 621.5602, 11827.531
 3681.4723, 640.7951, 11848.281
 3673.3992, 659.9105, 11869.031
 3665.0388, 678.902, 11889.781
 3656.3929, 697.7653, 11910.532
 3647.4636, 716.496, 11931.282
 3638.2529, 735.09, 11952.032
 3628.7629, 753.5429, 11972.782
 3618.9956, 771.8507, 11993.533
 3608.9535, 790.0091, 12014.283
 3598.6386, 808.014, 12035.033
 3588.0534, 825.8614, 12055.783
 3577.2003, 843.547, 12076.534
 3566.0818, 861.067, 12097.284
 3554.7003, 878.4174, 12118.034
 3543.0585, 895.5942, 12138.784
 3531.159, 912.5935, 12159.535
 3519.0046, 929.4114, 12180.285
 3506.5979, 946.0441, 12201.035
 3493.9418, 962.4879, 12221.785
 3481.0388, 978.7389, 12242.536
 3468.5463, 994.4729, 12262.626
 3456.2928, 1010.3936, 12282.716
 3444.2808, 1026.4972, 12302.807
 3432.513, 1042.7801, 12322.897
 3420.992, 1059.2386, 12342.987
 3409.7206, 1075.869, 12363.077
 3398.7012, 1092.6674, 12383.167
 3387.9363, 1109.6301, 12403.257
 3377.4285, 1126.7532, 12423.348
 3367.18, 1144.0328, 12443.438
 3357.1933, 1161.4649, 12463.528
 3347.4706, 1179.0456, 12483.618
 3338.0141, 1196.771, 12503.708
 3328.8259, 1214.6369, 12523.798
 3319.9082, 1232.6394, 12543.888
 3311.263, 1250.7743, 12563.979
 3302.8922, 1269.0375, 12584.069
 3294.7977, 1287.4248, 12604.159
 3286.9815, 1305.9321, 12624.249
 3279.4452, 1324.5552, 12644.339
 3272.1905, 1343.2898, 12664.429
 3265.2192, 1362.1316, 12684.52
 3258.5328, 1381.0764, 12704.61
 3252.1328, 1400.12, 12724.7
 3246.0208, 1419.2578, 12744.79
 3240.198, 1438.4856, 12764.88
 3234.6658, 1457.7991, 12784.97
 3229.4254, 1477.1937, 12805.061
 3224.4781, 1496.6651, 12825.151
 3219.825, 1516.2092, 12845.241
 3215.4671, 1535.8208, 12865.331
 3211.4054, 1555.4961, 12885.421
 3207.6409, 1575.2305, 12905.511
 3204.1744, 1595.0194, 12925.602
 3201.0066, 1614.8583, 12945.692
 3198.1384, 1634.7426, 12965.782
 3195.5704, 1654.6679, 12985.872
 3193.3031, 1674.6297, 13005.962
 3191.337, 1694.6234, 13026.052
 3189.6727, 1714.6447, 13046.143
 3188.3104, 1734.6885, 13066.233
 3187.2506, 1754.7505, 13086.323
 3186.4934, 1774.8264, 13106.413
 3186.039, 1794.9115, 13126.503
 3185.8875, 1815.0011, 13146.593
 3185.7532, 1833.4901, 13165.083
 3185.3499, 1851.9752, 13183.572
 3184.6778, 1870.4525, 13202.062
 3183.7369, 1888.918, 13220.551
 3182.5276, 1907.3679, 13239.041
 3181.0502, 1925.7982, 13257.53
 3179.3048, 1944.2052, 13276.02
 3177.2919, 1962.5847, 13294.509
 3175.012, 1980.933, 13312.998
 3172.4653, 1999.2463, 13331.488
 3169.6527, 2017.5206, 13349.977
 3166.5745, 2035.7521, 13368.467
 3163.2315, 2053.9369, 13386.957
 3159.6244, 2072.071, 13405.446
 3155.7539, 2090.1508, 13423.935
 3151.6209, 2108.1725, 13442.425
 3147.2261, 2126.1321, 13460.914
 3142.5708, 2144.0259, 13479.404
 3137.6555, 2161.8501, 13497.893
 3132.4817, 2179.6009, 13516.383
 3127.0502, 2197.2746, 13534.872
 3121.3622, 2214.8674, 13553.362
 3115.4189, 2232.3757, 13571.851
 3109.2217, 2249.7955, 13590.341
 3102.7717, 2267.1237, 13608.83
 3096.0704, 2284.356, 13627.32
 3089.1193, 2301.489, 13645.809
 3081.9198, 2318.519, 13664.298
 3074.4732, 2335.4427, 13682.788
 3066.7813, 2352.2562, 13701.277
 3058.8456, 2368.9561, 13719.767
 3050.668, 2385.5387, 13738.256
 3042.2499, 2402.0009, 13756.746
 3033.5934, 2418.3387, 13775.235
 3024.7001, 2434.549, 13793.725
 3015.5721, 2450.6281, 13812.214
 3006.2112, 2466.5726, 13830.704
 2996.6193, 2482.3797, 13849.193
 2986.7986, 2498.0452, 13867.683
 2976.751, 2513.5665, 13886.172
 2966.4788, 2528.94, 13904.662
 2955.9841, 2544.1624, 13923.151
 2945.2691, 2559.2305, 13941.641
 2934.3361, 2574.1413, 13960.13
 2923.1875, 2588.8914, 13978.619
 2911.8253, 2603.4778, 13997.109
 2900.2523, 2617.8976, 14015.599
 2888.4708, 2632.1475, 14034.088
 2876.4833, 2646.2244, 14052.578
 2864.2924, 2660.1254, 14071.067
 2851.9006, 2673.8478, 14089.556
 2839.3104, 2687.3885, 14108.046
 2826.5245, 2700.7448, 14126.536
 2813.546, 2713.9133, 14145.025
 2800.3773, 2726.8919, 14163.514
 2787.0211, 2739.6777, 14182.004
 2773.4804, 2752.2678, 14200.493
 2759.7581, 2764.6595, 14218.983
 2745.857, 2776.8505, 14237.472
 2731.78, 2788.8381, 14255.962
 2717.5301, 2800.6196, 14274.451
 2703.1102, 2812.1929, 14292.941
 2688.5219, 2823.5568, 14311.433
 2673.7686, 2834.7087, 14329.927
 2658.8531, 2845.6464, 14348.423
 2643.779, 2856.3674, 14366.921
 2628.5491, 2866.8696, 14385.421
 2613.1671, 2877.1504, 14403.922
 2597.6361, 2887.2076, 14422.425
 2581.9595, 2897.0392, 14440.93
 2566.1406, 2906.6431, 14459.436
 2550.183, 2916.017, 14477.943
 2534.09, 2925.1589, 14496.451
 2517.865, 2934.067, 14514.961
 2501.5115, 2942.7391, 14533.472
 2485.033, 2951.1733, 14551.983
 2468.4335, 2959.3682, 14570.495
 2451.716, 2967.3212, 14589.008
 2434.8843, 2975.0313, 14607.522
 2417.9423, 2982.4963, 14626.035
 2400.8932, 2989.7151, 14644.55
 2383.741, 2996.6857, 14663.064
 2366.4888, 3003.4065, 14681.579
 2349.1409, 3009.8766, 14700.094
 2331.7009, 3016.0939, 14718.61
 2314.1725, 3022.0574, 14737.125
 2296.5591, 3027.7659, 14755.64
 2278.8651, 3033.2177, 14774.155
 2261.0941, 3038.4117, 14792.669
 2243.2499, 3043.3469, 14811.183
 2225.3363, 3048.0222, 14829.697
 2207.3572, 3052.4364, 14848.21
 2189.3168, 3056.5881, 14866.722
 2171.2186, 3060.4771, 14885.233
 2153.0665, 3064.1021, 14903.744
 2134.8648, 3067.462, 14922.253
 2116.6171, 3070.5564, 14940.761
 2098.3274, 3073.3844, 14959.268
 2079.9999, 3075.9452, 14977.774
 2061.6384, 3078.2384, 14996.278
 2043.2467, 3080.2632, 15014.781
 2024.8292, 3082.0193, 15033.282
 2006.3895, 3083.5061, 15051.781
 1987.9319, 3084.723, 15070.279
 1969.4601, 3085.6702, 15088.775
 1950.9782, 3086.3469, 15107.269
 1932.4901, 3086.7532, 15125.762
 1914.0005, 3086.8884, 15144.252
 1895.5115, 3086.7539, 15162.742
 1877.0264, 3086.3506, 15181.231
 1858.5491, 3085.6785, 15199.721
 1840.0836, 3084.7376, 15218.21
 1821.6337, 3083.5283, 15236.7
 1803.2034, 3082.0509, 15255.189
 1784.7964, 3080.3055, 15273.679
 1766.4169, 3078.2926, 15292.168
 1748.0686, 3076.0127, 15310.657
 1729.7553, 3073.466, 15329.147
 1711.481, 3070.6534, 15347.636
 1693.2495, 3067.5752, 15366.126
 1675.0647, 3064.2322, 15384.615
 1656.9306, 3060.6251, 15403.105
 1638.8508, 3056.7546, 15421.594
 1620.8291, 3052.6216, 15440.084
 1602.8695, 3048.2268, 15458.573
 1584.9757, 3043.5715, 15477.063
 1567.1515, 3038.6562, 15495.552
 1549.4007, 3033.4824, 15514.042
 1531.727, 3028.0509, 15532.531
 1514.1342, 3022.3629, 15551.021
 1496.6259, 3016.4196, 15569.51
 1479.2061, 3010.2224, 15588
 1461.8779, 3003.7724, 15606.489
 1444.6456, 2997.0711, 15624.979
 1427.5126, 2990.12, 15643.468
 1410.4826, 2982.9205, 15661.957
 1393.5589, 2975.4739, 15680.447
 1376.7454, 2967.782, 15698.936
 1360.0455, 2959.8463, 15717.426
 1343.4629, 2951.6687, 15735.915
 1327.0007, 2943.2506, 15754.405
 1310.6629, 2934.5941, 15772.894
 1294.4526, 2925.7008, 15791.384
 1278.3735, 2916.5728, 15809.873
 1262.429, 2907.2119, 15828.363
 1246.6219, 2897.62, 15846.852
 1230.9564, 2887.7993, 15865.342
 1215.4351, 2877.7517, 15883.831
 1200.0616, 2867.4795, 15902.321
 1184.8392, 2856.9848, 15920.81
 1169.7711, 2846.2698, 15939.3
 1154.8603, 2835.3368, 15957.789
 1140.1102, 2824.1882, 15976.278
 1125.5238, 2812.826, 15994.768
 1111.104, 2801.253, 16013.258
 1096.8541, 2789.4715, 16031.747
 1082.7772, 2777.484, 16050.237
 1068.8762, 2765.2931, 16068.726
 1055.1538, 2752.9013, 16087.215
 1041.6131, 2740.3111, 16105.705
 1028.2568, 2727.5252, 16124.195
 1015.0883, 2714.5467, 16142.684
 1002.1097, 2701.378, 16161.173
 989.3239, 2688.0218, 16179.663
 976.7338, 2674.4811, 16198.152
 964.3421, 2660.7588, 16216.642
 952.1511, 2646.8577, 16235.131
 940.1635, 2632.7807, 16253.621
 928.382, 2618.5308, 16272.11
 916.8087, 2604.1109, 16290.6
 905.4448, 2589.5226, 16309.092
 894.2929, 2574.7693, 16327.586
 883.3552, 2559.8538, 16346.082
 872.6342, 2544.7797, 16364.58
 862.132, 2529.5498, 16383.08
 851.8512, 2514.1678, 16401.581
 841.794, 2498.6368, 16420.084
 831.9624, 2482.9602, 16438.589
 822.3585, 2467.1413, 16457.095
 812.9846, 2451.1837, 16475.602
 803.8427, 2435.0907, 16494.11
 794.9346, 2418.8657, 16512.62
 786.2625, 2402.5122, 16531.13
 777.8283, 2386.0337, 16549.642
 769.6334, 2369.4342, 16568.154
 761.6804, 2352.7167, 16586.667
 753.9703, 2335.885, 16605.181
 746.5053, 2318.943, 16623.694
 739.2865, 2301.8939, 16642.209
 732.3159, 2284.7417, 16660.723
 725.5951, 2267.4895, 16679.238
 719.125, 2250.1416, 16697.753
 712.9077, 2232.7016, 16716.268
 706.9442, 2215.1732, 16734.784
 701.2357, 2197.5598, 16753.299
 695.7839, 2179.8658, 16771.814
 690.5899, 2162.0948, 16790.328
 685.6547, 2144.2506, 16808.842
 680.9794, 2126.337, 16827.356
 676.5652, 2108.3579, 16845.869
 672.4135, 2090.3175, 16864.381
 668.5245, 2072.2193, 16882.892
 664.8995, 2054.0672, 16901.403
 661.5396, 2035.8655, 16919.912
 658.4452, 2017.6178, 16938.42
 655.6172, 1999.3281, 16956.927
 653.0564, 1981.0006, 16975.433
 650.7632, 1962.6391, 16993.937
 648.7384, 1944.2474, 17012.44
 646.9823, 1925.8299, 17030.941
 645.4955, 1907.3902, 17049.44
 644.2786, 1888.9326, 17067.938
 643.3314, 1870.4608, 17086.434
 642.6547, 1851.9789, 17104.928
 642.2484, 1833.4908, 17123.421
 642.1132, 1815.0012, 17141.911
ENDTABLE


!------------------------------------------------------------------------------------
! VS TERRAIN
!------------------------------------------------------------------------------------
VS_TERRAIN_FILE D:\product_dev\Product_Checkouts\trunk\Image\TruckSim\Core\TruckSim_Data\Scene_Import\VS_Scene_Builder\Highway_Loop.vsterrain ;

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER KP = 0.4; - ;
DEFINE_PARAMETER KI = 0.00125; - ;
DEFINE_PARAMETER PLATOON = 199; - ; Platooning Truck (object type)
DEFINE_PARAMETER TRAFFIC = 200; - ; Traffic vehicle (object type)

DEFINE_VARIABLE SPACING_TARGET = 10; - ;
DEFINE_VARIABLE INT_TARGET_DELTA = 0; - ;

DEFINE_IMPORT IMP_LEAD_SPEED_TARGET = 0; - ;
DEFINE_IMPORT IMP_CAR1_X = 0; - ;
DEFINE_IMPORT IMP_CAR1_Y = 0; - ;
DEFINE_IMPORT IMP_CAR1_Z = 0; - ;
DEFINE_IMPORT IMP_CAR1_ROLL = 0; - ;
DEFINE_IMPORT IMP_CAR1_PITCH = 0; - ;
DEFINE_IMPORT IMP_CAR1_YAW = 0; - ;

DEFINE_OUTPUT lead_speed = 0; - ; lead_speed 
DEFINE_OUTPUT PathID = 1010; - ; Current Path ID 
DEFINE_OUTPUT target_delta = 8.02782; - ; target_delta 

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT X_OBJ_1 = 0;
EQ_INIT Y_OBJ_1 = 0;
EQ_INIT HEADO_2 = 0;
EQ_INIT S_OBJ_2 = 1370;
EQ_INIT V_OBJ_2 = INTRUDER_SPD(0, T, 1);
EQ_INIT YAWO_2 = PATH_YAW_ID(S_OBJ_2, 1100, LTARG_ID_OBJ(2), 1) + HEADO_2;

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST BEFORE THE RUNS STARTS)
!------------------------------------------------------------------------------------
EQ_INIT2 X_OBJ_1 = IMP_CAR1_X;
EQ_INIT2 Y_OBJ_1 = IMP_CAR1_Y;
EQ_INIT2 Z_OBJ_1 = IMP_CAR1_Z;
EQ_INIT2 ROLLO_1 = IMP_CAR1_ROLL*PI/180;
EQ_INIT2 PITCHO1 = IMP_CAR1_PITCH*PI/180;
EQ_INIT2 YAWO_1 = IMP_CAR1_YAW*PI/180;

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN KP = IF(DISS1_1 < 3, 0.4, 0.1);
EQ_IN SPEED_TARGET_CONSTANT(2) = LEAD_SPEED/3.6 + KP*TARGET_DELTA + KI*INT_TARGET_DELTA;
EQ_IN X_OBJ_1 = IMP_CAR1_X;
EQ_IN Y_OBJ_1 = IMP_CAR1_Y;
EQ_IN Z_OBJ_1 = IMP_CAR1_Z;
EQ_IN ROLLO_1 = IMP_CAR1_ROLL*PI/180;
EQ_IN PITCHO1 = IMP_CAR1_PITCH*PI/180;
EQ_IN YAWO_1 = IMP_CAR1_YAW*PI/180;
EQ_IN SPACING_TARGET = IF(((DISS1_2 > 0) & (DISS1_1 > DISS1_2)) & (ABS(Y_S1_2) < 0.25), 15, 10);

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT LEAD_SPEED = IMP_LEAD_SPEED_TARGET;
EQ_OUT PATHID = PATH_ID_DM;
EQ_OUT TARGET_DELTA = DISS1_1 -SPACING_TARGET;
EQ_OUT V_OBJ_2 = INTRUDER_SPD(0, T, 1);

!------------------------------------------------------------------------------------
! DIFFERENTIAL EQUATIONS FOR NEW STATE VARIABLES (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_DIFFERENTIAL INT_TARGET_DELTA = TARGET_DELTA;

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_LEAD_SPEED_TARGET ADD 0 ; - ! #1. defined at run time with DEFINE_IMPORT
IMPORT IMP_PCON_BK ADD 0 ; MPa ! #2. Brake master cylinder pressure
IMPORT IMP_CAR1_X ADD 0 ; - ! #3. defined at run time with DEFINE_IMPORT
IMPORT IMP_CAR1_Y ADD 0 ; - ! #4. defined at run time with DEFINE_IMPORT
IMPORT IMP_CAR1_Z ADD 0 ; - ! #5. defined at run time with DEFINE_IMPORT
IMPORT IMP_CAR1_ROLL ADD 0 ; - ! #6. defined at run time with DEFINE_IMPORT
IMPORT IMP_CAR1_PITCH ADD 0 ; - ! #7. defined at run time with DEFINE_IMPORT
IMPORT IMP_CAR1_YAW ADD 0 ; - ! #8. defined at run time with DEFINE_IMPORT

!------------------------------------------------------------------------------------
! EXPORTED VARIABLES
!------------------------------------------------------------------------------------
EXPORT XO 595.0421704 ! #1. X coordinate, unit 1 origin (m)
EXPORT YO 1333.637383 ! #2. Y coordinate, unit 1 origin (m)
EXPORT ZO 0.02384140578 ! #3. Z coordinate, unit 1 origin (m)
EXPORT ROLL_E 1.314064958e-05 ! #4. Roll (Euler), unit 1 (deg)
EXPORT PITCH -0.2267377196 ! #5. Pitch, unit 1 (deg)
EXPORT YAW 69.46719634 ! #6. Yaw, unit 1 (deg)


END
