PARSFILE
! TruckSim 2022.1
! Revision 180841, June 1, 2022
MODEL_LAYOUT SS_SSS__S

DATASET_TITLE eTractor 10x10, 10 Motors: Intersection
CATEGORY Powertrain: Electric
TITLE eTractor 10x10, 10 Motors: Intersection <Powertrain: Electric>

! Echo: Results\Run_05f588c7-7c4a-4ae0-b3d6-c1cece69ef3f\Run_echo.par
! This run was made 14:49 on June 02, 2022.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   211 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      307 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_DEFAULT    1 ! [D] Identify values not read? 1 -> yes, show [D], 0 -> no
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    0 ! Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.5177054467 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             45 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       45 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              90 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    2 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    6 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 5 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 1 ! Number of axles on unit 2 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL(1) 762.6736013 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 3246.573651 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) 0.08436627086 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        8099 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 8696.226533 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 98462.76638 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 95938.73225 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! H_CG_TL(2) 944.826003 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 5605.030891 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(2) 0.013853557 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        6798 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 10290.99027 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 180156.6935 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 188732.2032 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU(1)       1019 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1400 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          3900 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)        6879 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)       21711 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)       19665 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)         130 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT        1100 ; mm ! Height (Z) of front hitch point in SM coordinate system
                      ! [I]
H_CG_SU(2)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      5220 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          6000 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)      9959.7 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)      171336 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)      179992 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(2)          180 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(2)        2438 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.

OPT_HITCH_TYPE(1)   1 ! Type of hitch: 1 -> generic (5th wheel or ball/pintle), 2 ->
                      ! simple ball or pintle, 3 -> hinged tow bar, 4 ->
                      ! Articulation system [I]
! FZH_L(1) 22705.27906 ; N ! CALC -- Static load, laden vehicle, hitch 1
! FZH_UL(1) 22705.27906 ; N ! CALC -- Static load, unladen vehicle, hitch 1
HITCH_DMP_X(1)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 1
HITCH_DMP_Y(1)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 1
HITCH_DMP_Z(1)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 1
HITCH_FRIC_X(1)     0 ; N-m ! [D] Roll friction, hitch 1
HITCH_FRIC_Y(1)     0 ; N-m ! [D] Pitch friction, hitch 1
HITCH_FRIC_Z(1)     0 ; N-m ! [D] Articulation friction, hitch 1
HITCH_FREQ(1)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 1 [I]
HITCH_ZETA(1)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 1 [I]
H_H(1)           1090 ; mm ! Hitch point height (Z coord.), sprung mass [I]
LX_H(1)          6000 ; mm ! X dist. hitch is behind sprung mass origin [I]
Y_H(1)              0 ; mm ! Y coordinate, hitch point [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      7.3 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    6000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -3000 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        0 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)       0 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)       0 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
OPT_SUSP_Y_AXLE_ROLL(1,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    485 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       485 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       485 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            60 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
IA_YY(1,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2070 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    174 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    22 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    22 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       400 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.565 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
X_CG_AXLE(1,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 1 [I]
Y_CG_AXLE(1,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
OPT_SUSP_Y_AXLE_ROLL(1,2) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    485 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       485 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       485 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)            60 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
IA_YY(1,2)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          10 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          10 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     2070 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     1100 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    174 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)    22 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)    22 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)       400 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.565 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
X_CG_AXLE(1,2)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,2)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 2 [I]
Y_CG_AXLE(1,2)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Solid-axle suspension for axle 3 on unit 1
OPT_JNC_DESIGN(1,3) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
OPT_SUSP_Y_AXLE_ROLL(1,3) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,3,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(1,3,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(1,3,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(1,3,2)        0 ; deg ! Static toe for wheel R3 [I]
H_CG_AXLE(1,3)    530 ; mm ! Z coordinate of axle 3 CG [I]
H_WC(1,3,1)       530 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(1,3,2)       530 ; mm ! Reference Z coordinate of wheel center R3 [I]
IA(1,3)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 3 [I]
IA_YY(1,3)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 3 [I]
! ISPIN(1,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(1,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(1,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(1,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(1,3,1)          20 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(1,3,2)          20 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(1,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(1,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(1,3,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(1,3,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(1,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(1,3)     4900 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_AXLE(1,3)    769 ; kg ! Unsteered mass for axle 3 [I]
M_US_STR(1,3,1)     0 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(1,3,2)     0 ; kg ! Steered mass for wheel R3 [I]
! M_US(1,3)      1133 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(1,3) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
X_CG_AXLE(1,3)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,3)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 3 [I]
Y_CG_AXLE(1,3)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(1,3)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 4 on unit 1
OPT_JNC_DESIGN(1,4) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
OPT_SUSP_Y_AXLE_ROLL(1,4) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,4,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(1,4,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(1,4,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(1,4,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(1,4)    530 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(1,4,1)       530 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(1,4,2)       530 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(1,4)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
IA_YY(1,4)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 4 [I]
! ISPIN(1,4,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(1,4,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(1,4,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(1,4,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(1,4,1)          20 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(1,4,2)          20 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(1,4,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(1,4,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(1,4,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(1,4,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(1,4)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(1,4)     6000 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(1,4)    769 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(1,4,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(1,4,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(1,4)      1133 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(1,4) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
X_CG_AXLE(1,4)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,4)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 4 [I]
Y_CG_AXLE(1,4)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,4)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(1,4)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 5 on unit 1
OPT_JNC_DESIGN(1,5) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
OPT_SUSP_Y_AXLE_ROLL(1,5) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(1,5,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(1,5,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(1,5,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(1,5,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(1,5)    530 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(1,5,1)       530 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(1,5,2)       530 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(1,5)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
IA_YY(1,5)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 5 [I]
! ISPIN(1,5,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(1,5,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(1,5,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(1,5,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(1,5,1)          20 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(1,5,2)          20 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(1,5,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(1,5,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(1,5,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(1,5,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(1,5)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(1,5)     7100 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(1,5)    769 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(1,5,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(1,5,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(1,5)      1133 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(1,5) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
X_CG_AXLE(1,5)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(1,5)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 5 [I]
Y_CG_AXLE(1,5)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,5)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(1,5)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Solid-axle suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
OPT_SUSP_Y_AXLE_ROLL(2,1) 0 ! SUSP_Y_AXLE_ROLL gives kinematic lateral displacement
                            ! of 0 -> axle X-Y reference frame (legacy), 1 -> axle
                            ! center point [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R6 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L6 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R6 [I]
H_CG_AXLE(2,1)    530 ; mm ! Z coordinate of axle 6 CG [I]
H_WC(2,1,1)       530 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(2,1,2)       530 ; mm ! Reference Z coordinate of wheel center R6 [I]
IA(2,1)           155 ; kg-m2 ! Yaw and roll moment of inertia, axle 6 [I]
IA_YY(2,1)          0 ; kg-m2 ! [D] Pitch moment of inertia, axle 6 [I]
! ISPIN(2,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L6 [I]
! ISPIN(2,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R6 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L6 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R6 [I]
IW(2,1,1)          20 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(2,1,2)          20 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(2,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(2,1)     8500 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_AXLE(2,1)    434 ; kg ! Unsteered mass for axle 6 [I]
M_US_STR(2,1,1)     0 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(2,1,2)     0 ; kg ! Steered mass for wheel R6 [I]
! M_US(2,1)       798 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(2,1) 0.4561403509 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
X_CG_AXLE(2,1)      0 ; mm ! [D] X offset of M_US_AXLE CG from axle center [I]
! X_CG_SUSP(2,1)    0 ; mm ! CALC -- X coord. for total unsprung mass, axle 6 [I]
Y_CG_AXLE(2,1)      0 ; mm ! Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
! CMP_DESIGN(1,1,1) 40.35121583 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 40.35121583 ; mm ! CALC -- Compression at design load, spring R1
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 16140.48633 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 16140.48633 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 8070.243165 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 8070.243165 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 20063.14633 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 20063.14633 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 10031.57317 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 10031.57317 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 1782.475301 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,2,1) 40.35121583 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 40.35121583 ; mm ! CALC -- Compression at design load, spring R2
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 16140.48633 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 16140.48633 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 8070.243165 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 8070.243165 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 20063.14633 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 20063.14633 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 10031.57317 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 10031.57317 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 1782.475301 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1100 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2)  890 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2)  890 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)    890 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Solid-axle suspension for axle 3 on unit 1
OPT_EXT_SP(1,3,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,3,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,3,1) 1.104622655 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(1,3,2) 1.104622655 ; mm ! CALC -- Compression at design load, spring R3
CMP_OFFSET(1,3,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(1,3,2)   0 ; mm ! Initial compression of external spring R3 [I]
DAUX(1,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
DMP_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L3 [I]
DMP_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R3 [I]
DMP_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L3 [I]
DMP_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R3 [I]
DMP_LEN(1,3,1)      0 ; mm ! [D] Length at design for damper L3 [I]
DMP_LEN(1,3,2)      0 ; mm ! [D] Length at design for damper R3 [I]
SPG_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L3 [I]
SPG_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R3 [I]
SPG_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L3 [I]
SPG_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R3 [I]
SPG_LEN(1,3,1)      0 ; mm ! [D] Length at design for spring L3 [I]
SPG_LEN(1,3,2)      0 ; mm ! [D] Length at design for spring R3 [I]
! FSA_DESIGN(1,3) 1988.32078 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(1,3) 9556.747133 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(1,3,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(1,3,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(1,3,1) 4778.373566 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(1,3,2) 4778.373566 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(1,3) 20667.68158 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(1,3) 13099.25523 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(1,3,1) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(1,3,2) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(1,3) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_DAMPERS(1,3)   1000 ; mm ! Distance between dampers on axle 3 [I]
Y_DAMPERS(1,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 3 [I]
L_JNC_STOPS(1,3) 1000 ; mm ! Distance between jounce stops on axle 3 [I]
L_REB_STOPS(1,3) 1000 ; mm ! Distance between rebound stops on axle 3 [I]
L_SPRINGS(1,3)   1000 ; mm ! Distance between springs on axle 3 [I]
Y_SPRINGS(1,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 3 [I]
L_SPG_ADJ(1,3,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(1,3,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(1,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(1,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(1,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(1,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 4 on unit 1
OPT_EXT_SP(1,4,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,4,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,4) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,4,1) 1.104622655 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(1,4,2) 1.104622655 ; mm ! CALC -- Compression at design load, spring R4
CMP_OFFSET(1,4,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(1,4,2)   0 ; mm ! Initial compression of external spring R4 [I]
DAUX(1,4)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(1,4,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(1,4,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(1,4,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(1,4,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(1,4,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(1,4,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(1,4,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(1,4,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(1,4,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(1,4,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(1,4,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(1,4,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(1,4) 1988.32078 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(1,4) 9556.747133 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(1,4,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(1,4,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(1,4,1) 4778.373566 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(1,4,2) 4778.373566 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(1,4) 20667.68158 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(1,4) 13099.25523 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(1,4,1) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(1,4,2) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(1,4) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(1,4)   1000 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(1,4)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(1,4) 1000 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(1,4) 1000 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(1,4)   1000 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(1,4)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(1,4,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(1,4,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(1,4,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(1,4,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(1,4,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(1,4,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 5 on unit 1
OPT_EXT_SP(1,5,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,5,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,5) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(1,5,1) 1.104622655 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(1,5,2) 1.104622655 ; mm ! CALC -- Compression at design load, spring R5
CMP_OFFSET(1,5,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(1,5,2)   0 ; mm ! Initial compression of external spring R5 [I]
DAUX(1,5)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(1,5,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(1,5,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(1,5,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(1,5,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(1,5,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(1,5,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(1,5,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(1,5,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(1,5,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(1,5,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(1,5,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(1,5,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(1,5) 1988.32078 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(1,5) 9556.747133 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(1,5,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(1,5,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(1,5,1) 4778.373566 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(1,5,2) 4778.373566 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(1,5) 20667.68158 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(1,5) 13099.25523 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(1,5,1) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(1,5,2) 10333.84079 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(1,5) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(1,5)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(1,5)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(1,5) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(1,5) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(1,5)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(1,5)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(1,5,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(1,5,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(1,5,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(1,5,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(1,5,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(1,5,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Solid-axle suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
! CMP_DESIGN(2,1,1) 25.81044353 ; mm ! CALC -- Compression at design load, spring L6
! CMP_DESIGN(2,1,2) 25.81044353 ; mm ! CALC -- Compression at design load, spring R6
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R6 [I]
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
DMP_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L6 [I]
DMP_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R6 [I]
DMP_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L6 [I]
DMP_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R6 [I]
DMP_LEN(2,1,1)      0 ; mm ! [D] Length at design for damper L6 [I]
DMP_LEN(2,1,2)      0 ; mm ! [D] Length at design for damper R6 [I]
SPG_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L6 [I]
SPG_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R6 [I]
SPG_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L6 [I]
SPG_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R6 [I]
SPG_LEN(2,1,1)      0 ; mm ! [D] Length at design for spring L6 [I]
SPG_LEN(2,1,2)      0 ; mm ! [D] Length at design for spring R6 [I]
! FSA_DESIGN(2,1) 36134.62094 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(2,1) 36134.62094 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(2,1,1) 18067.31047 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(2,1,2) 18067.31047 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(2,1) 43960.32764 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(2,1) 43960.32764 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(2,1,1) 21980.16382 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(2,1,2) 21980.16382 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(2,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_DAMPERS(2,1)   1000 ; mm ! Distance between dampers on axle 6 [I]
Y_DAMPERS(2,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 6 [I]
L_JNC_STOPS(2,1) 1000 ; mm ! Distance between jounce stops on axle 6 [I]
L_REB_STOPS(2,1) 1000 ; mm ! Distance between rebound stops on axle 6 [I]
L_SPRINGS(2,1)   1000 ; mm ! Distance between springs on axle 6 [I]
Y_SPRINGS(2,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 6 [I]
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control).

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
OPT_I_GEAR_IN       0 ! [D] Add wheel and suspension inertias for axle 1 to
                      ! I_GEAR_IN? 0 -> no, 1 = yes [I]
BETA_COL          0.1 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL           0.1 ; N-m ! [D] Steering column friction torque
I_COL            0.01 ; kg-m2 ! [D] Steering column inertia used with torque input
I_GEAR_IN      0.0001 ; kg-m2 ! [D] Steering system inertia
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  0 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,2)         1 ! Compliant steer option, axle 2: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(1,2)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,2,1)   5.2 ; deg ! Caster for wheel L2 [I]
A_CASTER(1,2,2)   5.2 ; deg ! Caster for wheel R2 [I]
A_KPI(1,2,1)      7.2 ; deg ! Kingpin inclination for wheel L2 [I]
A_KPI(1,2,2)      7.2 ; deg ! Kingpin inclination for wheel R2 [I]
A_MZ_BETA(1,2,1)  0.1 ; deg ! Ref. hysteresis angle for L2 parking steer torque
A_MZ_BETA(1,2,2)  0.1 ; deg ! Ref. hysteresis angle for R2 parking steer torque
BETA_GEAR(1,2)      2 ; deg ! Ref hys. angle for steering gear friction, axle 2
CS_MZ_ROD(1,2) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 2
CS_MZ_SHAFT(1,2) 0.001 ; deg/N/m ! Compliance: steering shaft, axle 2
C_WRAP(1,2)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 2
D_GEAR(1,2)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 2
HYS_GEAR(1,2)       0 ; N-m ! Steering gear hysteresis, axle 2
L_KPO(1,2,1)      100 ; mm ! Lateral kingpin offset to center of wheel L2 [I]
L_KPO(1,2,2)      100 ; mm ! Lateral kingpin offset to center of wheel R2 [I]
R_BMP_STR(1,2) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 2
R_WRAP_STR(1,2)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 2
X_KPO(1,2,1)        0 ; mm ! X coord. of kingpin at center of wheel L2 [I]
X_KPO(1,2,2)        0 ; mm ! X coord. of kingpin at center of wheel R2 [I]

OPT_STEER_EXT(1,3)  1 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,4)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,5)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  1 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE.

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)         0 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(1,3)       310 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(1,4)       310 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(1,5)       310 ; mm ! Dual-tire spacing for axle 5 [I]
L_DUAL(2,1)       310 ; mm ! Dual-tire spacing for axle 6 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 8 -> SIEMENS
                          ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                          ! tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)    91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 30000 ; N ! Reference vertical force
IT(1,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)    91 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 30000 ; N ! Reference vertical force
IT(1,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)    91 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 30000 ; N ! Reference vertical force
IT(1,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)    91 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,3,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(1,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(1,3,1,1) 30000 ; N ! Reference vertical force
IT(1,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(1,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(1,3,1,1)    91 ; kg ! Mass of tire L3i
MU_REF_X(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(1,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(1,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,2) 1 ! Internal tire shear-model option, L3o [I]
OPT_TIRE_COMB(1,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L3o [I]
FZ_REF(1,3,1,2) 30000 ; N ! Reference vertical force
IT(1,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L3o [I]
IT_XXZZ(1,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L3o [I]
M_TIRE(1,3,1,2)    91 ; kg ! Mass of tire L3o
MU_REF_X(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3o
MU_REF_Y(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3o
R0(1,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L3o [I]
RR_C(1,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(1,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(1,3,2,1) 30000 ; N ! Reference vertical force
IT(1,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(1,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(1,3,2,1)    91 ; kg ! Mass of tire R3i
MU_REF_X(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(1,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(1,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,2) 1 ! Internal tire shear-model option, R3o [I]
OPT_TIRE_COMB(1,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R3o [I]
FZ_REF(1,3,2,2) 30000 ; N ! Reference vertical force
IT(1,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R3o [I]
IT_XXZZ(1,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R3o [I]
M_TIRE(1,3,2,2)    91 ; kg ! Mass of tire R3o
MU_REF_X(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3o
MU_REF_Y(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3o
R0(1,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R3o [I]
RR_C(1,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(1,4,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(1,4,1,1) 30000 ; N ! Reference vertical force
IT(1,4,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(1,4,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(1,4,1,1)    91 ; kg ! Mass of tire L4i
MU_REF_X(1,4,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(1,4,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(1,4,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(1,4,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(1,4,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(1,4,1,2) 30000 ; N ! Reference vertical force
IT(1,4,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(1,4,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(1,4,1,2)    91 ; kg ! Mass of tire L4o
MU_REF_X(1,4,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(1,4,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(1,4,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(1,4,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(1,4,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(1,4,2,1) 30000 ; N ! Reference vertical force
IT(1,4,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(1,4,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(1,4,2,1)    91 ; kg ! Mass of tire R4i
MU_REF_X(1,4,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(1,4,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(1,4,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(1,4,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(1,4,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(1,4,2,2) 30000 ; N ! Reference vertical force
IT(1,4,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(1,4,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(1,4,2,2)    91 ; kg ! Mass of tire R4o
MU_REF_X(1,4,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(1,4,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(1,4,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(1,4,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(1,5,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(1,5,1,1) 30000 ; N ! Reference vertical force
IT(1,5,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(1,5,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(1,5,1,1)    91 ; kg ! Mass of tire L5i
MU_REF_X(1,5,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(1,5,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(1,5,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(1,5,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,1,2) 1 ! Internal tire shear-model option, L5o [I]
OPT_TIRE_COMB(1,5,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L5o [I]
FZ_REF(1,5,1,2) 30000 ; N ! Reference vertical force
IT(1,5,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L5o [I]
IT_XXZZ(1,5,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L5o [I]
M_TIRE(1,5,1,2)    91 ; kg ! Mass of tire L5o
MU_REF_X(1,5,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5o
MU_REF_Y(1,5,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5o
R0(1,5,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5o [I]
RR_C(1,5,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(1,5,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(1,5,2,1) 30000 ; N ! Reference vertical force
IT(1,5,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(1,5,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(1,5,2,1)    91 ; kg ! Mass of tire R5i
MU_REF_X(1,5,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(1,5,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(1,5,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(1,5,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,2,2) 1 ! Internal tire shear-model option, R5o [I]
OPT_TIRE_COMB(1,5,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R5o [I]
FZ_REF(1,5,2,2) 30000 ; N ! Reference vertical force
IT(1,5,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R5o [I]
IT_XXZZ(1,5,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R5o [I]
M_TIRE(1,5,2,2)    91 ; kg ! Mass of tire R5o
MU_REF_X(1,5,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5o
MU_REF_Y(1,5,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5o
R0(1,5,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5o [I]
RR_C(1,5,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L6i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L6i [I]
FZ_REF(2,1,1,1) 30000 ; N ! Reference vertical force
IT(2,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L6i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L6i [I]
M_TIRE(2,1,1,1)    91 ; kg ! Mass of tire L6i
MU_REF_X(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6i
MU_REF_Y(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6i
R0(2,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6i [I]
RR_C(2,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,2) 1 ! Internal tire shear-model option, L6o [I]
OPT_TIRE_COMB(2,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L6o [I]
FZ_REF(2,1,1,2) 30000 ; N ! Reference vertical force
IT(2,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L6o [I]
IT_XXZZ(2,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L6o [I]
M_TIRE(2,1,1,2)    91 ; kg ! Mass of tire L6o
MU_REF_X(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6o
MU_REF_Y(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6o
R0(2,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6o [I]
RR_C(2,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R6i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R6i [I]
FZ_REF(2,1,2,1) 30000 ; N ! Reference vertical force
IT(2,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R6i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R6i [I]
M_TIRE(2,1,2,1)    91 ; kg ! Mass of tire R6i
MU_REF_X(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6i
MU_REF_Y(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6i
R0(2,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6i [I]
RR_C(2,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,2) 1 ! Internal tire shear-model option, R6o [I]
OPT_TIRE_COMB(2,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R6o [I]
FZ_REF(2,1,2,2) 30000 ; N ! Reference vertical force
IT(2,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R6o [I]
IT_XXZZ(2,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R6o [I]
M_TIRE(2,1,2,2)    91 ; kg ! Mass of tire R6o
MU_REF_X(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6o
MU_REF_Y(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6o
R0(2,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6o [I]
RR_C(2,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure).

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  1 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)      0.3 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  1 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)      0.3 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  1 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)      0.3 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  1 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)      0.3 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(1,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,1)  1 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(1,3,1)        0 ; s ! Time constant for brake actuator L3
TLAG_BK(1,3,1)      0 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(1,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,2)  1 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(1,3,2)        0 ; s ! Time constant for brake actuator R3
TLAG_BK(1,3,2)      0 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(1,4,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,4,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,4,1)  1 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(1,4,1)        0 ; s ! Time constant for brake actuator L4
TLAG_BK(1,4,1)      0 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(1,4,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,4,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,4,2)  1 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(1,4,2)        0 ; s ! Time constant for brake actuator R4
TLAG_BK(1,4,2)      0 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(1,5,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,5,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,5,1)  1 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(1,5,1)        0 ; s ! Time constant for brake actuator L5
TLAG_BK(1,5,1)      0 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(1,5,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,5,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,5,2)  1 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(1,5,2)        0 ; s ! Time constant for brake actuator R5
TLAG_BK(1,5,2)      0 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  1 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(2,1,1)      0.3 ; s ! Time constant for brake actuator L6
TLAG_BK(2,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  1 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(2,1,2)      0.3 ; s ! Time constant for brake actuator R6
TLAG_BK(2,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R6 [I]

!------------------------------------------------------------------------------------
! TANDEM AND TRIDEM SUSPENSIONS
!------------------------------------------------------------------------------------
TANDEM_NAME(1,1)    1 ! [D] Tandem in unit 1 that connects axles 1 & 2
CFZ_MY_TAND(1,1)    0 ; 1/m ! Coefficient: Load transfer to front axle of this
                      ! tandem per unit of total wheel-spin torque applied to the
                      ! four wheels of this tandem
R_TAND_TRAIL_STATIC(1,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(1,1)     0.5 ; - ! Ratio: fraction of dynamic suspension load shared by the
                      ! other axle of this tandem; 0 -> no sharing; 1/2 -> full
                      ! sharing [I]

TANDEM_NAME(1,2)    2 ! [D] Lead tandem in tridem on unit 1; connects axles 3 & 4
CFZ_MY_TAND(1,2)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TANDEM(1,2) 0.6666666667 ; - ! Ratio: fraction of dynamic suspension load shared
                           ! by the other axles of this tridem; 0 -> no sharing;
                           ! 2/3 -> full sharing [I]

TANDEM_NAME(1,3)    3 ! [D] Trailing tandem in tridem; connects axles 4 & 5
CFZ_MY_TAND(1,3)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TANDEM(1,3) 0.6666666667 ; - ! Fraction of dynamic load shared by the other axles
                           ! of this tridem [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle request can be specified
! with the function THROTTLE_ENGINE.

POWERTRAIN_UNIT     1 ! Vehicle unit with powertrain
INSTALL_POWERTRAIN  6 ! Powertrain type: 0 -> Simple, 1 -> front-axle drive, 2 ->
                      ! rear-axle drive, 3 -> 2-axle drive, 4 -> 3-axle drive, 5 ->
                      ! 4-axle drive, 6 -> 5-axle drive [L]
! R_DRIVE_SC(1)   0.2 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(2)   0.2 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(3)   0.2 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(4)   0.2 ; - ! Drive torque ratio: [this axle]/[total] [I]
! R_DRIVE_SC(5)   0.2 ; - ! Drive torque ratio: [this axle]/[total] [I]
OPT_HEV             2 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! power-split hybrid electric, 2 -> electric, 3 ->
                      ! range-extended electric (series hybrid), 4 -> parallel
                      ! hybrid electric
OPT_MOTOR_ON_AXLE   1 ! Is electric motor placed on each drive axle?: 0 -> No, a
                      ! motor per vehicle; 1 -> Yes, a motor per drive axle
OPT_THROTTLE_DELAY  0 ! [D] Apply lag to requested throttle using time constants: 0
                      ! -> no, 1 -> yes
INSTALL_ELECTRIC_DRIVE_MOTORS  ! VS Command to install electric motors
R_MDRIVE            0 ; - ! Multiplier for driveshaft torque acting on engine body
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters and the
! function M_DIFF_VISC.

! NDIFF             9 ! Maximum number of differentials that can exist in this
                      ! powertrain (read only)
OPT_DIFF_INTERNAL(1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                        ! diff [I]
LOCKED_DIFF_K(1)   80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of 1st drive axle diff [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of 1st drive axle diff [I]
R_GEAR_DIFF(1)   3.92 ; - ! Gear ratio of 1st drive axle diff [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft [I]
OPT_MOTOR_ON_WHEEL(1) 1 ! Is electric motor placed on each wheel of 1st drive axle
                        ! diff?: 0 -> No, a motor per axle; 1 -> Yes, a motor per
                        ! wheel
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle diff
                      ! [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff [I]
OPT_WHEEL_MOTOR_REACTION(1) 0 ! If sus. is independent, where the electric motor on
                              ! each wheel at 1st drive axle diff reacts to?: 0 ->
                              ! sprung mass; 1 -> un-sprung mass
OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control. When 0 or 2, functions CLUTCH_CON_DIFF and
                      ! CLUTCH_TORQUE_DIFF are used. When 2, CLUTCH_TORQUE_DIFF2 is
                      ! also used. [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 -> yes.
                      ! If 1, then functions CLUTCH_TWIN and M_TWIN are used. [I]

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)   3.92 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
OPT_MOTOR_ON_WHEEL(2) 1 ! Electric motor per wheel/axle on 2nd drive axle diff
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_WHEEL_MOTOR_REACTION(2) 0 ! Electric motor wheel torque at 2nd drive axle diff
                              ! reacts to unsprung mass if sus. is independent
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

OPT_DIFF_INTERNAL(3) 1 ! Inter-axle diff for drive axles 1,2 model: 1 -> internal, 0
                       ! -> external [I]
OPT_LOCKED_DIFF(3)  0 ! [D] Is the inter-axle diff for drive axles 1,2 locked? 0 ->
                      ! no, 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! [D] Fraction: transfer case torque on the inter-axle
                      ! diff for drive axles 1,2 [I]
LOCKED_DIFF_DAMP(3) 8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff for
                      ! drive axles 1,2 [I]
LOCKED_DIFF_K(3)   80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for drive axles 1,2 [I]
R_EFF_F_DIFF(3)  0.99 ; - ! Forward efficiency of inter-axle diff for drive axles
                      ! 1,2 [I]
R_EFF_R_DIFF(3)  0.99 ; - ! Reverse efficiency of inter-axle diff for drive axles
                      ! 1,2 [I]
R_GEAR_DIFF(3)      1 ; - ! Gear ratio of inter-axle diff for drive axles 1,2 [I]
IDS(3)          0.015 ; kg-m2 ! Spin inertia of inter-axle diff for drive axles 1,2
                      ! input shaft [I]
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control for inter-axle diff for drive axles 1,2:
                      ! 0 -> table lookup or external, 1 -> Torsen parameters, 2 ->
                      ! yaw control [I]

OPT_DIFF_INTERNAL(4) 1 ! 3rd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(4)  0 ! Is the 3rd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(4) 0.8 ; N-m-s/deg ! Torsional damping for locked 3rd drive axle
                        ! diff [I]
LOCKED_DIFF_K(4)   80 ; N-m/deg ! Torsional spring rate for locked 3rd drive axle
                      ! diff [I]
R_EFF_F_DIFF(4)  0.99 ; - ! Forward efficiency of 3rd drive axle diff [I]
R_EFF_R_DIFF(4)  0.99 ; - ! Reverse efficiency of 3rd drive axle diff [I]
R_GEAR_DIFF(4)   3.92 ; - ! Gear ratio of 3rd drive axle diff [I]
IDS(4)          0.013 ; kg-m2 ! Spin inertia of 3rd drive axle diff input shaft [I]
OPT_MOTOR_ON_WHEEL(4) 1 ! Electric motor per wheel/axle on 3rd drive axle diff
IHS_L(4)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 3rd drive axle diff
                      ! [I]
IHS_R(4)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 3rd drive axle
                      ! diff [I]
OPT_WHEEL_MOTOR_REACTION(4) 0 ! Electric motor wheel torque at 3rd drive axle diff
                              ! reacts to unsprung mass if sus. is independent
OPT_CLUTCH_DIFF(4)  0 ! [D] Clutch control for 3rd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(5) 1 ! 4th drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(5)  0 ! Is the 4th drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(5) 0.8 ; N-m-s/deg ! Torsional damping for locked 4th drive axle
                        ! diff [I]
LOCKED_DIFF_K(5)   80 ; N-m/deg ! Torsional spring rate for locked 4th drive axle
                      ! diff [I]
R_EFF_F_DIFF(5)  0.99 ; - ! Forward efficiency of 4th drive axle diff [I]
R_EFF_R_DIFF(5)  0.99 ; - ! Reverse efficiency of 4th drive axle diff [I]
R_GEAR_DIFF(5)   3.92 ; - ! Gear ratio of 4th drive axle diff [I]
IDS(5)          0.013 ; kg-m2 ! Spin inertia of 4th drive axle diff input shaft [I]
OPT_MOTOR_ON_WHEEL(5) 1 ! Electric motor per wheel/axle on 4th drive axle diff
IHS_L(5)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 4th drive axle diff
                      ! [I]
IHS_R(5)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 4th drive axle
                      ! diff [I]
OPT_WHEEL_MOTOR_REACTION(5) 0 ! Electric motor wheel torque at 4th drive axle diff
                              ! reacts to unsprung mass if sus. is independent
OPT_CLUTCH_DIFF(5)  0 ! [D] Clutch control for 4th drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(6) 1 ! Inter-axle diff for drive axles 3,4,5 model: 1 -> internal,
                       ! 0 -> external [I]
OPT_LOCKED_DIFF(6)  0 ! Is the inter-axle diff for drive axles 3,4,5 locked? 0 ->
                      ! no, 1 -> yes [I]
R_REAR_BIAS(6) 0.6666666667 ; - ! Fraction: transfer case torque on the inter-axle
                            ! diff for drive axles 3,4,5 [I]
LOCKED_DIFF_DAMP(6) 8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff for
                      ! drive axles 3,4,5 [I]
LOCKED_DIFF_K(6)   80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for drive axles 3,4,5 [I]
R_EFF_F_DIFF(6)  0.99 ; - ! Forward efficiency of inter-axle diff for drive axles
                      ! 3,4,5 [I]
R_EFF_R_DIFF(6)  0.99 ; - ! Reverse efficiency of inter-axle diff for drive axles
                      ! 3,4,5 [I]
R_GEAR_DIFF(6)      1 ; - ! Gear ratio of inter-axle diff for drive axles 3,4,5 [I]
IDS(6)          0.015 ; kg-m2 ! Spin inertia of inter-axle diff for drive axles
                      ! 3,4,5 input shaft [I]
OPT_CLUTCH_DIFF(6)  0 ! [D] Clutch control for inter-axle diff for drive axles
                      ! 3,4,5: 0 -> table lookup or external, 1 -> Torsen
                      ! parameters, 2 -> yaw control [I]

OPT_DIFF_INTERNAL(7) 1 ! Master transfer case model: 1 -> internal, 0 -> external
                       ! [I]
OPT_LOCKED_DIFF(7)  0 ! Is the master transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(7)    0.6 ; - ! Fraction: transfer case torque on the master transfer
                      ! case [I]
LOCKED_DIFF_DAMP(7) 8 ; N-m-s/deg ! Torsional damping for locked master transfer
                      ! case [I]
LOCKED_DIFF_K(7)   80 ; N-m/deg ! Torsional spring rate for locked master transfer
                      ! case [I]
R_EFF_F_DIFF(7)  0.99 ; - ! Forward efficiency of master transfer case [I]
R_EFF_R_DIFF(7)  0.99 ; - ! Reverse efficiency of master transfer case [I]
R_GEAR_DIFF(7)      1 ; - ! Gear ratio of master transfer case [I]
IDS(7)              0 ; kg-m2 ! [D] Spin inertia of master transfer case input shaft
                      ! [I]
OPT_CLUTCH_DIFF(7)  0 ! [D] Clutch control for master transfer case: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(8) 1 ! 5th drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(8)  0 ! Is the 5th drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(8) 0.8 ; N-m-s/deg ! Torsional damping for locked 5th drive axle
                        ! diff [I]
LOCKED_DIFF_K(8)   80 ; N-m/deg ! Torsional spring rate for locked 5th drive axle
                      ! diff [I]
R_EFF_F_DIFF(8)  0.99 ; - ! Forward efficiency of 5th drive axle diff [I]
R_EFF_R_DIFF(8)  0.99 ; - ! Reverse efficiency of 5th drive axle diff [I]
R_GEAR_DIFF(8)   3.92 ; - ! Gear ratio of 5th drive axle diff [I]
IDS(8)          0.013 ; kg-m2 ! Spin inertia of 5th drive axle diff input shaft [I]
OPT_MOTOR_ON_WHEEL(8) 1 ! Electric motor per wheel/axle on 5th drive axle diff
IHS_L(8)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 5th drive axle diff
                      ! [I]
IHS_R(8)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 5th drive axle
                      ! diff [I]
OPT_WHEEL_MOTOR_REACTION(8) 0 ! Electric motor wheel torque at 5th drive axle diff
                              ! reacts to unsprung mass if sus. is independent
OPT_CLUTCH_DIFF(8)  0 ! [D] Clutch control for 5th drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(9) 1 ! Inter-axle diff for drive axles 4,5 model: 1 -> internal, 0
                       ! -> external [I]
OPT_LOCKED_DIFF(9)  0 ! [D] Is the inter-axle diff for drive axles 4,5 locked? 0 ->
                      ! no, 1 -> yes [I]
R_REAR_BIAS(9)    0.5 ; - ! [D] Fraction: transfer case torque on the inter-axle
                      ! diff for drive axles 4,5 [I]
LOCKED_DIFF_DAMP(9) 8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff for
                      ! drive axles 4,5 [I]
LOCKED_DIFF_K(9)   80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for drive axles 4,5 [I]
R_EFF_F_DIFF(9)  0.99 ; - ! Forward efficiency of inter-axle diff for drive axles
                      ! 4,5 [I]
R_EFF_R_DIFF(9)  0.99 ; - ! Reverse efficiency of inter-axle diff for drive axles
                      ! 4,5 [I]
R_GEAR_DIFF(9)      1 ; - ! Gear ratio of inter-axle diff for drive axles 4,5 [I]
IDS(9)          0.015 ; kg-m2 ! Spin inertia of inter-axle diff for drive axles 4,5
                      ! input shaft [I]
OPT_CLUTCH_DIFF(9)  0 ! [D] Clutch control for inter-axle diff for drive axles 4,5:
                      ! 0 -> table lookup or external, 1 -> Torsen parameters, 2 ->
                      ! yaw control [I]

! The Hybrid/Electric powertrain system parameters.

TC_PWR_HYBRID_AV  0.8 ; s ! Time constant for hybrid/electric available power

! The hybrid/electric powertrain battery parameters.

N_BATTERY          40 ! Number of battery packs [I]
T_BATTERY_INIT     40 ; C ! Initial battery temperature [I]
BATTERY_CHARGE_INIT 0.6 ; - ! Initial battery charged level [I]
V_MOTOR_MIN        60 ; V ! Minimum voltage for electric motor [I]
V_BATTERY_MIN       6 ; V ! Minimum voltage per battery pack [I]
V_BATTERY_MAX       9 ; V ! Maximum voltage per battery pack [I]

! The hybrid/electric power management control parameters.

PWR_EV_MODE       100 ; kW ! Maximum power allowance operated with EV mode [I]
PWR_HEV_DRV_MAX   500 ; kW ! Maximum power available with HEV system (used by speed
                      ! control only) [I]
KPW_PBK_HEV       160 ; kW/MPa ! Brake power demand per master cylinder control
                      ! pressure [I]
OPT_REGEN_OFF_THRT  0 ; - ! Charge battery when vehicle is coasting with off
                      ! throttle and off brakeing: 0 -> no, 1 -> yes [I]
CF_HEV_PBK       0.08 ; - ! [D] Control shape factor for regenerative motor power
                      ! around zero speed [I]
REGEN_BRK_OFF     0.8 ; - ! Battery charged level to turn off regenerative brake [I]

! The hybrid/electric powertrain motor parameters.

R_REAR_MOTOR_BIAS(3) 0.5 ; - ! Fraction: motor torque distributed on 2nd drive axle
                         ! [I]
R_REAR_MOTOR_BIAS(6) 0.6666666667 ; - ! Fraction: motor torque distributed to 4-5th
                                  ! drive axles [I]
R_REAR_MOTOR_BIAS(7) 0.6 ; - ! Fraction: motor torque distributed to 3-4-5th drive
                         ! axles [I]
R_REAR_MOTOR_BIAS(9) 0.5 ; - ! Fraction: motor torque distributed on 5th drive axles
                         ! [I]

! The hybrid/electric powertrain axle/wheel motor parameters.

I_MOTOR(1,1)   0.0226 ; kg-m2 ! Spin inertia of electric motor on left wheel of 1st
                      ! drive axle [I]
TC_MOTOR(1,1)    0.05 ; s ! Time constant for electric motor torque on left wheel of
                      ! 1st drive axle
I_MOTOR(1,2)   0.0226 ; kg-m2 ! Spin inertia of electric motor on right wheel of 1st
                      ! drive axle [I]
TC_MOTOR(1,2)    0.05 ; s ! Time constant for electric motor torque on right wheel
                      ! of 1st drive axle
I_MOTOR(2,1)   0.0226 ; kg-m2 ! Spin inertia of electric motor on left wheel of 2nd
                      ! drive axle [I]
TC_MOTOR(2,1)    0.05 ; s ! Time constant for electric motor torque on left wheel of
                      ! 2nd drive axle
I_MOTOR(2,2)   0.0226 ; kg-m2 ! Spin inertia of electric motor on right wheel of 2nd
                      ! drive axle [I]
TC_MOTOR(2,2)    0.05 ; s ! Time constant for electric motor torque on right wheel
                      ! of 2nd drive axle
I_MOTOR(4,1)   0.0226 ; kg-m2 ! Spin inertia of electric motor on left wheel of 3rd
                      ! drive axle [I]
TC_MOTOR(4,1)    0.05 ; s ! Time constant for electric motor torque on left wheel of
                      ! 3rd drive axle
I_MOTOR(4,2)   0.0226 ; kg-m2 ! Spin inertia of electric motor on right wheel of 3rd
                      ! drive axle [I]
TC_MOTOR(4,2)    0.05 ; s ! Time constant for electric motor torque on right wheel
                      ! of 3rd drive axle
I_MOTOR(5,1)   0.0226 ; kg-m2 ! Spin inertia of electric motor on left wheel of 4th
                      ! drive axle [I]
TC_MOTOR(5,1)    0.05 ; s ! Time constant for electric motor torque on left wheel of
                      ! 4th drive axle
I_MOTOR(5,2)   0.0226 ; kg-m2 ! Spin inertia of electric motor on right wheel of 4th
                      ! drive axle [I]
TC_MOTOR(5,2)    0.05 ; s ! Time constant for electric motor torque on right wheel
                      ! of 4th drive axle
I_MOTOR(8,1)   0.0226 ; kg-m2 ! Spin inertia of electric motor on left wheel of 5th
                      ! drive axle [I]
TC_MOTOR(8,1)    0.05 ; s ! Time constant for electric motor torque on left wheel of
                      ! 5th drive axle
I_MOTOR(8,2)   0.0226 ; kg-m2 ! Spin inertia of electric motor on right wheel of 5th
                      ! drive axle [I]
TC_MOTOR(8,2)    0.05 ; s ! Time constant for electric motor torque on right wheel
                      ! of 5th drive axle

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

OPT_SL_METHOD       1 ! [D] Use curvature in iteration for S-L from X-Y? 1 -> yes, 0
                      ! -> no
TOL_SL_METHOD       1 ; mm ! [D] Stop iteration if X-Y from S-L solution is no
                      ! further from requested X-Y than this
! NPATH             6 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        6 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(2)       1001 ; 1001: South Entrance, Right Turn
OPT_PATH_START(2)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)    -58 ; m ! Station at the start of this path
HEADING_START(2)   90 ; deg ! Heading at the start of this path
X_PATH_START(2)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(2) -60.186 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        3 ! Number of segments in this path
SEGMENT_TYPE(2,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,1) 50 ; m ! Segment length
! S_SEGMENT_END(2,1) -8 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 3.061616998e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) -10.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(2,2) -10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(2,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(2,2) 8.000131385 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,2) 10.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,2) 1.875723864e-16 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,2) 3.816665618e-14 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,3) 50 ; m ! Segment length
! S_SEGMENT_END(2,3) 58.00013138 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,3) 60.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,3) -1.326159339e-16 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,3)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; 1002: East Entrance, Right Turn
OPT_PATH_START(3)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)    -58 ; m ! Station at the start of this path
HEADING_START(3)  180 ; deg ! Heading at the start of this path
X_PATH_START(3) 60.186 ; m ! Global X coordinate at the start of this path
Y_PATH_START(3)     0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        3 ! Number of segments in this path
SEGMENT_TYPE(3,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,1) 50 ; m ! Segment length
! S_SEGMENT_END(3,1) -8 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 10.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 6.123233996e-15 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(3,2) -10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(3,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(3,2) 8.000131385 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,2) 2.874044611e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,2) 10.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,2) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,3) 50 ; m ! Segment length
! S_SEGMENT_END(3,3) 58.00013138 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,3) 6.25584993e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,3) 60.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,3) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1003 ; 1003: North Entrance, Right Turn
OPT_PATH_START(4)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)    -58 ; m ! Station at the start of this path
HEADING_START(4)  -90 ; deg ! Heading at the start of this path
X_PATH_START(4)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(4) 60.186 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        3 ! Number of segments in this path
SEGMENT_TYPE(4,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,1) 50 ; m ! Segment length
! S_SEGMENT_END(4,1) -8 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) 3.061616998e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 10.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(4,2) -10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(4,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(4,2) 8.000131385 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,2) -10.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,2) 7.946209754e-16 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,2) -180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,3) 50 ; m ! Segment length
! S_SEGMENT_END(4,3) 58.00013138 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,3) -60.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,3) -5.0084247e-15 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,3) -180 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       1004 ; 1004: West Entrance, Right Turn
OPT_PATH_START(5)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)    -58 ; m ! Station at the start of this path
HEADING_START(5)    0 ; deg ! Heading at the start of this path
X_PATH_START(5) -60.186 ; m ! Global X coordinate at the start of this path
Y_PATH_START(5)     0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        3 ! Number of segments in this path
SEGMENT_TYPE(5,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,1) 50 ; m ! Segment length
! S_SEGMENT_END(5,1) -8 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) -10.186 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(5,2) -10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(5,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(5,2) 8.000131385 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,2) -3.035242945e-16 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,2) -10.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,2) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,3) 50 ; m ! Segment length
! S_SEGMENT_END(5,3) 58.00013138 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,3) 2.437904383e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,3) -60.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,3) -90 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)       2004 ; 2004: South Entrance, Right Turn, Wide
OPT_PATH_START(6)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)    -58 ; m ! Station at the start of this path
HEADING_START(6)   90 ; deg ! Heading at the start of this path
X_PATH_START(6)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(6) -60.186 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        5 ! Number of segments in this path
SEGMENT_TYPE(6,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,1) 55 ; m ! Segment length
! S_SEGMENT_END(6,1) -3 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 3.367778698e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) -5.186 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(6,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(6,2) -10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(6,2)  120 ; deg ! Central angle of arc
! S_SEGMENT_END(6,2) 18.33350851 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,2) 15.279 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,2) 3.635334763 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,2) -30 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(6,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,3) 4.55 ; m ! Segment length
! S_SEGMENT_END(6,3) 22.88350851 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,3) 19.21941559 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,3) 1.360334763 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,3) -30 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(6,4)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(6,4) 10.186 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(6,4)   30 ; deg ! Central angle of arc
! S_SEGMENT_END(6,4) 28.21688564 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,4) 24.31241559 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,4) -0.004330474103 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,4) -3.180554681e-14 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(6,5)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,5) 50 ; m ! Segment length
! S_SEGMENT_END(6,5) 78.21688564 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,5) 74.31241559 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,5) -0.004330474103 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,5) 6.361109363e-15 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             5 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        5 ! VS Command to define road surfaces
CURRENT_ROAD_ID  1001 ! ROAD_ID during initialization [I]

ROAD_ID(1)        999 ; 999: Grass and Intersection, 4-Way
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! Number of ROAD_DZ layers added to the surface

ROAD_ID(2)       1001 ; 1001: Enter South, Exit East
ROAD_PATH_ID(2)  1001 ; PATH_ID for: 1001: South Entrance, Right Turn
ROAD_SMAX_NEW_ID(2) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(2,1)    2001 ; ROAD_DZ_ID for: Cross-slope, Curb for Intersection

ROAD_ID(3)       1002 ; 1002: Enter East, Exit North
ROAD_PATH_ID(3)  1002 ; PATH_ID for: 1002: East Entrance, Right Turn
ROAD_SMAX_NEW_ID(3) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(3) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(3)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(3,1)    2001 ; ROAD_DZ_ID for: Cross-slope, Curb for Intersection

ROAD_ID(4)       1003 ; 1003: Enter North, Exit West
ROAD_PATH_ID(4)  1003 ; PATH_ID for: 1003: North Entrance, Right Turn
ROAD_SMAX_NEW_ID(4) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(4) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(4)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(4,1)    2001 ; ROAD_DZ_ID for: Cross-slope, Curb for Intersection

ROAD_ID(5)       1004 ; 1004: Enter West, Exit South
ROAD_PATH_ID(5)  1004 ; PATH_ID for: 1004: West Entrance, Right Turn
ROAD_SMAX_NEW_ID(5) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(5) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(5)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(5,1)    2001 ; ROAD_DZ_ID for: Cross-slope, Curb for Intersection

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run

PATH_ID_DM       2004 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0) [I]
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore calculated Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM      1000 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
OPT_DM_AUX          0 ! [D] Activate auxiliary path follower? 0 -> no, 1 -> yes [I]

! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              1 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           1 ! Braking and SC: 0 -> turn controller off while brakes are
                      ! applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018         0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
BK_PERF_SC        0.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC    1.5 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP         0.15 ; s/m ! Speed controller: proportional control gain
SPEED_KP3         0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI          0.2 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   1 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   1 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,3)   0 ! ABS control option, unit 1, axle 3

OPT_ABS_CTRL(1,4)   0 ! ABS control option, unit 1, axle 4

OPT_ABS_CTRL(1,5)   0 ! ABS control option, unit 1, axle 5

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAP_BATTERY_MAX: Battery maximum capacity. Battery full capacity is a function of
! Temperature (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Battery full capacity from the calculation can be adjusted
! with CAP_BATTERY_MAX_GAIN and CAP_BATTERY_MAX_OFFSET. Temperature used in the
! calculation can be adjusted with TEMP_SCALE_CAP_BATTERY and TEMP_START_CAP_BATTERY.

CAP_BATTERY_MAX_CONSTANT 500 ; A-h ! Constant Battery full capacity
CAP_BATTERY_MAX_GAIN 1 ! Gain multiplied with calculated value to get Battery full
                       ! capacity
CAP_BATTERY_MAX_OFFSET 0 ; A-h ! Offset added (after gain) to get Battery full
                         ! capacity

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 12 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CC_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CC_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,4,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 4, left side
CC_FX_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,4,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,4,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 4, right side
CC_FX_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,4,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,5,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 5, left side
CC_FX_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,5,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,5,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 5, right side
CC_FX_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,5,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 12 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CI_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CI_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,4,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 4, left side
CI_FY_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,4,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,4,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 4, right side
CI_FY_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,4,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,5,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 5, left side
CI_FY_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,5,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,5,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 5, right side
CI_FY_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,5,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 12 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CI_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CI_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,4,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, left side
CI_MZ_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,4,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,4,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, right side
CI_MZ_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,4,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,5,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, left side
CI_MZ_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,5,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,5,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, right side
CI_MZ_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,5,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, 1st
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! inter-axle diff for drive axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(4) 1 ; - ! [D] Constant normalized clutch input, 3rd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(4) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(4) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(5) 1 ; - ! [D] Constant normalized clutch input, 4th
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(5) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(5) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(6) 1 ; - ! [D] Constant normalized clutch input,
                                  ! inter-axle diff for drive axles 3,4,5
CLUTCH_CONTROL_DIFF_GAIN(6) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(6) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(7) 1 ; - ! [D] Constant normalized clutch input, master
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(7) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(7) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(8) 1 ; - ! [D] Constant normalized clutch input, 5th
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(8) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(8) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(9) 1 ; - ! [D] Constant normalized clutch input,
                                  ! inter-axle diff for drive axles 4,5
CLUTCH_CONTROL_DIFF_GAIN(9) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(9) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, 1st drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, inter-axle
                                 ! diff for drive axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(4) 0 ; N-m ! [D] Constant available torque, 3rd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(5) 0 ; N-m ! [D] Constant available torque, 4th drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(5) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(6) 0 ; N-m ! [D] Constant available torque, inter-axle
                                 ! diff for drive axles 3,4,5
CLUTCH_TORQUE_DIFF_OFFSET(6) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(7) 0 ; N-m ! [D] Constant available torque, master
                                 ! transfer case
CLUTCH_TORQUE_DIFF_OFFSET(7) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(8) 0 ; N-m ! [D] Constant available torque, 5th drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(8) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(9) 0 ; N-m ! [D] Constant available torque, inter-axle
                                 ! diff for drive axles 4,5
CLUTCH_TORQUE_DIFF_OFFSET(9) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression can be a nonlinear CARPET
! function of jounce at wheel (other side) and jounce at wheel or a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the
! calculation can be adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel
! used in the calculation can be adjusted with JNC_SCALE_CMP_DAMP and
! JNC_START_CMP_DAMP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_DAMP and JNC2_START_CMP_DAMP. The derivative of this
! function is used internally. This configurable function supports 12 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, left side
CMP_DAMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, right side
CMP_DAMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,4,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 4, left side
CMP_DAMP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,4,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 4, right side
CMP_DAMP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,5,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 5, left side
CMP_DAMP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,5,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 5, right side
CMP_DAMP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from
! the calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_JSTOP and JNC2_START_CMP_JSTOP. The derivative of this
! function is used internally. This configurable function supports 12 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, left side
CMP_JSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, right side
CMP_JSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,4,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 4, left side
CMP_JSTOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,4,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 4, right side
CMP_JSTOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,5,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 5, left side
CMP_JSTOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,5,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 5, right side
CMP_JSTOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection can be a nonlinear
! CARPET function of jounce at wheel (other side) and jounce at wheel or a function
! of jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from
! the calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. Jounce at wheel (other side) used in the calculation can be
! adjusted with JNC2_SCALE_CMP_RSTOP and JNC2_START_CMP_RSTOP. The derivative of this
! function is used internally. This configurable function supports 12 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, left side
CMP_RSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, right
                               ! side
CMP_RSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,4,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 4, left side
CMP_RSTOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,4,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 4, right
                               ! side
CMP_RSTOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,5,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 5, left side
CMP_RSTOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,5,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 5, right
                               ! side
CMP_RSTOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement can be a
! nonlinear CARPET function of jounce at wheel (other side) and jounce at wheel or a
! function of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from
! the calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET.
! Jounce at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT
! and JNC_START_CMP_SPR_SEAT. Jounce at wheel (other side) used in the calculation
! can be adjusted with JNC2_SCALE_CMP_SPR_SEAT and JNC2_START_CMP_SPR_SEAT. An
! inverse version of this function is used internally. The derivative of this
! function is used internally. This configurable function supports 12 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,4,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 4, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,4,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 4, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,5,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 5, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,5,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 5, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 12 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CS_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CS_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,4,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 4, left side
CS_FY_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,4,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,4,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 4, right side
CS_FY_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,4,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,5,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 5, left side
CS_FY_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,5,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,5,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 5, right side
CS_FY_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,5,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 12 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CS_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CS_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,4,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, left side
CS_MZ_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,4,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,4,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, right side
CS_MZ_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,4,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,5,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, left side
CS_MZ_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,5,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,5,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, right side
CS_MZ_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,5,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 12 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CT_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CT_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,4,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 4, left side
CT_FX_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,4,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,4,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 4, right side
CT_FX_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,4,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,5,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 5, left side
CT_FX_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,5,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,5,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 5, right side
CT_FX_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,5,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 6 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 3
C_LAT_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,4) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 4
C_LAT_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,4) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,5) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 5
C_LAT_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,5) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 1
C_LAT_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 3
C_LONG_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,4) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 4
C_LONG_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,4) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,5) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 5
C_LONG_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,5) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 1
C_LONG_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 12 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, left side
FD_GAIN(1,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, right side
FD_GAIN(1,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,4,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 4, left side
FD_GAIN(1,4,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,4,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,4,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,4,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,4,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 4, right side
FD_GAIN(1,4,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,4,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,4,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,4,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,5,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 5, left side
FD_GAIN(1,5,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,5,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,5,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,5,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,5,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 5, right side
FD_GAIN(1,5,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,5,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,5,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,5,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 12 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(1,3,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, left side
FS_COMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, left side

FS_COMP_COEFFICIENT(1,3,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, right side
FS_COMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, right side

FS_COMP_COEFFICIENT(1,4,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 4, left side
FS_COMP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,4,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,4,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,4,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,4,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 4, left side

FS_COMP_COEFFICIENT(1,4,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 4, right side
FS_COMP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,4,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,4,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,4,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,4,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 4, right side

FS_COMP_COEFFICIENT(1,5,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 5, left side
FS_COMP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,5,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,5,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,5,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,5,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 5, left side

FS_COMP_COEFFICIENT(1,5,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 5, right side
FS_COMP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,5,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,5,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,5,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,5,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 5, right side

FS_COMP_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 12 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(1,3,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, left side
FS_EXT_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, left side

FS_EXT_COEFFICIENT(1,3,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, right side
FS_EXT_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, right side

FS_EXT_COEFFICIENT(1,4,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 4, left side
FS_EXT_GAIN(1,4,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,4,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,4,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,4,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,4,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 4, left side

FS_EXT_COEFFICIENT(1,4,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 4, right side
FS_EXT_GAIN(1,4,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,4,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,4,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,4,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,4,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 4, right side

FS_EXT_COEFFICIENT(1,5,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 5, left side
FS_EXT_GAIN(1,5,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,5,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,5,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,5,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,5,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 5, left side

FS_EXT_COEFFICIENT(1,5,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 5, right side
FS_EXT_GAIN(1,5,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,5,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,5,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,5,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,5,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 5, right side

FS_EXT_COEFFICIENT(2,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 24 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 24 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 24 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, right, inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, left, inner
FZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, left, outer
FZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, right, inner
FZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, right, outer
FZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, left, inner
FZ_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, left, outer
FZ_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, right, inner
FZ_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, right, outer
FZ_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, left, inner
FZ_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, left, outer
FZ_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, right, inner
FZ_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, right, outer
FZ_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, outer
FZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, outer
FZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 12 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,4,1) LINEAR ! unit 1, axle 4, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,4,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,4,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,4,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,4,2) LINEAR ! unit 1, axle 4, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,4,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,4,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,4,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,5,1) LINEAR ! unit 1, axle 5, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,5,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,5,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,5,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,5,2) LINEAR ! unit 1, axle 5, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,5,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,5,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,5,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 12 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,4,1) LINEAR ! unit 1, axle 4, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,4,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,4,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,4,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,4,2) LINEAR ! unit 1, axle 4, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,4,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,4,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,4,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,5,1) LINEAR ! unit 1, axle 5, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,5,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,5,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,5,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,5,2) LINEAR ! unit 1, axle 5, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,5,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,5,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,5,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(1,2) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 2
GEAR_ROT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 24 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, inner
KGAMMA_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, outer
KGAMMA_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, inner
KGAMMA_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, outer
KGAMMA_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, left, inner
KGAMMA_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, left, outer
KGAMMA_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, right, inner
KGAMMA_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, right, outer
KGAMMA_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, left, inner
KGAMMA_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, left, outer
KGAMMA_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, right, inner
KGAMMA_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, right, outer
KGAMMA_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, inner
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, outer
KGAMMA_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, inner
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, outer
KGAMMA_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 2m Right, 0.75s Single Preview
LTARG_CONSTANT(1)  -2 ; m ! Constant lateral offset
LTARG_GAIN(1)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 24
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! left, inner
L_CONTACT_X_OFFSET(1,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! left, outer
L_CONTACT_X_OFFSET(1,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! right, inner
L_CONTACT_X_OFFSET(1,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! right, outer
L_CONTACT_X_OFFSET(1,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! left, inner
L_CONTACT_X_OFFSET(1,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! left, outer
L_CONTACT_X_OFFSET(1,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! right, inner
L_CONTACT_X_OFFSET(1,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! right, outer
L_CONTACT_X_OFFSET(1,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 24
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 24 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,1) LINEAR ! unit 1, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,2) LINEAR ! unit 1, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,1) LINEAR ! unit 1, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,2) LINEAR ! unit 1, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,1,1) SPLINE_FLAT ! unit 1, axle 4, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,1,1) LINEAR ! unit 1, axle 4, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,1,2) SPLINE_FLAT ! unit 1, axle 4, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,1,2) LINEAR ! unit 1, axle 4, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,2,1) SPLINE_FLAT ! unit 1, axle 4, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,2,1) LINEAR ! unit 1, axle 4, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,2,2) SPLINE_FLAT ! unit 1, axle 4, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,2,2) LINEAR ! unit 1, axle 4, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,1,1) SPLINE_FLAT ! unit 1, axle 5, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,1,1) LINEAR ! unit 1, axle 5, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,1,2) SPLINE_FLAT ! unit 1, axle 5, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,1,2) LINEAR ! unit 1, axle 5, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,2,1) SPLINE_FLAT ! unit 1, axle 5, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,2,1) LINEAR ! unit 1, axle 5, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,2,2) SPLINE_FLAT ! unit 1, axle 5, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,2,2) LINEAR ! unit 1, axle 5, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,2) LINEAR ! unit 2, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,2) LINEAR ! unit 2, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 24 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,1) SPLINE ! unit 1, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,2) SPLINE ! unit 1, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,1) SPLINE ! unit 1, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,2) SPLINE ! unit 1, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,1,1) SPLINE_FLAT ! unit 1, axle 4, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,1,1) SPLINE ! unit 1, axle 4, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,1,2) SPLINE_FLAT ! unit 1, axle 4, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,1,2) SPLINE ! unit 1, axle 4, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,2,1) SPLINE_FLAT ! unit 1, axle 4, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,2,1) SPLINE ! unit 1, axle 4, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,2,2) SPLINE_FLAT ! unit 1, axle 4, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,2,2) SPLINE ! unit 1, axle 4, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,1,1) SPLINE_FLAT ! unit 1, axle 5, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,1,1) SPLINE ! unit 1, axle 5, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,1,2) SPLINE_FLAT ! unit 1, axle 5, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,1,2) SPLINE ! unit 1, axle 5, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,2,1) SPLINE_FLAT ! unit 1, axle 5, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,2,1) SPLINE ! unit 1, axle 5, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,2,2) SPLINE_FLAT ! unit 1, axle 5, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,2,2) SPLINE ! unit 1, axle 5, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,2) SPLINE ! unit 2, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,2) SPLINE ! unit 2, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,2) 30000 ! Scale factor divided into Fz

! MMOTOR_MAX: Motor maximum torque. Motor full torque is a function of motor speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Motor full torque from the calculation can be adjusted with
! MMOTOR_MAX_GAIN and MMOTOR_MAX_OFFSET. Motor speed used in the calculation can be
! adjusted with SPIN_SCALE_M_MOTOR_MAX and SPIN_START_M_MOTOR_MAX. This configurable
! function supports 18 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IDIFF and ISIDE are used to identify the dataset
! when reading data.

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(1,1) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(1,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(1,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(1,2) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(1,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(1,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(2,1) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(2,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(2,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(2,2) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(2,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(2,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(4,1) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(4,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(4,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(4,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(4,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(4,2) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(4,2) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(4,2) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(4,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(4,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(5,1) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(5,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(5,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(5,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(5,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(5,2) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(5,2) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(5,2) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(5,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(5,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(8,1) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(8,1) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(8,1) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(8,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(8,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE(8,2) LINEAR ! linear interpolation and extrapolation
 0, 1960
 127.55, 1960
 255.1, 1859.9
 382.65, 1235.1
 510.2, 924.55
 637.76, 738.47
 765.31, 614.66
 892.86, 526.44
 1020.4, 460.84
 1148, 415.99
 1530.6, 306.52
ENDTABLE
MMOTOR_MAX_GAIN(8,2) 1 ! Gain multiplied with calculated value to get Motor full
                       ! torque
MMOTOR_MAX_OFFSET(8,2) 0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX(8,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX(8,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_M_MOTOR_MAX)

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(4) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(4)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(4)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(4) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(4) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(5) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(5)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(5)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(5) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(5) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 6 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 400 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 400 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(1,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 3
MX_AUX_GAIN(1,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 3

MX_AUX_COEFFICIENT(1,4) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 4
MX_AUX_GAIN(1,4)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,4)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,4) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,4) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,4) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,4) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,4) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 4

MX_AUX_COEFFICIENT(1,5) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 5
MX_AUX_GAIN(1,5)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,5)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,5) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,5) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,5) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,5) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,5) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 5

MX_AUX_COEFFICIENT(2,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(1) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 12 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 66.485
 0.55, 313.12
 0.7, 468.75
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 66.485
 0.55, 313.12
 0.7, 468.75
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 66.485
 0.55, 313.12
 0.7, 468.75
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 66.485
 0.55, 313.12
 0.7, 468.75
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,3,1) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 3, left side
MY_BRAKE_OFFSET(1,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,3,2) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 3, right side
MY_BRAKE_OFFSET(1,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,4,1) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 4, left side
MY_BRAKE_OFFSET(1,4,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,4,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,4,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,4,2) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 4, right side
MY_BRAKE_OFFSET(1,4,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,4,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,4,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,5,1) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 5, left side
MY_BRAKE_OFFSET(1,5,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,5,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,5,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,5,2) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 1, axle 5, right side
MY_BRAKE_OFFSET(1,5,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,5,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,5,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(1) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(1) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(1) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(1) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 12 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(1,2,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 2, left side
MZ_PARKING_STEER_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 2, left side

MZ_PARKING_STEER_CONSTANT(1,2,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 2, right side
MZ_PARKING_STEER_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 2, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 24 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(1) 0 ; N-m ! Constant this torque difference, 1st drive axle
                          ! diff
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(3) 0 ; N-m ! Constant this torque difference, inter-axle diff
                          ! for drive axles 1,2
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(4) 0 ; N-m ! Constant this torque difference, 3rd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(5) 0 ; N-m ! Constant this torque difference, 4th drive axle
                          ! diff
M_DIFF_VISC_OFFSET(5) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(6) 0 ; N-m ! Constant this torque difference, inter-axle diff
                          ! for drive axles 3,4,5
M_DIFF_VISC_OFFSET(6) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(7) 0 ; N-m ! Constant this torque difference, master transfer
                          ! case
M_DIFF_VISC_OFFSET(7) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(8) 0 ; N-m ! Constant this torque difference, 5th drive axle
                          ! diff
M_DIFF_VISC_OFFSET(8) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(9) 0 ; N-m ! Constant this torque difference, inter-axle diff
                          ! for drive axles 4,5
M_DIFF_VISC_OFFSET(9) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 12
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,1) MPa ;
PBK_DL_FZ_CONSTANT(1,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,2) MPa ;
PBK_DL_FZ_CONSTANT(1,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,1) MPa ;
PBK_DL_FZ_CONSTANT(1,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,2) MPa ;
PBK_DL_FZ_CONSTANT(1,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(1,3,1) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, left
                            ! side
PBK_DL_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,3,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, left side

PBK_DL_COEFFICIENT(1,3,2) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, right
                            ! side
PBK_DL_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,3,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, right side

PBK_DL_COEFFICIENT(1,4,1) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 4, left
                            ! side
PBK_DL_GAIN(1,4,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,4,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,4,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,4,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,4,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,4,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 4, left side

PBK_DL_COEFFICIENT(1,4,2) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 4, right
                            ! side
PBK_DL_GAIN(1,4,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,4,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,4,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,4,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,4,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,4,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 4, right side

PBK_DL_COEFFICIENT(1,5,1) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 5, left
                            ! side
PBK_DL_GAIN(1,5,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,5,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,5,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,5,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,5,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,5,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 5, left side

PBK_DL_COEFFICIENT(1,5,2) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 5, right
                            ! side
PBK_DL_GAIN(1,5,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,5,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,5,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,5,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,5,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,5,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 5, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,2) MPa ;
PBK_DL_FZ_CONSTANT(2,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

! PWR_DRV_THROTTLE: Driving power demanded by throttle pedal. Driving power is a
! function of Throttle pedal position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Driving power from the
! calculation can be adjusted with PWR_DRV_THROTTLE_GAIN and PWR_DRV_THROTTLE_OFFSET.
! Throttle pedal position used in the calculation can be adjusted with
! SPIN_SCALE_PWR_DRV_THRT and SPIN_START_PWR_DRV_THRT. An inverse version of this
! function is used internally.

PWR_DRV_THROTTLE_COEFFICIENT 495 ! Coefficient: Driving power per unit Throttle
                                 ! pedal position (kW/-)
PWR_DRV_THROTTLE_GAIN 1 ! Gain multiplied with calculated value to get Driving power
PWR_DRV_THROTTLE_OFFSET 0 ; kW ! Offset added (after gain) to get Driving power
SPIN_START_PWR_DRV_THRT 0 ; - ! Offset subtracted from Throttle pedal position
SPIN_SCALE_PWR_DRV_THRT 1 ! Scale factor divided into (Throttle pedal position -
                          ! SPIN_START_PWR_DRV_THRT)

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)    2001  ! Cross-slope, Curb for Intersection

! 2D table: row 1 has "0" (place holder) followed by 7 values of lateral position
! (m). Other rows have station (m) followed by 7 values of dZ (m).
ROAD_DZ_CARPET(1) 2D_LINEAR
 0, -12, -5, -4, -3.9, -3.6, 0, 1
 -20, 0, 0.06, 0.06, -0.1, -0.1, 0, 0
 -18, 0, 0.06, 0.06, -0.1, -0.1, 0, 0
 -8, 0, 0.16, 0.16, 0, 0, 0, 0
 8, 0, 0.16, 0.16, 0, 0, 0, 0
 18, 0, 0.06, 0.06, -0.1, -0.1, 0, 0
 20, 0, 0.06, 0.06, -0.1, -0.1, 0, 0
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_L_BOUNDARY: Road left/right boundary limit L. L is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. L from the calculation can be adjusted with ROAD_L_BOUNDARY_GAIN and
! ROAD_L_BOUNDARY_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_ROAD_L_BOUNDARY and SSTART_ROAD_L_BOUNDARY. This configurable function
! supports 400 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IROAD and ISIDE are used to identify the dataset when
! reading data.

ROAD_L_BOUNDARY_CONSTANT(2,1) 4 ; m ! Constant L, Road 2, left side boundary
ROAD_L_BOUNDARY_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(2,2) -10 ; m ! Constant L, Road 2, right side boundary
ROAD_L_BOUNDARY_GAIN(2,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(3,1) 4 ; m ! Constant L, Road 3, left side boundary
ROAD_L_BOUNDARY_GAIN(3,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(3,2) -10 ; m ! Constant L, Road 3, right side boundary
ROAD_L_BOUNDARY_GAIN(3,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(4,1) 4 ; m ! Constant L, Road 4, left side boundary
ROAD_L_BOUNDARY_GAIN(4,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(4,2) -10 ; m ! Constant L, Road 4, right side boundary
ROAD_L_BOUNDARY_GAIN(4,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(4,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(5,1) 4 ; m ! Constant L, Road 5, left side boundary
ROAD_L_BOUNDARY_GAIN(5,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(5,2) -10 ; m ! Constant L, Road 5, right side boundary
ROAD_L_BOUNDARY_GAIN(5,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(5,2) 0 ; m ! Offset added (after gain) to get L

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(2,1) STEP ! Road 2, left side boundary
 -10, 1004
 0, 1002
ENDTABLE
ROAD_NEW_ID_GAIN(2,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(2,2) -1 ; - ! Constant ID, Road 2, right side boundary
ROAD_NEW_ID_GAIN(2,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(3,1) STEP ! Road 3, left side boundary
 -10, 1001
 0, 1003
ENDTABLE
ROAD_NEW_ID_GAIN(3,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(3,2) -1 ; - ! Constant ID, Road 3, right side boundary
ROAD_NEW_ID_GAIN(3,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(4,1) STEP ! Road 4, left side boundary
 -10, 1002
 0, 1004
ENDTABLE
ROAD_NEW_ID_GAIN(4,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(4,2) -1 ; - ! Constant ID, Road 4, right side boundary
ROAD_NEW_ID_GAIN(4,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(5,1) STEP ! Road 5, left side boundary
 -10, 1003
 0, 1001
ENDTABLE
ROAD_NEW_ID_GAIN(5,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(5,2) -1 ; - ! Constant ID, Road 5, right side boundary
ROAD_NEW_ID_GAIN(5,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(5,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_NEW_S: Estimate of station in new road (left/right) when a switch occurs. New
! S is a function of S (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. New S from the calculation can be adjusted with
! ROAD_NEW_S_GAIN and ROAD_NEW_S_OFFSET. S used in the calculation can be adjusted
! with SSCALE_ROAD_NEW_S and SSTART_ROAD_NEW_S. This configurable function supports
! 400 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IROAD and ISIDE are used to identify the dataset when reading data.

ROAD_NEW_S_COEFFICIENT(2,1) -1 ! Coefficient: new S per unit S (m/m), Road 2, left
                               ! side boundary
ROAD_NEW_S_GAIN(2,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

ROAD_NEW_S_COEFFICIENT(3,1) -1 ! Coefficient: new S per unit S (m/m), Road 3, left
                               ! side boundary
ROAD_NEW_S_GAIN(3,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

ROAD_NEW_S_COEFFICIENT(4,1) -1 ! Coefficient: new S per unit S (m/m), Road 4, left
                               ! side boundary
ROAD_NEW_S_GAIN(4,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

ROAD_NEW_S_COEFFICIENT(5,1) -1 ! Coefficient: new S per unit S (m/m), Road 5, left
                               ! side boundary
ROAD_NEW_S_GAIN(5,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(2) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(3) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(4) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(4)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(5) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(5)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(3) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(3)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(3)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(3) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(3) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(4) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(4)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(4)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(4) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(4) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(5) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(5)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(5)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(5) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(5) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_CHRG_BATTERY: Battery resistance being charged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_CHRG_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_CHRG_BATTERY_GAIN and
! R_CHRG_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_CHRG_BATTERY and SOC_START_R_CHRG_BATTERY. Temperature
! used in the calculation can be adjusted with TEMP_SCALE_R_CHRG_BATTERY and
! TEMP_START_R_CHRG_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 3 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 3 values of Battery
! resistance (V2/W).
R_CHRG_BATTERY_CARPET 2D_SPLINE
 0, 0, 25, 45
 0, 0.0047, 0.00235, 0.00235
 0.2, 0.0041, 0.00205, 0.00205
 0.6, 0.00396, 0.00198, 0.00198
 1, 0.00408, 0.00204, 0.00204
ENDTABLE
R_CHRG_BATTERY_GAIN 1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_CHRG_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_CHRG_BATTERY 0 ; - ! Offset subtracted from Battery level state of
                           ! charge
SOC_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Battery level state of
                           ! charge - SOC_START_R_CHRG_BATTERY)
TEMP_START_R_CHRG_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Temperature -
                            ! TEMP_START_R_CHRG_BATTERY)

! R_DIS_BATTERY: Battery resistance being discharged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_DIS_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_DIS_BATTERY_GAIN and
! R_DIS_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_DIS_BATTERY and SOC_START_R_DIS_BATTERY. Temperature used
! in the calculation can be adjusted with TEMP_SCALE_R_DIS_BATTERY and
! TEMP_START_R_DIS_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 3 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 3 values of Battery
! resistance (V2/W).
R_DIS_BATTERY_CARPET 2D_SPLINE
 0, 0, 25, 45
 0, 0.00754, 0.00377, 0.00377
 0.2, 0.006, 0.003, 0.003
 0.6, 0.00538, 0.00269, 0.00269
 1, 0.00624, 0.00312, 0.00312
ENDTABLE
R_DIS_BATTERY_GAIN  1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_DIS_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_DIS_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Battery level state of charge
                          ! - SOC_START_R_DIS_BATTERY)
TEMP_START_R_DIS_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Temperature -
                           ! TEMP_START_R_DIS_BATTERY)

! R_EFF_MOTOR: Motor efficiency (hybrid powertrain). Motor efficiency can be a
! nonlinear CARPET function of motor output torque and motor speed or a function of
! motor speed (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! R_EFF_MOTOR_TORQUE of motor output torque (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Motor efficiency from
! the calculation can be adjusted with R_EFF_MOTOR_GAIN and R_EFF_MOTOR_OFFSET. Motor
! speed used in the calculation can be adjusted with SPIN_SCALE_R_EFF_MOTOR and
! SPIN_START_R_EFF_MOTOR. Motor output torque used in the calculation can be adjusted
! with TORQUE_SCALE_R_EFF_MOTOR and TORQUE_START_R_EFF_MOTOR. This configurable
! function supports 18 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IDIFF and ISIDE are used to identify the dataset
! when reading data.

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(1,1) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(1,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(1,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(1,1) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(1,1) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(1,2) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(1,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(1,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(1,2) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(1,2) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(2,1) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(2,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(2,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(2,1) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(2,1) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(2,2) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(2,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(2,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(2,2) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(2,2) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(4,1) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(4,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(4,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(4,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(4,1) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(4,1) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(4,2) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(4,2) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(4,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(4,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(4,2) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(4,2) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(5,1) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(5,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(5,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(5,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(5,1) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(5,1) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(5,2) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(5,2) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(5,2) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(5,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(5,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(5,2) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(5,2) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(8,1) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(8,1) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(8,1) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(8,1) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(8,1) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(8,1) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(8,1) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET(8,2) 2D_LINEAR
 0, -1960, -1767.213115, -1574.426229, -1381.639344, -1188.852459, -996.0655737, -803.2786886, -610.4918032, -417.704918, -224.9180329, -32.13114754, 0, 32.13114754, 224.9180329, 417.704918, 610.4918032, 803.2786886, 996.0655737, 1188.852459, 1381.639344, 1574.426229, 1767.213115, 1960
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 127.55, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 255.1, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 382.65, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 510.2, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 637.76, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 765.31, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 892.86, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1020.4, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1148, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 1530.6, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN(8,2) 1 ! Gain multiplied with calculated value to get Motor
                        ! efficiency
R_EFF_MOTOR_OFFSET(8,2) 0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR(8,2) 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR(8,2) 1 ! Scale factor divided into (motor speed -
                              ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR(8,2) 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR(8,2) 1 ! Scale factor divided into (motor output torque -
                                ! TORQUE_START_R_EFF_MOTOR)

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 6 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(1,2) 1 ; - ! Constant gain, unit 1, axle 2
R_STEER_SPEED_GAIN(1,2) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Crossing, Right Turn (Air Brakes)
SPEED_TARGET_CONSTANT(1) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -125, 75
 -100, 65
 -8, 10
 8, 10
 100, 30
 200, 50
ENDTABLE
SSTART_SPEED_TARGET(1) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(1) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 12 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -36, -32.85
 -34.56, -31.62
 -33.12, -30.39
 -31.68, -29.15
 -30.24, -27.91
 -28.8, -26.66
 -27.36, -25.41
 -25.92, -24.15
 -24.48, -22.89
 -23.04, -21.61
 -21.6, -20.34
 -20.16, -19.05
 -18.72, -17.75
 -17.28, -16.45
 -15.84, -15.14
 -14.4, -13.81
 -12.96, -12.48
 -11.52, -11.14
 -10.08, -9.79
 -8.64, -8.42
 -7.2, -7.05
 -5.76, -5.66
 -4.32, -4.26
 -2.88, -2.86
 -1.44, -1.43
 0, 0
 1.44, 1.45
 2.88, 2.91
 4.32, 4.38
 5.76, 5.86
 7.2, 7.36
 8.64, 8.87
 10.08, 10.39
 11.52, 11.93
 12.96, 13.48
 14.4, 15.04
 15.84, 16.61
 17.28, 18.2
 18.72, 19.79
 20.16, 21.4
 21.6, 23.02
 23.04, 24.65
 24.48, 26.29
 25.92, 27.94
 27.36, 29.6
 28.8, 31.27
 30.24, 32.95
 31.68, 34.63
 33.12, 36.32
 34.56, 38.02
 36, 39.71
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -36, -39.71
 -34.56, -38.02
 -33.12, -36.32
 -31.68, -34.63
 -30.24, -32.95
 -28.8, -31.27
 -27.36, -29.6
 -25.92, -27.94
 -24.48, -26.29
 -23.04, -24.65
 -21.6, -23.02
 -20.16, -21.4
 -18.72, -19.79
 -17.28, -18.2
 -15.84, -16.61
 -14.4, -15.04
 -12.96, -13.48
 -11.52, -11.93
 -10.08, -10.39
 -8.64, -8.87
 -7.2, -7.36
 -5.76, -5.86
 -4.32, -4.38
 -2.88, -2.91
 -1.44, -1.45
 0, 0
 1.44, 1.43
 2.88, 2.86
 4.32, 4.26
 5.76, 5.66
 7.2, 7.05
 8.64, 8.42
 10.08, 9.79
 11.52, 11.14
 12.96, 12.48
 14.4, 13.81
 15.84, 15.14
 17.28, 16.45
 18.72, 17.75
 20.16, 19.05
 21.6, 20.34
 23.04, 21.61
 24.48, 22.89
 25.92, 24.15
 27.36, 25.41
 28.8, 26.66
 30.24, 27.91
 31.68, 29.15
 33.12, 30.39
 34.56, 31.62
 36, 32.85
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -28.89, -26.29
 -27.73, -25.32
 -26.57, -24.34
 -25.42, -23.36
 -24.26, -22.37
 -23.11, -21.38
 -21.95, -20.38
 -20.8, -19.37
 -19.64, -18.36
 -18.49, -17.34
 -17.33, -16.32
 -16.18, -15.29
 -15.02, -14.25
 -13.86, -13.2
 -12.71, -12.15
 -11.55, -11.09
 -10.4, -10.02
 -9.24, -8.94
 -8.09, -7.86
 -6.93, -6.76
 -5.78, -5.66
 -4.62, -4.54
 -3.47, -3.42
 -2.31, -2.29
 -1.16, -1.15
 0, 0
 1.16, 1.16
 2.31, 2.33
 3.47, 3.51
 4.62, 4.7
 5.78, 5.9
 6.93, 7.11
 8.09, 8.33
 9.24, 9.57
 10.4, 10.81
 11.55, 12.06
 12.71, 13.32
 13.86, 14.6
 15.02, 15.88
 16.18, 17.17
 17.33, 18.47
 18.49, 19.79
 19.64, 21.11
 20.8, 22.44
 21.95, 23.78
 23.11, 25.13
 24.26, 26.48
 25.42, 27.85
 26.57, 29.22
 27.73, 30.6
 28.89, 31.98
ENDTABLE
STEER_KIN_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -28.89, -31.98
 -27.73, -30.6
 -26.57, -29.22
 -25.42, -27.85
 -24.26, -26.48
 -23.11, -25.13
 -21.95, -23.78
 -20.8, -22.44
 -19.64, -21.11
 -18.49, -19.79
 -17.33, -18.47
 -16.18, -17.17
 -15.02, -15.88
 -13.86, -14.6
 -12.71, -13.32
 -11.55, -12.06
 -10.4, -10.81
 -9.24, -9.57
 -8.09, -8.33
 -6.93, -7.11
 -5.78, -5.9
 -4.62, -4.7
 -3.47, -3.51
 -2.31, -2.33
 -1.16, -1.16
 0, 0
 1.16, 1.15
 2.31, 2.29
 3.47, 3.42
 4.62, 4.54
 5.78, 5.66
 6.93, 6.76
 8.09, 7.86
 9.24, 8.94
 10.4, 10.02
 11.55, 11.09
 12.71, 12.15
 13.86, 13.2
 15.02, 14.25
 16.18, 15.29
 17.33, 16.32
 18.49, 17.34
 19.64, 18.36
 20.8, 19.37
 21.95, 20.38
 23.11, 21.38
 24.26, 22.37
 25.42, 23.36
 26.57, 24.34
 27.73, 25.32
 28.89, 26.29
ENDTABLE
STEER_KIN_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_AXLE_JNC_STEER of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Steer from the calculation can be adjusted with SUSP_AXLE_ROLL_STEER_GAIN
! and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER. Jounce used in the calculation can
! be adjusted with JNC_SCALE_AXLE_STEER and JNC_START_AXLE_STEER. The derivative of
! this function is used internally. This configurable function supports 6 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 1

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,2) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 2

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 3
SUSP_AXLE_ROLL_STEER_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,3) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 3

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,4) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 4
SUSP_AXLE_ROLL_STEER_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,4) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,4) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,4) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,4) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 4

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,5) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 5
SUSP_AXLE_ROLL_STEER_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(1,5) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,5) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(1,5) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(1,5) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 1, axle 5

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 1
SUSP_AXLE_ROLL_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)
SUSP_AXLE_ROLL_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_AXLE_JNC_STEER_CONSTANT(2,1) 1 ; - ! [D] Constant steer component due to
                                    ! jounce, unit 2, axle 1

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of roll and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_AXLE_ROLL of roll
! (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the calculation can be
! adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET. Jounce used in the
! calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_DIVE_AXLE and ROLL_START_SUSP_DIVE_AXLE. The derivative of this
! function is used internally. This configurable function supports 6 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 1
SUSP_DIVE_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 1

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 2
SUSP_DIVE_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 2

SUSP_DIVE_AXLE_CONSTANT(1,3) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 3
SUSP_DIVE_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 3

SUSP_DIVE_AXLE_CONSTANT(1,4) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 4
SUSP_DIVE_AXLE_GAIN(1,4) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,4) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,4) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,4) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 4

SUSP_DIVE_AXLE_CONSTANT(1,5) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 1, axle 5
SUSP_DIVE_AXLE_GAIN(1,5) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(1,5) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(1,5) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(1,5) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 1, axle 5

SUSP_DIVE_AXLE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive component due to
                               ! jounce, unit 2, axle 1
SUSP_DIVE_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension
                           ! dive
SUSP_DIVE_AXLE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive
SUSP_DIVE_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant suspension dive component due to
                                    ! roll, unit 2, axle 1

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward can be a nonlinear CARPET function of roll and jounce or a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_X_AXLE_ROLL of roll (CONSTANT, COEFFICIENT, or TABLE). X axle movement forward
! from the calculation can be adjusted with SUSP_X_AXLE_GAIN and SUSP_X_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_X_AXLE and
! JNC_START_SUSP_X_AXLE. Roll used in the calculation can be adjusted with
! ROLL_SCALE_SUSP_X_AXLE and ROLL_START_SUSP_X_AXLE. The derivative of this function
! is used internally. This configurable function supports 6 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 1
SUSP_X_AXLE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 1

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 2
SUSP_X_AXLE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,2) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 2

SUSP_X_AXLE_CONSTANT(1,3) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 3
SUSP_X_AXLE_GAIN(1,3) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,3) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,3) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 3

SUSP_X_AXLE_CONSTANT(1,4) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 4
SUSP_X_AXLE_GAIN(1,4) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,4) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,4) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 4

SUSP_X_AXLE_CONSTANT(1,5) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 1, axle 5
SUSP_X_AXLE_GAIN(1,5) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(1,5) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(1,5) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 1, axle 5

SUSP_X_AXLE_CONSTANT(2,1) 0 ; mm ! Constant X axle movement forward component due to
                            ! jounce, unit 2, axle 1
SUSP_X_AXLE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
SUSP_X_AXLE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_X_AXLE_ROLL_CONSTANT(2,1) 1 ; - ! Constant X axle movement forward component
                                 ! due to roll, unit 2, axle 1

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 6 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,3) SPLINE ! unit 1, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,4) SPLINE ! unit 1, axle 4
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,4) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,4) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,4) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,4) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,4) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 4

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,5) SPLINE ! unit 1, axle 5
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,5) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,5) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,5) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,5) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,5) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 5

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,1) SPLINE ! unit 2, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 1

! THROTTLE_ENGINE: Normalized open-loop throttle request. Normalized throttle
! request is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Normalized throttle request from the
! calculation can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET.
! Time used in the calculation can be adjusted with TSCALE_THROTTLE and
! TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle request
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! request

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT   0.75 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! VOC_BATTERY: Battery pack open-circuit voltage. Open-circuit voltage can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function VOC_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Open-circuit
! voltage from the calculation can be adjusted with VOC_BATTERY_GAIN and
! VOC_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_VOC_BATTERY and SOC_START_VOC_BATTERY. Temperature used in
! the calculation can be adjusted with TEMP_SCALE_VOC_BATTERY and
! TEMP_START_VOC_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of
! Open-circuit voltage (V).
VOC_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 7.237, 7.237
 0.1, 7.4047, 7.4047
 0.2, 7.5106, 7.5106
 0.3, 7.5873, 7.5873
 0.4, 7.6459, 7.6459
 0.5, 7.6909, 7.6909
 0.6, 7.7294, 7.7294
 0.7, 7.7666, 7.7666
 0.8, 7.8078, 7.8078
 0.9, 7.9143, 7.9143
 1, 8.3645, 8.3645
ENDTABLE
VOC_BATTERY_GAIN    1 ! Gain multiplied with calculated value to get Open-circuit
                      ! voltage
VOC_BATTERY_OFFSET  0 ; V ! Offset added (after gain) to get Open-circuit voltage
SOC_START_VOC_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Battery level state of charge -
                        ! SOC_START_VOC_BATTERY)
TEMP_START_VOC_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Temperature -
                         ! TEMP_START_VOC_BATTERY)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_L3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_L4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_L5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_L6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_R4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_R5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_R6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_AERO_ROAD_ID_1 1001 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_2 1001 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 128.2243631 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_2 125.2141396 ; m ! Road path station for tracked aero road point
SV_ART_H1_OLD 0.01691232381 ; deg ! Articulation (2-1-3) for hitch 1
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission {TC_Lock}
SV_AVX 0.0001774610447 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 1 {AVx}
SV_AVX_2 0.0001292878826 ; deg/s ! ODE: Body-X roll rate of sprung-mass 2 {AVx_2}
SV_AVX_A1 -0.0003553614543 ; deg/s ! ODE: Roll rate of axle 1
SV_AVX_A2 -0.0003585046509 ; deg/s ! ODE: Roll rate of axle 2
SV_AVX_A3 -0.0001164502179 ; deg/s ! ODE: Roll rate of axle 3
SV_AVX_A4 -0.0001191609235 ; deg/s ! ODE: Roll rate of axle 4
SV_AVX_A5 -0.0001217527201 ; deg/s ! ODE: Roll rate of axle 5
SV_AVX_A6 -7.888802642e-05 ; deg/s ! ODE: Roll rate of axle 6
SV_AVY 0.000488210956 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 1 {AVy}
SV_AVY_2 -8.020697562e-05 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass 2 {AVy_2}
SV_AVY_L1 208.2543539 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 208.2483463 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 208.2608218 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 208.254814 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_L3 207.8765939 ; rpm ! ODE: Spin of wheel L3 {AVy_L3}
SV_AVY_L3_OLD 207.8705849 ; rpm ! Spin of wheel L3 (previous time step)
SV_AVY_L4 207.8582079 ; rpm ! ODE: Spin of wheel L4 {AVy_L4}
SV_AVY_L4_OLD 207.8521991 ; rpm ! Spin of wheel L4 (previous time step)
SV_AVY_L5 207.8581431 ; rpm ! ODE: Spin of wheel L5 {AVy_L5}
SV_AVY_L5_OLD 207.8521342 ; rpm ! Spin of wheel L5 (previous time step)
SV_AVY_L6 206.0997998 ; rpm ! ODE: Spin of wheel L6 {AVy_L6}
SV_AVY_L6_OLD 206.0938054 ; rpm ! Spin of wheel L6 (previous time step)
SV_AVY_R1 208.0198264 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 208.0138193 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2  208.019832 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 208.0138248 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVY_R3 207.8071398 ; rpm ! ODE: Spin of wheel R3 {AVy_R3}
SV_AVY_R3_OLD 207.8011319 ; rpm ! Spin of wheel R3 (previous time step)
SV_AVY_R4 207.7898312 ; rpm ! ODE: Spin of wheel R4 {AVy_R4}
SV_AVY_R4_OLD 207.7838233 ; rpm ! Spin of wheel R4 (previous time step)
SV_AVY_R5 207.7900686 ; rpm ! ODE: Spin of wheel R5 {AVy_R5}
SV_AVY_R5_OLD 207.7840607 ; rpm ! Spin of wheel R5 (previous time step)
SV_AVY_R6 206.0994595 ; rpm ! ODE: Spin of wheel R6 {AVy_R6}
SV_AVY_R6_OLD 206.0934651 ; rpm ! Spin of wheel R6 (previous time step)
SV_AVZ 0.001630580406 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 1 {AVz}
SV_AVZ_2 0.00180040983 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass 2 {AVz_2}
SV_AV_CL            0 ; rpm ! Clutch relative spin, previous time step
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_SHAFT_L_D1 208.2543539 ; rpm ! ODE: Diff1 Left (first) output shaft speed
                             ! {AV_DS_L1}
SV_AV_SHAFT_L_D2 208.2608218 ; rpm ! ODE: Diff2 Left (first) output shaft speed
                             ! {AV_DS_L2}
SV_AV_SHAFT_L_D3 815.8973935 ; rpm ! ODE: Diff3 Left (first) output shaft speed 
SV_AV_SHAFT_L_D4 207.8765939 ; rpm ! ODE: Diff4 Left (first) output shaft speed
                             ! {AV_DS_L3}
SV_AV_SHAFT_L_D5 207.8582079 ; rpm ! ODE: Diff5 Left (first) output shaft speed
                             ! {AV_DS_L4}
SV_AV_SHAFT_L_D6 814.7401181 ; rpm ! ODE: Diff6 Left (first) output shaft speed 
SV_AV_SHAFT_L_D7 815.9037375 ; rpm ! ODE: Diff7 Left (first) output shaft speed 
SV_AV_SHAFT_L_D8 207.8581431 ; rpm ! ODE: Diff8 Left (first) output shaft speed
                             ! {AV_DS_L5}
SV_AV_SHAFT_L_D9 814.6701565 ; rpm ! ODE: Diff9 Left (first) output shaft speed 
SV_AV_SHAFT_R_D1 208.0198264 ; rpm ! ODE: Diff1 Right (second) output shaft speed
                             ! {AV_DS_R1}
SV_AV_SHAFT_R_D2 208.019832 ; rpm ! ODE: Diff2 Right (second) output shaft speed
                            ! {AV_DS_R2}
SV_AV_SHAFT_R_D3 815.9100814 ; rpm ! ODE: Diff3 Right (second) output shaft speed 
SV_AV_SHAFT_R_D4 207.8071398 ; rpm ! ODE: Diff4 Right (second) output shaft speed
                             ! {AV_DS_R3}
SV_AV_SHAFT_R_D5 207.7898312 ; rpm ! ODE: Diff5 Right (second) output shaft speed
                             ! {AV_DS_R4}
SV_AV_SHAFT_R_D6 814.6703257 ; rpm ! ODE: Diff6 Right (second) output shaft speed 
SV_AV_SHAFT_R_D7 814.6935898 ; rpm ! ODE: Diff7 Right (second) output shaft speed 
SV_AV_SHAFT_R_D8 207.7900686 ; rpm ! ODE: Diff8 Right (second) output shaft speed
                             ! {AV_DS_R5}
SV_AV_SHAFT_R_D9 814.6704949 ; rpm ! ODE: Diff9 Right (second) output shaft speed 
SV_AV_SW -0.04235621497 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC            0 ; rpm ! ODE: Torque coupling output shaft spin {AV_TC}
SV_AV_TR_OUT 815.1776489 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BATTERY_CHARGED 0.5980847903 ; - ! Electric battery state of charge {SocBttry}
SV_BATTERY_DIS_CAP 200.9576049 ; A-h ! ODE: Electric battery discharged capacity
                               ! {CapBtrDs}
SV_BETA -0.1323033911 ; deg ! Sideslip (ISO)
SV_BETA_2 -0.165024928 ; deg ! Sideslip (ISO)
SV_BETA_RD -0.1458186806 ; deg ! Sideslip using road axes
SV_BETA_RD_2 -0.1634962539 ; deg ! Sideslip using road axes
SV_BTR_CHRG_CUTOFF  0 ; - ! Battery charging cut-off by speed
SV_BTR_CHRG_ON_OFF  0 ; - ! Battery charging on/off old
SV_CL_2ND_DIFF_LOCKED_1 0 ; - ! 2nd Clutch lock state, 1st drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state, 2nd drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_3 0 ; - ! 2nd Clutch lock state, inter-axle diff for drive
                          ! axles 1,2, prev. time step
SV_CL_2ND_DIFF_LOCKED_4 0 ; - ! 2nd Clutch lock state, 3rd drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_5 0 ; - ! 2nd Clutch lock state, 4th drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_6 0 ; - ! 2nd Clutch lock state, inter-axle diff for drive
                          ! axles 3,4,5, prev. time step
SV_CL_2ND_DIFF_LOCKED_7 0 ; - ! 2nd Clutch lock state, master transfer case, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_8 0 ; - ! 2nd Clutch lock state, 5th drive axle diff, prev.
                          ! time step
SV_CL_2ND_DIFF_LOCKED_9 0 ; - ! 2nd Clutch lock state, inter-axle diff for drive
                          ! axles 4,5, prev. time step
SV_CL_2ND_DIFF_SLIP_REF_1 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_3 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                            ! drive axles 1,2
SV_CL_2ND_DIFF_SLIP_REF_4 0 ; deg ! 2nd Clutch ref. angle for 3rd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_5 0 ; deg ! 2nd Clutch ref. angle for 4th drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_6 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                            ! drive axles 3,4,5
SV_CL_2ND_DIFF_SLIP_REF_7 0 ; deg ! 2nd Clutch ref. angle for master transfer case
SV_CL_2ND_DIFF_SLIP_REF_8 0 ; deg ! 2nd Clutch ref. angle for 5th drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_9 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                            ! drive axles 4,5
SV_CL_2ND_DIFF_SPIN_1 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff
SV_CL_2ND_DIFF_SPIN_3 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for drive
                        ! axles 1,2
SV_CL_2ND_DIFF_SPIN_4 0 ; rpm ! 2nd Clutch rel. spin for 3rd drive axle diff
SV_CL_2ND_DIFF_SPIN_5 0 ; rpm ! 2nd Clutch rel. spin for 4th drive axle diff
SV_CL_2ND_DIFF_SPIN_6 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for drive
                        ! axles 3,4,5
SV_CL_2ND_DIFF_SPIN_7 0 ; rpm ! 2nd Clutch rel. spin for master transfer case
SV_CL_2ND_DIFF_SPIN_8 0 ; rpm ! 2nd Clutch rel. spin for 5th drive axle diff
SV_CL_2ND_DIFF_SPIN_9 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for drive
                        ! axles 4,5
SV_CL_DIFF_LOCKED_1 0 ; - ! Clutch lock state for 1st drive axle diff
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff
SV_CL_DIFF_LOCKED_3 0 ; - ! Clutch lock state for inter-axle diff for drive axles
                      ! 1,2
SV_CL_DIFF_LOCKED_4 0 ; - ! Clutch lock state for 3rd drive axle diff
SV_CL_DIFF_LOCKED_5 0 ; - ! Clutch lock state for 4th drive axle diff
SV_CL_DIFF_LOCKED_6 0 ; - ! Clutch lock state for inter-axle diff for drive axles
                      ! 3,4,5
SV_CL_DIFF_LOCKED_7 0 ; - ! Clutch lock state for master transfer case
SV_CL_DIFF_LOCKED_8 0 ; - ! Clutch lock state for 5th drive axle diff
SV_CL_DIFF_LOCKED_9 0 ; - ! Clutch lock state for inter-axle diff for drive axles
                      ! 4,5
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Clutch ref. angle for 1st drive axle diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Clutch ref. angle for inter-axle diff for drive
                        ! axles 1,2
SV_CL_DIFF_SLIP_REF_4 0 ; deg ! Clutch ref. angle for 3rd drive axle diff
SV_CL_DIFF_SLIP_REF_5 0 ; deg ! Clutch ref. angle for 4th drive axle diff
SV_CL_DIFF_SLIP_REF_6 0 ; deg ! Clutch ref. angle for inter-axle diff for drive
                        ! axles 3,4,5
SV_CL_DIFF_SLIP_REF_7 0 ; deg ! Clutch ref. angle for master transfer case
SV_CL_DIFF_SLIP_REF_8 0 ; deg ! Clutch ref. angle for 5th drive axle diff
SV_CL_DIFF_SLIP_REF_9 0 ; deg ! Clutch ref. angle for inter-axle diff for drive
                        ! axles 4,5
SV_CL_DIFF_SPIN_1 0.2345269382 ; rpm ! Clutch rel. spin, 1st drive axle diff, prev.
                               ! time step
SV_CL_DIFF_SPIN_2 0.240989223 ; rpm ! Clutch rel. spin, 2nd drive axle diff, prev.
                              ! time step
SV_CL_DIFF_SPIN_3   0 ; rpm ! Clutch rel. spin, inter-axle diff for drive axles 1,2,
                      ! prev. time step
SV_CL_DIFF_SPIN_4 0.06945304297 ; rpm ! Clutch rel. spin, 3rd drive axle diff, prev.
                                ! time step
SV_CL_DIFF_SPIN_5 0.06837576508 ; rpm ! Clutch rel. spin, 4th drive axle diff, prev.
                                ! time step
SV_CL_DIFF_SPIN_6   0 ; rpm ! Clutch rel. spin, inter-axle diff for drive axles
                      ! 3,4,5, prev. time step
SV_CL_DIFF_SPIN_7   0 ; rpm ! Clutch rel. spin, master transfer case, prev. time
                      ! step
SV_CL_DIFF_SPIN_8 0.0680735121 ; rpm ! Clutch rel. spin, 5th drive axle diff, prev.
                               ! time step
SV_CL_DIFF_SPIN_9   0 ; rpm ! Clutch rel. spin, inter-axle diff for drive axles 4,5,
                      ! prev. time step
SV_CL_LOCKED        1 ; - ! Clutch lockup state {Cl_Stat}
SV_CL_TWIN_LOCKED_LF 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_RF 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_SPIN_LF  0 ; rpm ! Rel. spin of LF twin clutch, prev. time step
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch, prev. time step
SV_CL_TWIN_SPIN_RF  0 ; rpm ! Rel. spin of RF twin clutch, prev. time step
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch, prev. time step
SV_CMP_S_L1 39.88441907 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 39.88441907 ; mm ! Compression of ride spring L2
SV_CMP_S_L3 5.888267289 ; mm ! Compression of ride spring L3
SV_CMP_S_L4 5.888267289 ; mm ! Compression of ride spring L4
SV_CMP_S_L5 5.888267289 ; mm ! Compression of ride spring L5
SV_CMP_S_L6 26.09693477 ; mm ! Compression of ride spring L6
SV_CMP_S_R1 38.40542506 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 38.40542506 ; mm ! Compression of ride spring R2
SV_CMP_S_R3 4.728469176 ; mm ! Compression of ride spring R3
SV_CMP_S_R4 4.728469176 ; mm ! Compression of ride spring R4
SV_CMP_S_R5 4.728469176 ; mm ! Compression of ride spring R5
SV_CMP_S_R6 25.49179248 ; mm ! Compression of ride spring R6
SV_CONTACT_ID_L1I 1001 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O 1001 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I 1001 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O 1001 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_L3I 1001 ; - ! Road surface ID for tire contact {RdID_L3I}
SV_CONTACT_ID_L3O 1001 ; - ! Road surface ID for tire contact {RdID_L3O}
SV_CONTACT_ID_L4I 1001 ; - ! Road surface ID for tire contact {RdID_L4I}
SV_CONTACT_ID_L4O 1001 ; - ! Road surface ID for tire contact {RdID_L4O}
SV_CONTACT_ID_L5I 1001 ; - ! Road surface ID for tire contact {RdID_L5I}
SV_CONTACT_ID_L5O 1001 ; - ! Road surface ID for tire contact {RdID_L5O}
SV_CONTACT_ID_L6I 1001 ; - ! Road surface ID for tire contact {RdID_L6I}
SV_CONTACT_ID_L6O 1001 ; - ! Road surface ID for tire contact {RdID_L6O}
SV_CONTACT_ID_R1I 1001 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O 1001 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I 1001 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O 1001 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_ID_R3I 1001 ; - ! Road surface ID for tire contact {RdID_R3I}
SV_CONTACT_ID_R3O 1001 ; - ! Road surface ID for tire contact {RdID_R3O}
SV_CONTACT_ID_R4I 1001 ; - ! Road surface ID for tire contact {RdID_R4I}
SV_CONTACT_ID_R4O 1001 ; - ! Road surface ID for tire contact {RdID_R4O}
SV_CONTACT_ID_R5I 1001 ; - ! Road surface ID for tire contact {RdID_R5I}
SV_CONTACT_ID_R5O 1001 ; - ! Road surface ID for tire contact {RdID_R5O}
SV_CONTACT_ID_R6I 1001 ; - ! Road surface ID for tire contact {RdID_R6I}
SV_CONTACT_ID_R6O 1001 ; - ! Road surface ID for tire contact {RdID_R6O}
SV_CONTACT_STA_L1I 131.2177486 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O -175 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 130.1176631 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O -176.1 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_L3I 126.318144 ; m ! Road path station for tire contact {S_Rd_L3I}
SV_CONTACT_STA_L3O 126.3174051 ; m ! Road path station for tire contact {S_Rd_L3O}
SV_CONTACT_STA_L4I 125.2181078 ; m ! Road path station for tire contact {S_Rd_L4I}
SV_CONTACT_STA_L4O 125.2173689 ; m ! Road path station for tire contact {S_Rd_L4O}
SV_CONTACT_STA_L5I 124.1180716 ; m ! Road path station for tire contact {S_Rd_L5I}
SV_CONTACT_STA_L5O 124.1173327 ; m ! Road path station for tire contact {S_Rd_L5O}
SV_CONTACT_STA_L6I 116.7126314 ; m ! Road path station for tire contact {S_Rd_L6I}
SV_CONTACT_STA_L6O 116.7118043 ; m ! Road path station for tire contact {S_Rd_L6O}
SV_CONTACT_STA_R1I 131.2227236 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O -175 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 130.1227316 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O -176.1 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_CONTACT_STA_R3I 126.3218455 ; m ! Road path station for tire contact {S_Rd_R3I}
SV_CONTACT_STA_R3O 126.3225844 ; m ! Road path station for tire contact {S_Rd_R3O}
SV_CONTACT_STA_R4I 125.2218093 ; m ! Road path station for tire contact {S_Rd_R4I}
SV_CONTACT_STA_R4O 125.2225482 ; m ! Road path station for tire contact {S_Rd_R4O}
SV_CONTACT_STA_R5I 124.1217731 ; m ! Road path station for tire contact {S_Rd_R5I}
SV_CONTACT_STA_R5O 124.1225119 ; m ! Road path station for tire contact {S_Rd_R5O}
SV_CONTACT_STA_R6I 116.7167747 ; m ! Road path station for tire contact {S_Rd_R6I}
SV_CONTACT_STA_R6O 116.7176017 ; m ! Road path station for tire contact {S_Rd_R6O}
SV_DZDX_GND         0 ; - ! dZ/dX of ground at unit 1 aero ref. pt (saved)
SV_DZDX_GND_2       0 ; - ! dZ/dX of ground at unit 2 aero ref. pt (saved)
SV_DZDX_L1I         0 ; - ! Ground X slope under tire L1i (saved)
SV_DZDX_L1O         0 ; - ! Ground X slope under tire L1o (saved)
SV_DZDX_L2I         0 ; - ! Ground X slope under tire L2i (saved)
SV_DZDX_L2O         0 ; - ! Ground X slope under tire L2o (saved)
SV_DZDX_L3I         0 ; - ! Ground X slope under tire L3i (saved)
SV_DZDX_L3O         0 ; - ! Ground X slope under tire L3o (saved)
SV_DZDX_L4I         0 ; - ! Ground X slope under tire L4i (saved)
SV_DZDX_L4O         0 ; - ! Ground X slope under tire L4o (saved)
SV_DZDX_L5I         0 ; - ! Ground X slope under tire L5i (saved)
SV_DZDX_L5O         0 ; - ! Ground X slope under tire L5o (saved)
SV_DZDX_L6I         0 ; - ! Ground X slope under tire L6i (saved)
SV_DZDX_L6O         0 ; - ! Ground X slope under tire L6o (saved)
SV_DZDX_R1I         0 ; - ! Ground X slope under tire R1i (saved)
SV_DZDX_R1O         0 ; - ! Ground X slope under tire R1o (saved)
SV_DZDX_R2I         0 ; - ! Ground X slope under tire R2i (saved)
SV_DZDX_R2O         0 ; - ! Ground X slope under tire R2o (saved)
SV_DZDX_R3I         0 ; - ! Ground X slope under tire R3i (saved)
SV_DZDX_R3O         0 ; - ! Ground X slope under tire R3o (saved)
SV_DZDX_R4I         0 ; - ! Ground X slope under tire R4i (saved)
SV_DZDX_R4O         0 ; - ! Ground X slope under tire R4o (saved)
SV_DZDX_R5I         0 ; - ! Ground X slope under tire R5i (saved)
SV_DZDX_R5O         0 ; - ! Ground X slope under tire R5o (saved)
SV_DZDX_R6I         0 ; - ! Ground X slope under tire R6i (saved)
SV_DZDX_R6O         0 ; - ! Ground X slope under tire R6o (saved)
SV_DZDY_GND 0.02777777778 ; - ! dZ/dY of ground at unit 1 aero ref. pt (saved)
SV_DZDY_GND_2 0.02777777778 ; - ! dZ/dY of ground at unit 2 aero ref. pt (saved)
SV_DZDY_L1I 0.02777777778 ; - ! Ground Y slope under tire L1i  (saved)
SV_DZDY_L1O 0.02777777778 ; - ! Ground Y slope under tire L1o  (saved)
SV_DZDY_L2I 0.02777777778 ; - ! Ground Y slope under tire L2i  (saved)
SV_DZDY_L2O 0.02777777778 ; - ! Ground Y slope under tire L2o  (saved)
SV_DZDY_L3I 0.02777777778 ; - ! Ground Y slope under tire L3i  (saved)
SV_DZDY_L3O 0.02777777778 ; - ! Ground Y slope under tire L3o  (saved)
SV_DZDY_L4I 0.02777777778 ; - ! Ground Y slope under tire L4i  (saved)
SV_DZDY_L4O 0.02777777778 ; - ! Ground Y slope under tire L4o  (saved)
SV_DZDY_L5I 0.02777777778 ; - ! Ground Y slope under tire L5i  (saved)
SV_DZDY_L5O 0.02777777778 ; - ! Ground Y slope under tire L5o  (saved)
SV_DZDY_L6I 0.02777777778 ; - ! Ground Y slope under tire L6i  (saved)
SV_DZDY_L6O 0.02777777778 ; - ! Ground Y slope under tire L6o  (saved)
SV_DZDY_R1I 0.02777777778 ; - ! Ground Y slope under tire R1i  (saved)
SV_DZDY_R1O 0.02777777778 ; - ! Ground Y slope under tire R1o  (saved)
SV_DZDY_R2I 0.02777777778 ; - ! Ground Y slope under tire R2i  (saved)
SV_DZDY_R2O 0.02777777778 ; - ! Ground Y slope under tire R2o  (saved)
SV_DZDY_R3I 0.02777777778 ; - ! Ground Y slope under tire R3i  (saved)
SV_DZDY_R3O 0.02777777778 ; - ! Ground Y slope under tire R3o  (saved)
SV_DZDY_R4I 0.02777777778 ; - ! Ground Y slope under tire R4i  (saved)
SV_DZDY_R4O 0.02777777778 ; - ! Ground Y slope under tire R4o  (saved)
SV_DZDY_R5I 0.02777777778 ; - ! Ground Y slope under tire R5i  (saved)
SV_DZDY_R5O 0.02777777778 ; - ! Ground Y slope under tire R5o  (saved)
SV_DZDY_R6I 0.02777777778 ; - ! Ground Y slope under tire R6i  (saved)
SV_DZDY_R6O 0.02777777778 ; - ! Ground Y slope under tire R6o  (saved)
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_L3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3i
SV_D_ALPHA_L3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3o
SV_D_ALPHA_L4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4i
SV_D_ALPHA_L4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4o
SV_D_ALPHA_L5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5i
SV_D_ALPHA_L5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5o
SV_D_ALPHA_L6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6i
SV_D_ALPHA_L6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_L3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3i
SV_D_ALPHA_MX_L3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3o
SV_D_ALPHA_MX_L4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4i
SV_D_ALPHA_MX_L4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4o
SV_D_ALPHA_MX_L5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5i
SV_D_ALPHA_MX_L5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5o
SV_D_ALPHA_MX_L6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6i
SV_D_ALPHA_MX_L6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_MX_R3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3i
SV_D_ALPHA_MX_R3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3o
SV_D_ALPHA_MX_R4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4i
SV_D_ALPHA_MX_R4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4o
SV_D_ALPHA_MX_R5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5i
SV_D_ALPHA_MX_R5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5o
SV_D_ALPHA_MX_R6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6i
SV_D_ALPHA_MX_R6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_ALPHA_R3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3i
SV_D_ALPHA_R3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3o
SV_D_ALPHA_R4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4i
SV_D_ALPHA_R4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4o
SV_D_ALPHA_R5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5i
SV_D_ALPHA_R5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5o
SV_D_ALPHA_R6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6i
SV_D_ALPHA_R6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_L3I       0 ; - ! Delta Coni (Mz 0-crossing), tire L3i
SV_D_CONI_L3O       0 ; - ! Delta Coni (Mz 0-crossing), tire L3o
SV_D_CONI_L4I       0 ; - ! Delta Coni (Mz 0-crossing), tire L4i
SV_D_CONI_L4O       0 ; - ! Delta Coni (Mz 0-crossing), tire L4o
SV_D_CONI_L5I       0 ; - ! Delta Coni (Mz 0-crossing), tire L5i
SV_D_CONI_L5O       0 ; - ! Delta Coni (Mz 0-crossing), tire L5o
SV_D_CONI_L6I       0 ; - ! Delta Coni (Mz 0-crossing), tire L6i
SV_D_CONI_L6O       0 ; - ! Delta Coni (Mz 0-crossing), tire L6o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_CONI_R3I       0 ; - ! Delta Coni (Mz 0-crossing), tire R3i
SV_D_CONI_R3O       0 ; - ! Delta Coni (Mz 0-crossing), tire R3o
SV_D_CONI_R4I       0 ; - ! Delta Coni (Mz 0-crossing), tire R4i
SV_D_CONI_R4O       0 ; - ! Delta Coni (Mz 0-crossing), tire R4o
SV_D_CONI_R5I       0 ; - ! Delta Coni (Mz 0-crossing), tire R5i
SV_D_CONI_R5O       0 ; - ! Delta Coni (Mz 0-crossing), tire R5o
SV_D_CONI_R6I       0 ; - ! Delta Coni (Mz 0-crossing), tire R6i
SV_D_CONI_R6O       0 ; - ! Delta Coni (Mz 0-crossing), tire R6o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_L3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3i
SV_D_KAPPA_L3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3o
SV_D_KAPPA_L4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4i
SV_D_KAPPA_L4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4o
SV_D_KAPPA_L5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5i
SV_D_KAPPA_L5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5o
SV_D_KAPPA_L6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6i
SV_D_KAPPA_L6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_D_KAPPA_R3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3i
SV_D_KAPPA_R3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3o
SV_D_KAPPA_R4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4i
SV_D_KAPPA_R4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4o
SV_D_KAPPA_R5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5i
SV_D_KAPPA_R5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5o
SV_D_KAPPA_R6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6i
SV_D_KAPPA_R6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6o
SV_ENG_MODE_CUTOFF  0 ; - ! Engine mode cut-off by speed
SV_ENG_MODE_ON_OFF  0 ; - ! Engine mode on/off old
SV_ESC_STATE        0 ; - ! State of ESC engine torque control, prev. time step
SV_EV_MODE_ON_OFF   0 ; - ! EV mode on/off old
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  6383.383224 ; N ! Force from ride spring L1
SV_FS_L2  6383.383224 ; N ! Force from ride spring L2
SV_FS_L3  4834.111582 ; N ! Force from ride spring L3
SV_FS_L4  4834.111582 ; N ! Force from ride spring L4
SV_FS_L5  4834.111582 ; N ! Force from ride spring L5
SV_FS_L6  19250.69574 ; N ! Force from ride spring L6
SV_FS_R1   8792.62101 ; N ! Force from ride spring R1
SV_FS_R2   8792.62101 ; N ! Force from ride spring R2
SV_FS_R3  5397.754202 ; N ! Force from ride spring R3
SV_FS_R4  5397.754202 ; N ! Force from ride spring R4
SV_FS_R5  5397.754202 ; N ! Force from ride spring R5
SV_FS_R6  16765.58912 ; N ! Force from ride spring R6
SV_FX_SM_L1 1131.385315 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 1131.213009 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_L3 1099.918543 ; N ! Tire force [sx] component, wheel L3
SV_FX_SM_L4 1088.3755 ; N ! Tire force [sx] component, wheel L4
SV_FX_SM_L5 1088.377301 ; N ! Tire force [sx] component, wheel L5
SV_FX_SM_L6 -210.6542972 ; N ! Tire force [sx] component, wheel L6
SV_FX_SM_R1 1135.295983 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 1135.163208 ; N ! Tire force [sx] component, wheel R2
SV_FX_SM_R3 1101.449183 ; N ! Tire force [sx] component, wheel R3
SV_FX_SM_R4 1089.898974 ; N ! Tire force [sx] component, wheel R4
SV_FX_SM_R5 1089.893892 ; N ! Tire force [sx] component, wheel R5
SV_FX_SM_R6 -207.0808735 ; N ! Tire force [sx] component, wheel R6
SV_FY_SM_L1 194.8808121 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 239.759044 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_L3 263.6999071 ; N ! Tire force [sy] component, wheel L3
SV_FY_SM_L4 263.9827999 ; N ! Tire force [sy] component, wheel L4
SV_FY_SM_L5 264.3057129 ; N ! Tire force [sy] component, wheel L5
SV_FY_SM_L6 593.8084061 ; N ! Tire force [sy] component, wheel L6
SV_FY_SM_R1 309.8344137 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 356.0759058 ; N ! Tire force [sy] component, wheel R2
SV_FY_SM_R3 275.0063214 ; N ! Tire force [sy] component, wheel R3
SV_FY_SM_R4 275.2472865 ; N ! Tire force [sy] component, wheel R4
SV_FY_SM_R5 275.533228 ; N ! Tire force [sy] component, wheel R5
SV_FY_SM_R6 579.0130292 ; N ! Tire force [sy] component, wheel R6
SV_FZ_SM_L1 8926.001966 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 8908.299877 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_L3 10439.39828 ; N ! Tire force force [sz] component, wheel L3
SV_FZ_SM_L4  10439.96 ; N ! Tire force force [sz] component, wheel L4
SV_FZ_SM_L5 10440.49644 ; N ! Tire force force [sz] component, wheel L5
SV_FZ_SM_L6 22212.23367 ; N ! Tire force force [sz] component, wheel L6
SV_FZ_SM_R1 10170.03708 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 10187.71277 ; N ! Tire force force [sz] component, wheel R2
SV_FZ_SM_R3 10893.75857 ; N ! Tire force force [sz] component, wheel R3
SV_FZ_SM_R4 10892.26291 ; N ! Tire force force [sz] component, wheel R4
SV_FZ_SM_R5 10890.79286 ; N ! Tire force force [sz] component, wheel R5
SV_FZ_SM_R6 21628.01106 ; N ! Tire force force [sz] component, wheel R6
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A3    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A4    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A5    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A6    0 ; N ! Friction force at rack
SV_HEV_DRV_OR_BRK   1 ; - ! HEV drive or brake mode
SV_HYBRID_MODE      1 ; - ! Hybrid/Electric powertrain mode
SV_IAVERR_GNR       0 ; deg ! ODE: Generator speed control integral error
SV_IVERR 0.3445306182 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_JNCR_A1 2.14724523e-05 ; m/s ! ODE: Jounce rate of axle 1
SV_JNCR_A2 1.208937755e-05 ; m/s ! ODE: Jounce rate of axle 2
SV_JNCR_A3 5.917979888e-06 ; m/s ! ODE: Jounce rate of axle 3
SV_JNCR_A4 -3.425891952e-06 ; m/s ! ODE: Jounce rate of axle 4
SV_JNCR_A5 -1.276751164e-05 ; m/s ! ODE: Jounce rate of axle 5
SV_JNCR_A6 6.63839842e-07 ; m/s ! ODE: Jounce rate of axle 6
SV_JNC_A1 -0.005858675994 ; m ! ODE: Jounce of axle 1
SV_JNC_A2 0.003446102095 ; m ! ODE: Jounce of axle 2
SV_JNC_A3 -0.005100982838 ; m ! ODE: Jounce of axle 3
SV_JNC_A4 0.004203763315 ; m ! ODE: Jounce of axle 4
SV_JNC_A5 0.01350845959 ; m ! ODE: Jounce of axle 5
SV_JNC_A6 -1.607957424e-05 ; m ! ODE: Jounce of axle 6
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_L3        0 ; - ! Lockup state for wheel L3
SV_LK_WHL_L4        0 ; - ! Lockup state for wheel L4
SV_LK_WHL_L5        0 ; - ! Lockup state for wheel L5
SV_LK_WHL_L6        0 ; - ! Lockup state for wheel L6
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LK_WHL_R3        0 ; - ! Lockup state for wheel R3
SV_LK_WHL_R4        0 ; - ! Lockup state for wheel R4
SV_LK_WHL_R5        0 ; - ! Lockup state for wheel R5
SV_LK_WHL_R6        0 ; - ! Lockup state for wheel R6
SV_LOCKED_CLUTCH_NEUTRAL 1 ; - ! Clutch locked while in neutral in previous time
                           ! step
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MX_H1  1549.604675 ; N-m ! Roll moment minus damping, hitch 1
SV_MY_BRK_L1 -561.7798821 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 -561.7182721 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_L3 -543.1491931 ; N-m ! Spin moment, wheel L3
SV_MY_BRK_L4 -537.261229 ; N-m ! Spin moment, wheel L4
SV_MY_BRK_L5 -537.2612175 ; N-m ! Spin moment, wheel L5
SV_MY_BRK_L6 38.18338399 ; N-m ! Spin moment, wheel L6
SV_MY_BRK_R1 -561.6435105 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -561.5419164 ; N-m ! Spin moment, wheel R2
SV_MY_BRK_R3 -543.1543463 ; N-m ! Spin moment, wheel R3
SV_MY_BRK_R4 -537.2662381 ; N-m ! Spin moment, wheel R4
SV_MY_BRK_R5 -537.2661407 ; N-m ! Spin moment, wheel R5
SV_MY_BRK_R6 38.18188607 ; N-m ! Spin moment, wheel R6
SV_MY_H1            0 ; N-m ! Pitch moment minus damping, hitch 1
SV_MZ_H1            0 ; N-m ! Articulation moment minus damping, hitch 1
SV_MZ_WHEEL_L1 -11.60496183 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 -14.11931831 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_L3 -12.90160737 ; N-m ! Tire Mz, wheel L3
SV_MZ_WHEEL_L4 -12.91647317 ; N-m ! Tire Mz, wheel L4
SV_MZ_WHEEL_L5 -12.93192577 ; N-m ! Tire Mz, wheel L5
SV_MZ_WHEEL_L6 -34.47813446 ; N-m ! Tire Mz, wheel L6
SV_MZ_WHEEL_R1 -18.99655765 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 -21.72986647 ; N-m ! Tire Mz, wheel R2
SV_MZ_WHEEL_R3 -13.67122905 ; N-m ! Tire Mz, wheel R3
SV_MZ_WHEEL_R4 -13.68327972 ; N-m ! Tire Mz, wheel R4
SV_MZ_WHEEL_R5 -13.69618359 ; N-m ! Tire Mz, wheel R5
SV_MZ_WHEEL_R6 -33.0498368 ; N-m ! Tire Mz, wheel R6
SV_M_CL2_CAP_D4_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 3rd drive axle diff
SV_M_CL2_CAP_D5_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 4th drive axle diff
SV_M_CL2_CAP_D6_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for drive
                      ! axles 3,4,5
SV_M_CL2_CAP_D7_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for master transfer case
SV_M_CL2_CAP_D8_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 5th drive axle diff
SV_M_CL2_CAP_D9_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for drive
                      ! axles 4,5
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for drive
                      ! axles 1,2
SV_M_CL_CAP_D4_DYN  0 ; N-m ! ODE: Clutch capacity for 3rd drive axle diff
SV_M_CL_CAP_D5_DYN  0 ; N-m ! ODE: Clutch capacity for 4th drive axle diff
SV_M_CL_CAP_D6_DYN  0 ; N-m ! ODE: Clutch capacity for inter-axle diff for drive
                      ! axles 3,4,5
SV_M_CL_CAP_D7_DYN  0 ; N-m ! ODE: Clutch capacity for master transfer case
SV_M_CL_CAP_D8_DYN  0 ; N-m ! ODE: Clutch capacity for 5th drive axle diff
SV_M_CL_CAP_D9_DYN  0 ; N-m ! ODE: Clutch capacity for inter-axle diff for drive
                      ! axles 4,5
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff
SV_M_CL_CAP_XC_DYN  0 ; N-m ! ODE: Clutch capacity for inter-axle diff for drive
                      ! axles 1,2
SV_M_CL_LF_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle diff
SV_M_CL_L_D3_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                       ! for drive axles 1,2
SV_M_CL_L_D4_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for 3rd drive axle
                       ! diff
SV_M_CL_L_D5_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for 4th drive axle
                       ! diff
SV_M_CL_L_D6_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                       ! for drive axles 3,4,5
SV_M_CL_L_D7_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for master transfer
                       ! case
SV_M_CL_L_D8_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for 5th drive axle
                       ! diff
SV_M_CL_L_D9_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                       ! for drive axles 4,5
SV_M_CL_RF_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                      ! diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff
SV_M_CL_R_D3_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                       ! for drive axles 1,2
SV_M_CL_R_D4_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for 3rd drive axle
                       ! diff
SV_M_CL_R_D5_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for 4th drive axle
                       ! diff
SV_M_CL_R_D6_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                       ! for drive axles 3,4,5
SV_M_CL_R_D7_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for master transfer
                       ! case
SV_M_CL_R_D8_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for 5th drive axle
                       ! diff
SV_M_CL_R_D9_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                       ! for drive axles 4,5
SV_M_HYS_COL -0.03037456877 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A3    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A4    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A5    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A6    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -125.225298 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2 -129.6031447 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_L3          0 ; N-m ! Kingpin moment, wheel L3
SV_M_KP_L4          0 ; N-m ! Kingpin moment, wheel L4
SV_M_KP_L5          0 ; N-m ! Kingpin moment, wheel L5
SV_M_KP_L6          0 ; N-m ! Kingpin moment, wheel L6
SV_M_KP_R1 82.79782389 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2 78.13341253 ; N-m ! Kingpin moment, wheel R2
SV_M_KP_R3          0 ; N-m ! Kingpin moment, wheel R3
SV_M_KP_R4          0 ; N-m ! Kingpin moment, wheel R4
SV_M_KP_R5          0 ; N-m ! Kingpin moment, wheel R5
SV_M_KP_R6          0 ; N-m ! Kingpin moment, wheel R6
SV_M_MOTOR_D1_L 581.618105 ; N-m ! ODE: Electric motor torque on left wheel of diff.
                           ! 1
SV_M_MOTOR_D1_R 581.618105 ; N-m ! ODE: Electric motor torque on right wheel of
                           ! diff. 1
SV_M_MOTOR_D2_L 581.618105 ; N-m ! ODE: Electric motor torque on left wheel of diff.
                           ! 2
SV_M_MOTOR_D2_R 581.618105 ; N-m ! ODE: Electric motor torque on right wheel of
                           ! diff. 2
SV_M_MOTOR_D4_L 581.618105 ; N-m ! ODE: Electric motor torque on left wheel of diff.
                           ! 4
SV_M_MOTOR_D4_R 581.618105 ; N-m ! ODE: Electric motor torque on right wheel of
                           ! diff. 4
SV_M_MOTOR_D5_L 575.8019239 ; N-m ! ODE: Electric motor torque on left wheel of
                            ! diff. 5
SV_M_MOTOR_D5_R 575.8019239 ; N-m ! ODE: Electric motor torque on right wheel of
                            ! diff. 5
SV_M_MOTOR_D8_L 575.8019239 ; N-m ! ODE: Electric motor torque on left wheel of
                            ! diff. 8
SV_M_MOTOR_D8_R 575.8019239 ; N-m ! ODE: Electric motor torque on right wheel of
                            ! diff. 8
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_L3        0 ; N-m ! Kingpin steer park torque, wheel L3
SV_M_PARK_L4        0 ; N-m ! Kingpin steer park torque, wheel L4
SV_M_PARK_L5        0 ; N-m ! Kingpin steer park torque, wheel L5
SV_M_PARK_L6        0 ; N-m ! Kingpin steer park torque, wheel L6
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_PARK_R3        0 ; N-m ! Kingpin steer park torque, wheel R3
SV_M_PARK_R4        0 ; N-m ! Kingpin steer park torque, wheel R4
SV_M_PARK_R5        0 ; N-m ! Kingpin steer park torque, wheel R5
SV_M_PARK_R6        0 ; N-m ! Kingpin steer park torque, wheel R6
SV_M_TC             0 ; N-m ! Transmission input shaft torque {M_TC}
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_L3           0 ; MPa ! ODE: Brake actuator pressure for wheel L3
SV_PBK_L4           0 ; MPa ! ODE: Brake actuator pressure for wheel L4
SV_PBK_L5           0 ; MPa ! ODE: Brake actuator pressure for wheel L5
SV_PBK_L6 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel L6
SV_PBK_R1 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PBK_R3           0 ; MPa ! ODE: Brake actuator pressure for wheel R3
SV_PBK_R4           0 ; MPa ! ODE: Brake actuator pressure for wheel R4
SV_PBK_R5           0 ; MPa ! ODE: Brake actuator pressure for wheel R5
SV_PBK_R6 4.69894933e-42 ; MPa ! ODE: Brake actuator pressure for wheel R6
SV_PITCH -0.4882337917 ; deg ! ODE: Pitch of sprung mass, unit 1 {Pitch}
SV_PITCH_H1_OLD 0.5419322551 ; deg ! Relative pitch (2-1-3) for hitch 1
SV_PITCH_REL_2 0.5419273731 ; deg ! ODE: Relative pitch (3-2-1) for unit 2
SV_PW_AV_HYBRID 100000 ; - ! ODE: Time delayed hybrid/electric system available
                       ! power
SV_REGEN_SOC_ON_OFF 1 ; - ! Regenerative SOC condition on/off old
SV_REGEN_W_ON_OFF   1 ; - ! Regenerative speed condition on/off old
SV_ROLL   1.531839486 ; deg ! ODE: Roll (Euler) of sprung mass, unit 1 {Roll_E}
SV_ROLL_A1 0.09458099863 ; deg ! ODE: Roll of axle 1
SV_ROLL_A2 0.0958459556 ; deg ! ODE: Roll of axle 2
SV_ROLL_A3 0.06648351023 ; deg ! ODE: Roll of axle 3
SV_ROLL_A4 0.06645122624 ; deg ! ODE: Roll of axle 4
SV_ROLL_A5 0.06641974047 ; deg ! ODE: Roll of axle 5
SV_ROLL_A6 0.03467206187 ; deg ! ODE: Roll of axle 6
SV_ROLL_H1_OLD 0.01549604675 ; deg ! Relative roll (2-1-3) for hitch 1
SV_ROLL_REL_2 0.01565600045 ; deg ! ODE: Relative roll (3-2-1) for unit 2
SV_ROT_L1 96.69827446 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 96.40721232 ; rev ! ODE: Rotation of wheel L2
SV_ROT_L3 95.98744838 ; rev ! ODE: Rotation of wheel L3
SV_ROT_L4 95.92445068 ; rev ! ODE: Rotation of wheel L4
SV_ROT_L5 95.93189166 ; rev ! ODE: Rotation of wheel L5
SV_ROT_L6 92.61874446 ; rev ! ODE: Rotation of wheel L6
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_L3        0 ; rev ! Rotation reference of wheel L3 in "locked" mode
SV_ROT_LK_L4        0 ; rev ! Rotation reference of wheel L4 in "locked" mode
SV_ROT_LK_L5        0 ; rev ! Rotation reference of wheel L5 in "locked" mode
SV_ROT_LK_L6        0 ; rev ! Rotation reference of wheel L6 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_LK_R3        0 ; rev ! Rotation reference of wheel R3 in "locked" mode
SV_ROT_LK_R4        0 ; rev ! Rotation reference of wheel R4 in "locked" mode
SV_ROT_LK_R5        0 ; rev ! Rotation reference of wheel R5 in "locked" mode
SV_ROT_LK_R6        0 ; rev ! Rotation reference of wheel R6 in "locked" mode
SV_ROT_R1 95.84642879 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 95.52691248 ; rev ! ODE: Rotation of wheel R2
SV_ROT_R3 95.01895718 ; rev ! ODE: Rotation of wheel R3
SV_ROT_R4 95.01582766 ; rev ! ODE: Rotation of wheel R4
SV_ROT_R5 95.30206317 ; rev ! ODE: Rotation of wheel R5
SV_ROT_R6   91.749398 ; rev ! ODE: Rotation of wheel R6
SV_ROT_SHAFT_1 377.3876184 ; rev ! ODE: 1st drive axle diff input shaft rotation
                           ! {Rot_D3f}
SV_ROT_SHAFT_2 376.1908846 ; rev ! ODE: 2nd drive axle diff input shaft rotation
                           ! {Rot_D3r}
SV_ROT_SHAFT_3 376.7892515 ; rev ! ODE: Inter-axle diff for drive axles 1,2 input
                           ! shaft rotation {Rot_D7f}
SV_ROT_SHAFT_4 374.3725549 ; rev ! ODE: 3rd drive axle diff input shaft rotation
                           ! {Rot_D6f}
SV_ROT_SHAFT_5 374.2429455 ; rev ! ODE: 4th drive axle diff input shaft rotation
                           ! {Rot_D9f}
SV_ROT_SHAFT_6 374.4780173 ; rev ! ODE: Inter-axle diff for drive axles 3,4,5 input
                           ! shaft rotation {Rot_D7r}
SV_ROT_SHAFT_7 375.402511 ; rev ! ODE: Master transfer case input shaft rotation 
SV_ROT_SHAFT_8 374.8185515 ; rev ! ODE: 5th drive axle diff input shaft rotation
                           ! {Rot_D9r}
SV_ROT_SHAFT_9 374.5307485 ; rev ! ODE: Inter-axle diff for drive axles 4,5 input
                           ! shaft rotation {Rot_D6r}
SV_ROT_SHAFT_L_D1 96.69827446 ; rev ! ODE: Diff1 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D2 96.40721232 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D3 377.3876184 ; rev ! ODE: Diff3 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D4 95.98744838 ; rev ! ODE: Diff4 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D5 95.92445068 ; rev ! ODE: Diff5 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D6 374.3725549 ; rev ! ODE: Diff6 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D7 376.7892515 ; rev ! ODE: Diff7 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D8 95.93189166 ; rev ! ODE: Diff8 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D9 374.2429455 ; rev ! ODE: Diff9 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D1 95.84642879 ; rev ! ODE: Diff1 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D2 95.52691248 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D3 376.1908846 ; rev ! ODE: Diff3 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D4 95.01895718 ; rev ! ODE: Diff4 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D5 95.01582766 ; rev ! ODE: Diff5 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D6 374.5307485 ; rev ! ODE: Diff6 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D7 374.4780173 ; rev ! ODE: Diff7 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D8 95.30206317 ; rev ! ODE: Diff8 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D9 374.8185515 ; rev ! ODE: Diff9 Right (second) output shaft
                              ! rotation
SV_ROT_TC           0 ; rev ! ODE: Torque coupling output shaft rotation {Rot_TC}
SV_ROT_TR_OUT 375.402511 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_TOTAL_SC  0 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.012386164 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -1.012392161 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.012382459 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -1.012377164 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.5108826065 ; m ! Deflected radius for tire L1i (saved)
SV_R_L1O 0.5108826065 ; m ! Deflected radius for tire L1o (saved)
SV_R_L2I 0.5109007182 ; m ! Deflected radius for tire L2i (saved)
SV_R_L2O 0.5109007182 ; m ! Deflected radius for tire L2o (saved)
SV_R_L3I 0.5146500762 ; m ! Deflected radius for tire L3i (saved)
SV_R_L3O 0.5146886488 ; m ! Deflected radius for tire L3o (saved)
SV_R_L4I 0.5146499269 ; m ! Deflected radius for tire L4i (saved)
SV_R_L4O 0.5146883248 ; m ! Deflected radius for tire L4o (saved)
SV_R_L5I 0.5146497386 ; m ! Deflected radius for tire L5i (saved)
SV_R_L5O 0.5146879661 ; m ! Deflected radius for tire L5o (saved)
SV_R_L6I 0.5086921601 ; m ! Deflected radius for tire L6i (saved)
SV_R_L6O  0.508642562 ; m ! Deflected radius for tire L6o (saved)
SV_R_R1I 0.5096133168 ; m ! Deflected radius for tire R1i (saved)
SV_R_R1O 0.5096133168 ; m ! Deflected radius for tire R1o (saved)
SV_R_R2I 0.5095953311 ; m ! Deflected radius for tire R2i (saved)
SV_R_R2O 0.5095953311 ; m ! Deflected radius for tire R2o (saved)
SV_R_R3I 0.5144568401 ; m ! Deflected radius for tire R3i (saved)
SV_R_R3O 0.5144182675 ; m ! Deflected radius for tire R3o (saved)
SV_R_R4I 0.5144575658 ; m ! Deflected radius for tire R4i (saved)
SV_R_R4O 0.5144191679 ; m ! Deflected radius for tire R4o (saved)
SV_R_R5I 0.5144582308 ; m ! Deflected radius for tire R5i (saved)
SV_R_R5O 0.5144200032 ; m ! Deflected radius for tire R5o (saved)
SV_R_R6I 0.5089406305 ; m ! Deflected radius for tire R6i (saved)
SV_R_R6O 0.5089902286 ; m ! Deflected radius for tire R6o (saved)
SV_SLIP_LAT_L1I -0.002273474306 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I -0.002765624439 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O     0 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_L3I -0.002550146131 ; - ! ODE: Lagged tan of lateral slip, tire L3i
SV_SLIP_LAT_L3O -0.002550148773 ; - ! ODE: Lagged tan of lateral slip, tire L3o
SV_SLIP_LAT_L4I -0.002553012288 ; - ! ODE: Lagged tan of lateral slip, tire L4i
SV_SLIP_LAT_L4O -0.00255301481 ; - ! ODE: Lagged tan of lateral slip, tire L4o
SV_SLIP_LAT_L5I -0.002555878349 ; - ! ODE: Lagged tan of lateral slip, tire L5i
SV_SLIP_LAT_L5O -0.002555880752 ; - ! ODE: Lagged tan of lateral slip, tire L5o
SV_SLIP_LAT_L6I -0.002861831166 ; - ! ODE: Lagged tan of lateral slip, tire L6i
SV_SLIP_LAT_L6O -0.002861833569 ; - ! ODE: Lagged tan of lateral slip, tire L6o
SV_SLIP_LAT_R1I -0.00313843301 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I -0.003582808188 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O     0 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LAT_R3I -0.002550132895 ; - ! ODE: Lagged tan of lateral slip, tire R3i
SV_SLIP_LAT_R3O -0.002550130253 ; - ! ODE: Lagged tan of lateral slip, tire R3o
SV_SLIP_LAT_R4I -0.002552999652 ; - ! ODE: Lagged tan of lateral slip, tire R4i
SV_SLIP_LAT_R4O -0.00255299713 ; - ! ODE: Lagged tan of lateral slip, tire R4o
SV_SLIP_LAT_R5I -0.002555866308 ; - ! ODE: Lagged tan of lateral slip, tire R5i
SV_SLIP_LAT_R5O -0.002555863905 ; - ! ODE: Lagged tan of lateral slip, tire R5o
SV_SLIP_LAT_R6I -0.002861819134 ; - ! ODE: Lagged tan of lateral slip, tire R6i
SV_SLIP_LAT_R6O -0.002861816732 ; - ! ODE: Lagged tan of lateral slip, tire R6o
SV_SLIP_LONG_L1I 0.009698927132 ; - ! ODE: Lagged long. slip, tire L1i {KappL_L1i}
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o {KappL_L1o}
SV_SLIP_LONG_L2I 0.009731523396 ; - ! ODE: Lagged long. slip, tire L2i {KappL_L2i}
SV_SLIP_LONG_L2O    0 ; - ! ODE: Lagged long. slip, tire L2o {KappL_L2o}
SV_SLIP_LONG_L3I 0.007867448932 ; - ! ODE: Lagged long. slip, tire L3i {KappL_L3i}
SV_SLIP_LONG_L3O 0.007868256113 ; - ! ODE: Lagged long. slip, tire L3o {KappL_L3o}
SV_SLIP_LONG_L4I 0.007778299149 ; - ! ODE: Lagged long. slip, tire L4i {KappL_L4i}
SV_SLIP_LONG_L4O 0.007779106247 ; - ! ODE: Lagged long. slip, tire L4o {KappL_L4o}
SV_SLIP_LONG_L5I 0.007777977663 ; - ! ODE: Lagged long. slip, tire L5i {KappL_L5i}
SV_SLIP_LONG_L5O 0.007778784751 ; - ! ODE: Lagged long. slip, tire L5o {KappL_L5o}
SV_SLIP_LONG_L6I -0.0007472322899 ; - ! ODE: Lagged long. slip, tire L6i {KappL_L6i}
SV_SLIP_LONG_L6O -0.0007463485866 ; - ! ODE: Lagged long. slip, tire L6o {KappL_L6o}
SV_SLIP_LONG_R1I 0.008559040711 ; - ! ODE: Lagged long. slip, tire R1i {KappL_R1i}
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o {KappL_R1o}
SV_SLIP_LONG_R2I 0.008560558749 ; - ! ODE: Lagged long. slip, tire R2i {KappL_R2i}
SV_SLIP_LONG_R2O    0 ; - ! ODE: Lagged long. slip, tire R2o {KappL_R2o}
SV_SLIP_LONG_R3I 0.007526666205 ; - ! ODE: Lagged long. slip, tire R3i {KappL_R3i}
SV_SLIP_LONG_R3O 0.007525859301 ; - ! ODE: Lagged long. slip, tire R3o {KappL_R3o}
SV_SLIP_LONG_R4I 0.00744274 ; - ! ODE: Lagged long. slip, tire R4i {KappL_R4i}
SV_SLIP_LONG_R4O 0.007441933175 ; - ! ODE: Lagged long. slip, tire R4o {KappL_R4o}
SV_SLIP_LONG_R5I 0.007443884078 ; - ! ODE: Lagged long. slip, tire R5i {KappL_R5i}
SV_SLIP_LONG_R5O 0.007443077263 ; - ! ODE: Lagged long. slip, tire R5o {KappL_R5o}
SV_SLIP_LONG_R6I -0.0007533089365 ; - ! ODE: Lagged long. slip, tire R6i {KappL_R6i}
SV_SLIP_LONG_R6O -0.0007541926222 ; - ! ODE: Lagged long. slip, tire R6o {KappL_R6o}
SV_SO_DIST 305.6785153 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 137.314586 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 131.2242473 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM 0.07991867682 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD 0.07991952261 ; deg ! Road-wheel steer from driver model (prev. time
                            ! step)
SV_STR_IN_DGR_A1 -0.0007392554099 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2 -0.0007392554099 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_DGR_A3    0 ; - ! ODE: Steering gear input rate, axle 3
SV_STR_IN_DGR_A4    0 ; - ! ODE: Steering gear input rate, axle 4
SV_STR_IN_DGR_A5    0 ; - ! ODE: Steering gear input rate, axle 5
SV_STR_IN_DGR_A6    0 ; - ! ODE: Steering gear input rate, axle 6
SV_STR_IN_GR_A1 0.03492286896 ; - ! ODE: Steering gear input position, axle 1
                              ! {A_StrIn1}
SV_STR_IN_GR_A2 0.03492286896 ; - ! ODE: Steering gear input position, axle 2
                              ! {A_StrIn2}
SV_STR_IN_GR_A3     0 ; - ! ODE: Steering gear input position, axle 3 {A_StrIn3}
SV_STR_IN_GR_A4     0 ; - ! ODE: Steering gear input position, axle 4 {A_StrIn4}
SV_STR_IN_GR_A5     0 ; - ! ODE: Steering gear input position, axle 5 {A_StrIn5}
SV_STR_IN_GR_A6     0 ; - ! ODE: Steering gear input position, axle 6 {A_StrIn6}
SV_STR_KP_L1 -0.01556854671 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD -0.01556833901 ; deg ! Kingpin steer angle, wheel L1 (previous time
                                ! step)
SV_STR_KP_L2 0.01282435533 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L2_OLD 0.01282456838 ; deg ! Kingpin steer angle, wheel L2 (previous time
                               ! step)
SV_STR_KP_L3_OLD    0 ; deg ! Kingpin steer angle, wheel L3 (previous time step)
SV_STR_KP_L4_OLD    0 ; deg ! Kingpin steer angle, wheel L4 (previous time step)
SV_STR_KP_L5_OLD    0 ; deg ! Kingpin steer angle, wheel L5 (previous time step)
SV_STR_KP_L6_OLD    0 ; deg ! Kingpin steer angle, wheel L6 (previous time step)
SV_STR_KP_R1 0.03461911836 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD 0.03461967638 ; deg ! Kingpin steer angle, wheel R1 (previous time
                               ! step)
SV_STR_KP_R2 0.06023816141 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R2_OLD 0.06023872247 ; deg ! Kingpin steer angle, wheel R2 (previous time
                               ! step)
SV_STR_KP_R3_OLD    0 ; deg ! Kingpin steer angle, wheel R3 (previous time step)
SV_STR_KP_R4_OLD    0 ; deg ! Kingpin steer angle, wheel R4 (previous time step)
SV_STR_KP_R5_OLD    0 ; deg ! Kingpin steer angle, wheel R5 (previous time step)
SV_STR_KP_R6_OLD    0 ; deg ! Kingpin steer angle, wheel R6 (previous time step)
SV_STR_OUT_GR_A1 0.001396929543 ; - ! Steering gear output
SV_STR_OUT_GR_A2 0.001396929543 ; - ! Steering gear output
SV_STR_OUT_GR_A3    0 ; - ! Steering gear output
SV_STR_OUT_GR_A4    0 ; - ! Steering gear output
SV_STR_OUT_GR_A5    0 ; - ! Steering gear output
SV_STR_OUT_GR_A6    0 ; - ! Steering gear output
SV_SWA       2.000933 ; deg ! ODE: Steering wheel angle
SV_SWA_DM 2.000954178 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD 2.000954178 ; deg ! Steering wheel angle (previous time step)
SV_THROTTLE 0.9999997475 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          1 ; - ! Requested Throttle
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_L3          0 ; C ! ODE: Brake rotor L3 temperature {T_Rtr_L3}
SV_TROT_L4          0 ; C ! ODE: Brake rotor L4 temperature {T_Rtr_L4}
SV_TROT_L5          0 ; C ! ODE: Brake rotor L5 temperature {T_Rtr_L5}
SV_TROT_L6          0 ; C ! ODE: Brake rotor L6 temperature {T_Rtr_L6}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_TROT_R3          0 ; C ! ODE: Brake rotor R3 temperature {T_Rtr_R3}
SV_TROT_R4          0 ; C ! ODE: Brake rotor R4 temperature {T_Rtr_R4}
SV_TROT_R5          0 ; C ! ODE: Brake rotor R5 temperature {T_Rtr_R5}
SV_TROT_R6          0 ; C ! ODE: Brake rotor R6 temperature {T_Rtr_R6}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time when ESC control status last changed
SV_T_HYBRID_MODE_CHANGE -10000000 ; s ! Time at hybrid/electric powertrain mode
                                  ! changed
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_L3           0 ; mm3 ! ODE: Brake caliper L3 volume
SV_VBK_L4           0 ; mm3 ! ODE: Brake caliper L4 volume
SV_VBK_L5           0 ; mm3 ! ODE: Brake caliper L5 volume
SV_VBK_L6           0 ; mm3 ! ODE: Brake caliper L6 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VBK_R3           0 ; mm3 ! ODE: Brake caliper R3 volume
SV_VBK_R4           0 ; mm3 ! ODE: Brake caliper R4 volume
SV_VBK_R5           0 ; mm3 ! ODE: Brake caliper R5 volume
SV_VBK_R6           0 ; mm3 ! ODE: Brake caliper R6 volume
SV_VERR_OLD 0.9261212923 ; km/h ! Speed controller error at previous time step
SV_VXS    39.65419576 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 1
SV_VXS_2  39.65556978 ; km/h ! ODE: Body X speed of laden sprung-mass CG_2
SV_VYS -0.02788614361 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 1
SV_VYS_2 -0.0314296101 ; m/s ! ODE: Body Y speed of laden sprung-mass CG_2
SV_VZS -0.09323071754 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 1
SV_VZS_2 0.01099725484 ; m/s ! ODE: Body Z speed of laden sprung-mass CG_2
SV_XO     133.4101159 ; m ! ODE: Global X coord. of sprung-mass origin, unit 1 {Xo}
SV_X_GND  130.4047241 ; m ! X coord, ground, unit 1 aero ref. pt (saved)
SV_X_GND_2 127.3945005 ; m ! X coord, ground, unit 2 aero ref. pt (saved)
SV_X_H1 -0.01912878168 ; mm ! ODE: X translation for hitch 1
SV_YAW   0.1229918886 ; deg ! ODE: Yaw of sprung mass, unit 1 {Yaw}
SV_YAW_REL_2 0.01691316381 ; deg ! ODE: Relative yaw (3-2-1) for unit 2
SV_YO    -2.033588654 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 1 {Yo}
SV_Y_GND -2.039867857 ; m ! Y coord, ground, unit 1 aero ref. pt (saved)
SV_Y_GND_2 -2.046753764 ; m ! Y coord, ground, unit 2 aero ref. pt (saved)
SV_Y_H1 -0.004224274668 ; mm ! ODE: Y translation for hitch 1
SV_ZO  -0.02535718667 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 1 {Zo}
SV_Z_CTC_L1I -0.02770527486 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O -0.02770527486 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I -0.0277786446 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O -0.0277786446 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_L3I -0.03520460905 ; m ! Center of tire contact L3i {Zgnd_L3i}
SV_Z_CTC_L3O -0.02659684259 ; m ! Center of tire contact L3o {Zgnd_L3o}
SV_Z_CTC_L4I -0.03527742232 ; m ! Center of tire contact L4i {Zgnd_L4i}
SV_Z_CTC_L4O -0.02666965586 ; m ! Center of tire contact L4o {Zgnd_L4o}
SV_Z_CTC_L5I -0.03535023502 ; m ! Center of tire contact L5i {Zgnd_L5i}
SV_Z_CTC_L5O -0.02674246856 ; m ! Center of tire contact L5o {Zgnd_L5o}
SV_Z_CTC_L6I -0.03591057918 ; m ! Center of tire contact L6i {Zgnd_L6i}
SV_Z_CTC_L6O -0.02730281886 ; m ! Center of tire contact L6o {Zgnd_L6o}
SV_Z_CTC_R1I -0.08518421169 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O -0.08518421169 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I -0.08525750278 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O -0.08525750278 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_CTC_R3I -0.07832674233 ; m ! Center of tire contact R3i {Zgnd_R3i}
SV_Z_CTC_R3O -0.08693450879 ; m ! Center of tire contact R3o {Zgnd_R3o}
SV_Z_CTC_R4I -0.07839955559 ; m ! Center of tire contact R4i {Zgnd_R4i}
SV_Z_CTC_R4O -0.08700732205 ; m ! Center of tire contact R4o {Zgnd_R4o}
SV_Z_CTC_R5I -0.07847236829 ; m ! Center of tire contact R5i {Zgnd_R5i}
SV_Z_CTC_R5O -0.08708013475 ; m ! Center of tire contact R5o {Zgnd_R5o}
SV_Z_CTC_R6I -0.07903268169 ; m ! Center of tire contact R6i {Zgnd_R6i}
SV_Z_CTC_R6O -0.08764044201 ; m ! Center of tire contact R6o {Zgnd_R6o}
SV_Z_GND -0.05666299603 ; m ! Z coord, ground, unit 1 aero ref. pt (saved)
SV_Z_GND_2 -0.05685427122 ; m ! Z coord, ground, unit 2 aero ref. pt (saved)
SV_Z_H1 -0.0005033954489 ; mm ! ODE: Z translation for hitch 1


END
